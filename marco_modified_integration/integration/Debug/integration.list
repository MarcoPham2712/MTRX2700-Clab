
integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08001c64  08001c64  00002c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e68  08001e68  0000308c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001e68  08001e68  00002e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e70  08001e70  0000308c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e70  08001e70  00002e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e74  08001e74  00002e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08001e78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000308c  2**0
                  CONTENTS
 10 .bss          000002a4  2000008c  2000008c  0000308c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  0000308c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022d6  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a26  00000000  00000000  00005392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00005db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000157  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016df9  00000000  00000000  00006107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b47  00000000  00000000  0001cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078685  00000000  00000000  0001fa47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000980cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001040  00000000  00000000  00098110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00099150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c4c 	.word	0x08001c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08001c4c 	.word	0x08001c4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <TIM2_IRQHandler>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*on_button_press)() = 0x00;

void TIM2_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	// the status register tells us why the interrupt was called
	// UIF is from an overflow type event
	if ((TIM2->SR & TIM_SR_UIF) != 0){
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d00a      	beq.n	80002d8 <TIM2_IRQHandler+0x28>
		// set the LED state to be a specific value
		TIM2->SR &= ~TIM_SR_UIF;
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	6113      	str	r3, [r2, #16]
		on_button_press();
 80002d2:	4b02      	ldr	r3, [pc, #8]	@ (80002dc <TIM2_IRQHandler+0x2c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4798      	blx	r3

	}
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000a8 	.word	0x200000a8

080002e0 <led_chase_direction>:

void led_chase_direction(char direction)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	TIM2->CNT = 0;
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ee:	2200      	movs	r2, #0
 80002f0:	625a      	str	r2, [r3, #36]	@ 0x24
	switch (direction) {
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b61      	cmp	r3, #97	@ 0x61
 80002f6:	d005      	beq.n	8000304 <led_chase_direction+0x24>
 80002f8:	2b63      	cmp	r3, #99	@ 0x63
 80002fa:	d107      	bne.n	800030c <led_chase_direction+0x2c>
		case 'c':
			on_button_press = &chase_led_c;	// Chasing LED for timer function
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <led_chase_direction+0x38>)
 80002fe:	4a07      	ldr	r2, [pc, #28]	@ (800031c <led_chase_direction+0x3c>)
 8000300:	601a      	str	r2, [r3, #0]
			break;
 8000302:	e003      	b.n	800030c <led_chase_direction+0x2c>
		case 'a':
			on_button_press = &chase_led_a; // Turn on LED for oneshot function
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <led_chase_direction+0x38>)
 8000306:	4a06      	ldr	r2, [pc, #24]	@ (8000320 <led_chase_direction+0x40>)
 8000308:	601a      	str	r2, [r3, #0]
			break;
 800030a:	bf00      	nop
	}
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	200000a8 	.word	0x200000a8
 800031c:	08000325 	.word	0x08000325
 8000320:	08000359 	.word	0x08000359

08000324 <chase_led_c>:

void chase_led_c()
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <chase_led_c+0x30>)
 800032c:	607b      	str	r3, [r7, #4]

	*led_register <<= 1; // Shift LED clockwise by 1
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	b2da      	uxtb	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	701a      	strb	r2, [r3, #0]
	if (*led_register == 0) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <chase_led_c+0x24>
		*led_register = 1; // If shift causes all lights off, turn first LED on
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2201      	movs	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
	}
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	48001015 	.word	0x48001015

08000358 <chase_led_a>:

void chase_led_a()
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800035e:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <chase_led_a+0x1c>)
 8000360:	607b      	str	r3, [r7, #4]

	*led_register =0; // Turn on all LEDs
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	48001015 	.word	0x48001015

08000378 <finished_transmission>:
extern uint8_t transmit_index;
extern uint8_t transmit_length;
extern uint8_t is_transmitting;
uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;

void finished_transmission(uint8_t *user_buffer, uint32_t message_length) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
    user_buffer[message_length] = '\0';
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]

    // Splitting string for command and operand
    char *command = strtok((char*)user_buffer, " ");
 800038c:	4924      	ldr	r1, [pc, #144]	@ (8000420 <finished_transmission+0xa8>)
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 fd68 	bl	8000e64 <strtok>
 8000394:	60f8      	str	r0, [r7, #12]
    char *operand = strtok(0x00, "");
 8000396:	4923      	ldr	r1, [pc, #140]	@ (8000424 <finished_transmission+0xac>)
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fd63 	bl	8000e64 <strtok>
 800039e:	60b8      	str	r0, [r7, #8]

    if (command) {
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d037      	beq.n	8000416 <finished_transmission+0x9e>
        if (strcmp(command, "led") == 0 && operand) {
 80003a6:	4920      	ldr	r1, [pc, #128]	@ (8000428 <finished_transmission+0xb0>)
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff19 	bl	80001e0 <strcmp>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d106      	bne.n	80003c2 <finished_transmission+0x4a>
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <finished_transmission+0x4a>
            led_command(operand);
 80003ba:	68b8      	ldr	r0, [r7, #8]
 80003bc:	f000 f83c 	bl	8000438 <led_command>
 80003c0:	e029      	b.n	8000416 <finished_transmission+0x9e>
        } else if (strcmp(command, "serial") == 0 && operand) {
 80003c2:	491a      	ldr	r1, [pc, #104]	@ (800042c <finished_transmission+0xb4>)
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f7ff ff0b 	bl	80001e0 <strcmp>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d106      	bne.n	80003de <finished_transmission+0x66>
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d003      	beq.n	80003de <finished_transmission+0x66>
            serial_command(operand);
 80003d6:	68b8      	ldr	r0, [r7, #8]
 80003d8:	f000 f854 	bl	8000484 <serial_command>
 80003dc:	e01b      	b.n	8000416 <finished_transmission+0x9e>
        } else if (strcmp(command, "oneshot") == 0 && operand) {
 80003de:	4914      	ldr	r1, [pc, #80]	@ (8000430 <finished_transmission+0xb8>)
 80003e0:	68f8      	ldr	r0, [r7, #12]
 80003e2:	f7ff fefd 	bl	80001e0 <strcmp>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d106      	bne.n	80003fa <finished_transmission+0x82>
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <finished_transmission+0x82>
            oneshot_command(operand);
 80003f2:	68b8      	ldr	r0, [r7, #8]
 80003f4:	f000 f886 	bl	8000504 <oneshot_command>
 80003f8:	e00d      	b.n	8000416 <finished_transmission+0x9e>
        }else if (strcmp(command, "timer") == 0 && operand) {
 80003fa:	490e      	ldr	r1, [pc, #56]	@ (8000434 <finished_transmission+0xbc>)
 80003fc:	68f8      	ldr	r0, [r7, #12]
 80003fe:	f7ff feef 	bl	80001e0 <strcmp>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d106      	bne.n	8000416 <finished_transmission+0x9e>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <finished_transmission+0x9e>
            timer_command(operand);
 800040e:	68b8      	ldr	r0, [r7, #8]
 8000410:	f000 f89e 	bl	8000550 <timer_command>
        }
    }
}
 8000414:	e7ff      	b.n	8000416 <finished_transmission+0x9e>
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	08001c64 	.word	0x08001c64
 8000424:	08001c68 	.word	0x08001c68
 8000428:	08001c6c 	.word	0x08001c6c
 800042c:	08001c70 	.word	0x08001c70
 8000430:	08001c78 	.word	0x08001c78
 8000434:	08001c80 	.word	0x08001c80

08000438 <led_command>:

void led_command(char *operand) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044a:	f023 0301 	bic.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]
	TIM2->DIER &= ~(TIM_DIER_UIE | TIM_DIER_CC1IE);
 8000450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045a:	f023 0303 	bic.w	r3, r3, #3
 800045e:	60d3      	str	r3, [r2, #12]
    uint8_t value = (uint8_t)strtol(operand, NULL, 2);
 8000460:	2202      	movs	r2, #2
 8000462:	2100      	movs	r1, #0
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 fbe5 	bl	8000c34 <strtol>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]
    *led_register = value;
 800046e:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <led_command+0x48>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	7bfa      	ldrb	r2, [r7, #15]
 8000474:	701a      	strb	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000000 	.word	0x20000000

08000484 <serial_command>:

void serial_command(char *operand) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	*led_register = 0;
 800048c:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <serial_command+0x68>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049e:	f023 0301 	bic.w	r3, r3, #1
 80004a2:	6013      	str	r3, [r2, #0]
	TIM2->DIER &= ~(TIM_DIER_UIE | TIM_DIER_CC1IE);
 80004a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ae:	f023 0303 	bic.w	r3, r3, #3
 80004b2:	60d3      	str	r3, [r2, #12]
    strcpy((char*)transmit_buffer, operand);
 80004b4:	6879      	ldr	r1, [r7, #4]
 80004b6:	480e      	ldr	r0, [pc, #56]	@ (80004f0 <serial_command+0x6c>)
 80004b8:	f000 fda3 	bl	8001002 <strcpy>
    transmit_length = strlen(operand);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff fe99 	bl	80001f4 <strlen>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <serial_command+0x70>)
 80004c8:	701a      	strb	r2, [r3, #0]
    transmit_index = 0;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <serial_command+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
    is_transmitting = 1;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <serial_command+0x78>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <serial_command+0x7c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <serial_command+0x7c>)
 80004dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000178 	.word	0x20000178
 80004f4:	200001dd 	.word	0x200001dd
 80004f8:	200001dc 	.word	0x200001dc
 80004fc:	200001de 	.word	0x200001de
 8000500:	40013800 	.word	0x40013800

08000504 <oneshot_command>:

void oneshot_command(char *operand){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    // 1. Turn all LEDs ON immediately
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <oneshot_command+0x48>)
 800050e:	60fb      	str	r3, [r7, #12]
    *led_register = 0xFF;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	22ff      	movs	r2, #255	@ 0xff
 8000514:	701a      	strb	r2, [r3, #0]

    uint32_t arr_value = (uint32_t)strtol(operand, 0x00, 10);
 8000516:	220a      	movs	r2, #10
 8000518:	2100      	movs	r1, #0
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fb8a 	bl	8000c34 <strtol>
 8000520:	4603      	mov	r3, r0
 8000522:	60bb      	str	r3, [r7, #8]

    led_chase_direction('a');
 8000524:	2061      	movs	r0, #97	@ 0x61
 8000526:	f7ff fedb 	bl	80002e0 <led_chase_direction>
    TIM2->CR1 = TIM_CR1_OPM;  // One-pulse mode
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	2208      	movs	r2, #8
 8000530:	601a      	str	r2, [r3, #0]
    enable_timers(arr_value*1000);
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000538:	fb02 f303 	mul.w	r3, r2, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f8b1 	bl	80006a4 <enable_timers>

}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	48001015 	.word	0x48001015

08000550 <timer_command>:

void timer_command(char *operand){
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

	*led_register = 1;
 8000558:	4b10      	ldr	r3, [pc, #64]	@ (800059c <timer_command+0x4c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~TIM_CR1_OPM;
 8000560:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056a:	f023 0308 	bic.w	r3, r3, #8
 800056e:	6013      	str	r3, [r2, #0]
	uint32_t arr_value = (uint32_t)strtol(operand, 0x00, 10);
 8000570:	220a      	movs	r2, #10
 8000572:	2100      	movs	r1, #0
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 fb5d 	bl	8000c34 <strtol>
 800057a:	4603      	mov	r3, r0
 800057c:	60fb      	str	r3, [r7, #12]
	enable_timers(arr_value*1000);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000584:	fb02 f303 	mul.w	r3, r2, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f88b 	bl	80006a4 <enable_timers>
	led_chase_direction('c');
 800058e:	2063      	movs	r0, #99	@ 0x63
 8000590:	f7ff fea6 	bl	80002e0 <led_chase_direction>


}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	@ (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	@ (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <enable_clocks>:

#include "serial.h"
#include "stm32f303xc.h"


void enable_clocks() {
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <enable_clocks+0x1c>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	@ (800064c <enable_clocks+0x1c>)
 800063a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800063e:	6153      	str	r3, [r2, #20]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <initialise_board>:
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <initialise_board+0x20>)
 8000658:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000660:	801a      	strh	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	48001002 	.word	0x48001002

08000674 <enable_interrupt>:

void enable_interrupt() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
    // Temporarily disable interrupts globally during setup
    __disable_irq();

    // -------- USART1 Interrupt setup (highest priority) --------
    USART1->CR1 |= USART_CR1_RXNEIE;  // Enable USART RXNE interrupt
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <enable_interrupt+0x2c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <enable_interrupt+0x2c>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6013      	str	r3, [r2, #0]

    // Set USART1 interrupt priority to highest (0 is highest in NVIC)
    NVIC_SetPriority(USART1_IRQn, 1);
 8000688:	2101      	movs	r1, #1
 800068a:	2025      	movs	r0, #37	@ 0x25
 800068c:	f7ff ffa6 	bl	80005dc <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000690:	2025      	movs	r0, #37	@ 0x25
 8000692:	f7ff ff85 	bl	80005a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000696:	b662      	cpsie	i
}
 8000698:	bf00      	nop



    __enable_irq();
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40013800 	.word	0x40013800

080006a4 <enable_timers>:



void enable_timers(uint32_t delay_us) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
    __disable_irq();

    // 1. Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <enable_timers+0x94>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <enable_timers+0x94>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	61d3      	str	r3, [r2, #28]

    // 2. Reset control & disable timer
    TIM2->CR1 = 0;
 80006bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
    TIM2->DIER = 0;
 80006c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
    TIM2->SR = 0;       // Clear interrupt flags
 80006cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    TIM2->CNT = 0;
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24

    // 3. Set prescaler and ARR
    TIM2->PSC = 8 - 1;         // 1 µs tick
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e0:	2207      	movs	r2, #7
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_us;
 80006e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // 4. Force update event to preload ARR & PSC into shadow registers
    TIM2->EGR = TIM_EGR_UG;
 80006ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]

    // 5. Re-clear UIF after EGR (some MCUs auto-set it)
    TIM2->SR &= ~TIM_SR_UIF;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	6113      	str	r3, [r2, #16]

    // 6. Enable update interrupt
    TIM2->DIER = TIM_DIER_UIE;
 8000704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
    NVIC_SetPriority(TIM2_IRQn, 2);
 800070c:	2102      	movs	r1, #2
 800070e:	201c      	movs	r0, #28
 8000710:	f7ff ff64 	bl	80005dc <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	201c      	movs	r0, #28
 8000716:	f7ff ff43 	bl	80005a0 <__NVIC_EnableIRQ>
    // 7. Only now: Start timer
    TIM2->CR1 |= TIM_CR1_CEN;
 800071a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800072a:	b662      	cpsie	i
}
 800072c:	bf00      	nop

    __enable_irq();
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800074e:	4b3a      	ldr	r3, [pc, #232]	@ (8000838 <SerialInitialise+0xfc>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a39      	ldr	r2, [pc, #228]	@ (8000838 <SerialInitialise+0xfc>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800075a:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <SerialInitialise+0xfc>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a36      	ldr	r2, [pc, #216]	@ (8000838 <SerialInitialise+0xfc>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	691a      	ldr	r2, [r3, #16]
 800076a:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <SerialInitialise+0xfc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4932      	ldr	r1, [pc, #200]	@ (8000838 <SerialInitialise+0xfc>)
 8000770:	4313      	orrs	r3, r2
 8000772:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	6952      	ldr	r2, [r2, #20]
 800077c:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	6992      	ldr	r2, [r2, #24]
 8000786:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	69d9      	ldr	r1, [r3, #28]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	6a1a      	ldr	r2, [r3, #32]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	430a      	orrs	r2, r1
 8000798:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	6a19      	ldr	r1, [r3, #32]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	430a      	orrs	r2, r1
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <SerialInitialise+0xfc>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4920      	ldr	r1, [pc, #128]	@ (8000838 <SerialInitialise+0xfc>)
 80007b6:	4313      	orrs	r3, r2
 80007b8:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <SerialInitialise+0xfc>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	491d      	ldr	r1, [pc, #116]	@ (8000838 <SerialInitialise+0xfc>)
 80007c4:	4313      	orrs	r3, r2
 80007c6:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	330c      	adds	r3, #12
 80007ce:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d822      	bhi.n	800081c <SerialInitialise+0xe0>
 80007d6:	a201      	add	r2, pc, #4	@ (adr r2, 80007dc <SerialInitialise+0xa0>)
 80007d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	080007fb 	.word	0x080007fb
 80007e4:	08000805 	.word	0x08000805
 80007e8:	0800080d 	.word	0x0800080d
 80007ec:	08000815 	.word	0x08000815
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x341;  // 115200 at 8MHz
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	f240 3241 	movw	r2, #833	@ 0x341
 80007f6:	801a      	strh	r2, [r3, #0]
		break;
 80007f8:	e010      	b.n	800081c <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000800:	801a      	strh	r2, [r3, #0]
		break;
 8000802:	e00b      	b.n	800081c <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xD0;  // 115200 at 8MHz
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	22d0      	movs	r2, #208	@ 0xd0
 8000808:	801a      	strh	r2, [r3, #0]
		break;
 800080a:	e007      	b.n	800081c <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8B;  // 115200 at 8MHz
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	228b      	movs	r2, #139	@ 0x8b
 8000810:	801a      	strh	r2, [r3, #0]
		break;
 8000812:	e003      	b.n	800081c <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2246      	movs	r2, #70	@ 0x46
 8000818:	801a      	strh	r2, [r3, #0]
		break;
 800081a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f042 020d 	orr.w	r2, r2, #13
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <USART1_EXTI25_IRQHandler>:
uint8_t transmit_index = 0;
uint8_t transmit_length = 0;
uint8_t is_transmitting = 0;


void USART1_EXTI25_IRQHandler(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 8000842:	4b35      	ldr	r3, [pc, #212]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	2b00      	cmp	r3, #0
 800084c:	d03a      	beq.n	80008c4 <USART1_EXTI25_IRQHandler+0x88>
        uint8_t incoming_byte = USART1->RDR;
 800084e:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 8000850:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000852:	b29b      	uxth	r3, r3
 8000854:	71fb      	strb	r3, [r7, #7]

        if (kernel_index < MESSAGE_LENGTH - 1) {
 8000856:	4b31      	ldr	r3, [pc, #196]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b62      	cmp	r3, #98	@ 0x62
 800085c:	d82f      	bhi.n	80008be <USART1_EXTI25_IRQHandler+0x82>
            kernel_buffer[active_kernel][kernel_index++] = incoming_byte;
 800085e:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <USART1_EXTI25_IRQHandler+0xe4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	b2d1      	uxtb	r1, r2
 800086c:	4a2b      	ldr	r2, [pc, #172]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 800086e:	7011      	strb	r1, [r2, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4a2c      	ldr	r2, [pc, #176]	@ (8000924 <USART1_EXTI25_IRQHandler+0xe8>)
 8000874:	2364      	movs	r3, #100	@ 0x64
 8000876:	fb00 f303 	mul.w	r3, r0, r3
 800087a:	4413      	add	r3, r2
 800087c:	440b      	add	r3, r1
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	701a      	strb	r2, [r3, #0]

            if (incoming_byte == message_terminator) {
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <USART1_EXTI25_IRQHandler+0xec>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	429a      	cmp	r2, r3
 800088a:	d11b      	bne.n	80008c4 <USART1_EXTI25_IRQHandler+0x88>
                finished_transmission(kernel_buffer[active_kernel], kernel_index);
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <USART1_EXTI25_IRQHandler+0xe4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	2364      	movs	r3, #100	@ 0x64
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <USART1_EXTI25_IRQHandler+0xe8>)
 800089a:	4413      	add	r3, r2
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fd68 	bl	8000378 <finished_transmission>
                active_kernel ^= 1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <USART1_EXTI25_IRQHandler+0xe4>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f083 0301 	eor.w	r3, r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <USART1_EXTI25_IRQHandler+0xe4>)
 80008b4:	701a      	strb	r2, [r3, #0]
                kernel_index = 0;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e002      	b.n	80008c4 <USART1_EXTI25_IRQHandler+0x88>
            }
        } else {
            kernel_index = 0;  // buffer overflow handling
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <USART1_EXTI25_IRQHandler+0xe0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((USART1->ISR & USART_ISR_TXE) && is_transmitting) {
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01e      	beq.n	800090e <USART1_EXTI25_IRQHandler+0xd2>
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <USART1_EXTI25_IRQHandler+0xf0>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01a      	beq.n	800090e <USART1_EXTI25_IRQHandler+0xd2>
        if (transmit_index < transmit_length) {
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <USART1_EXTI25_IRQHandler+0xf4>)
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <USART1_EXTI25_IRQHandler+0xf8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d20b      	bcs.n	80008fc <USART1_EXTI25_IRQHandler+0xc0>
            USART1->TDR = transmit_buffer[transmit_index++];
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <USART1_EXTI25_IRQHandler+0xf4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	b2d1      	uxtb	r1, r2
 80008ec:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <USART1_EXTI25_IRQHandler+0xf4>)
 80008ee:	7011      	strb	r1, [r2, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <USART1_EXTI25_IRQHandler+0xfc>)
 80008f4:	5c9a      	ldrb	r2, [r3, r2]
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 80008f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
            is_transmitting = 0;
        }
    }
}
 80008fa:	e008      	b.n	800090e <USART1_EXTI25_IRQHandler+0xd2>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a05      	ldr	r2, [pc, #20]	@ (8000918 <USART1_EXTI25_IRQHandler+0xdc>)
 8000902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000906:	6013      	str	r3, [r2, #0]
            is_transmitting = 0;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <USART1_EXTI25_IRQHandler+0xf0>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40013800 	.word	0x40013800
 800091c:	20000175 	.word	0x20000175
 8000920:	20000174 	.word	0x20000174
 8000924:	200000ac 	.word	0x200000ac
 8000928:	2000002c 	.word	0x2000002c
 800092c:	200001de 	.word	0x200001de
 8000930:	200001dc 	.word	0x200001dc
 8000934:	200001dd 	.word	0x200001dd
 8000938:	20000178 	.word	0x20000178

0800093c <main>:
#include "interrupt.h"
#include "commands.h"


int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    enable_clocks();
 8000940:	f7ff fe76 	bl	8000630 <enable_clocks>
    initialise_board();
 8000944:	f7ff fe84 	bl	8000650 <initialise_board>
    SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000948:	2200      	movs	r2, #0
 800094a:	4904      	ldr	r1, [pc, #16]	@ (800095c <main+0x20>)
 800094c:	2004      	movs	r0, #4
 800094e:	f7ff fef5 	bl	800073c <SerialInitialise>
    enable_interrupt();
 8000952:	f7ff fe8f 	bl	8000674 <enable_interrupt>

    for (;;);
 8000956:	bf00      	nop
 8000958:	e7fd      	b.n	8000956 <main+0x1a>
 800095a:	bf00      	nop
 800095c:	20000004 	.word	0x20000004

08000960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	return 1;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_kill>:

int _kill(int pid, int sig)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800097a:	f000 fb15 	bl	8000fa8 <__errno>
 800097e:	4603      	mov	r3, r0
 8000980:	2216      	movs	r2, #22
 8000982:	601a      	str	r2, [r3, #0]
	return -1;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_exit>:

void _exit (int status)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ffe7 	bl	8000970 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009a2:	bf00      	nop
 80009a4:	e7fd      	b.n	80009a2 <_exit+0x12>

080009a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e00a      	b.n	80009ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b8:	f3af 8000 	nop.w
 80009bc:	4601      	mov	r1, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	60ba      	str	r2, [r7, #8]
 80009c4:	b2ca      	uxtb	r2, r1
 80009c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3301      	adds	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dbf0      	blt.n	80009b8 <_read+0x12>
	}

return len;
 80009d6:	687b      	ldr	r3, [r7, #4]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e009      	b.n	8000a06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbf1      	blt.n	80009f2 <_write+0x12>
	}
	return len;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_close>:

int _close(int file)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	return -1;
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a40:	605a      	str	r2, [r3, #4]
	return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_isatty>:

int _isatty(int file)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	return 1;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
	return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f000 fa7a 	bl	8000fa8 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000a000 	.word	0x2000a000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	200001e0 	.word	0x200001e0
 8000ae8:	20000330 	.word	0x20000330

08000aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	@ (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b1a:	f000 fa4b 	bl	8000fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff ff0d 	bl	800093c <main>

08000b22 <LoopForever>:

LoopForever:
  b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   r0, =_estack
 8000b24:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000b30:	08001e78 	.word	0x08001e78
  ldr r2, =_sbss
 8000b34:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000b38:	20000330 	.word	0x20000330

08000b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_2_IRQHandler>
	...

08000b40 <_strtol_l.isra.0>:
 8000b40:	2b24      	cmp	r3, #36	@ 0x24
 8000b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b46:	4686      	mov	lr, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	d801      	bhi.n	8000b50 <_strtol_l.isra.0+0x10>
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d106      	bne.n	8000b5e <_strtol_l.isra.0+0x1e>
 8000b50:	f000 fa2a 	bl	8000fa8 <__errno>
 8000b54:	2316      	movs	r3, #22
 8000b56:	6003      	str	r3, [r0, #0]
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	4834      	ldr	r0, [pc, #208]	@ (8000c30 <_strtol_l.isra.0+0xf0>)
 8000b60:	460d      	mov	r5, r1
 8000b62:	462a      	mov	r2, r5
 8000b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000b68:	5d06      	ldrb	r6, [r0, r4]
 8000b6a:	f016 0608 	ands.w	r6, r6, #8
 8000b6e:	d1f8      	bne.n	8000b62 <_strtol_l.isra.0+0x22>
 8000b70:	2c2d      	cmp	r4, #45	@ 0x2d
 8000b72:	d110      	bne.n	8000b96 <_strtol_l.isra.0+0x56>
 8000b74:	782c      	ldrb	r4, [r5, #0]
 8000b76:	2601      	movs	r6, #1
 8000b78:	1c95      	adds	r5, r2, #2
 8000b7a:	f033 0210 	bics.w	r2, r3, #16
 8000b7e:	d115      	bne.n	8000bac <_strtol_l.isra.0+0x6c>
 8000b80:	2c30      	cmp	r4, #48	@ 0x30
 8000b82:	d10d      	bne.n	8000ba0 <_strtol_l.isra.0+0x60>
 8000b84:	782a      	ldrb	r2, [r5, #0]
 8000b86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000b8a:	2a58      	cmp	r2, #88	@ 0x58
 8000b8c:	d108      	bne.n	8000ba0 <_strtol_l.isra.0+0x60>
 8000b8e:	786c      	ldrb	r4, [r5, #1]
 8000b90:	3502      	adds	r5, #2
 8000b92:	2310      	movs	r3, #16
 8000b94:	e00a      	b.n	8000bac <_strtol_l.isra.0+0x6c>
 8000b96:	2c2b      	cmp	r4, #43	@ 0x2b
 8000b98:	bf04      	itt	eq
 8000b9a:	782c      	ldrbeq	r4, [r5, #0]
 8000b9c:	1c95      	addeq	r5, r2, #2
 8000b9e:	e7ec      	b.n	8000b7a <_strtol_l.isra.0+0x3a>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f6      	bne.n	8000b92 <_strtol_l.isra.0+0x52>
 8000ba4:	2c30      	cmp	r4, #48	@ 0x30
 8000ba6:	bf14      	ite	ne
 8000ba8:	230a      	movne	r3, #10
 8000baa:	2308      	moveq	r3, #8
 8000bac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000bb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	fbbc f9f3 	udiv	r9, ip, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8000bc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000bc4:	2f09      	cmp	r7, #9
 8000bc6:	d80f      	bhi.n	8000be8 <_strtol_l.isra.0+0xa8>
 8000bc8:	463c      	mov	r4, r7
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	dd1b      	ble.n	8000c06 <_strtol_l.isra.0+0xc6>
 8000bce:	1c57      	adds	r7, r2, #1
 8000bd0:	d007      	beq.n	8000be2 <_strtol_l.isra.0+0xa2>
 8000bd2:	4581      	cmp	r9, r0
 8000bd4:	d314      	bcc.n	8000c00 <_strtol_l.isra.0+0xc0>
 8000bd6:	d101      	bne.n	8000bdc <_strtol_l.isra.0+0x9c>
 8000bd8:	45a2      	cmp	sl, r4
 8000bda:	db11      	blt.n	8000c00 <_strtol_l.isra.0+0xc0>
 8000bdc:	fb00 4003 	mla	r0, r0, r3, r4
 8000be0:	2201      	movs	r2, #1
 8000be2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000be6:	e7eb      	b.n	8000bc0 <_strtol_l.isra.0+0x80>
 8000be8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000bec:	2f19      	cmp	r7, #25
 8000bee:	d801      	bhi.n	8000bf4 <_strtol_l.isra.0+0xb4>
 8000bf0:	3c37      	subs	r4, #55	@ 0x37
 8000bf2:	e7ea      	b.n	8000bca <_strtol_l.isra.0+0x8a>
 8000bf4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000bf8:	2f19      	cmp	r7, #25
 8000bfa:	d804      	bhi.n	8000c06 <_strtol_l.isra.0+0xc6>
 8000bfc:	3c57      	subs	r4, #87	@ 0x57
 8000bfe:	e7e4      	b.n	8000bca <_strtol_l.isra.0+0x8a>
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	e7ed      	b.n	8000be2 <_strtol_l.isra.0+0xa2>
 8000c06:	1c53      	adds	r3, r2, #1
 8000c08:	d108      	bne.n	8000c1c <_strtol_l.isra.0+0xdc>
 8000c0a:	2322      	movs	r3, #34	@ 0x22
 8000c0c:	f8ce 3000 	str.w	r3, [lr]
 8000c10:	4660      	mov	r0, ip
 8000c12:	f1b8 0f00 	cmp.w	r8, #0
 8000c16:	d0a0      	beq.n	8000b5a <_strtol_l.isra.0+0x1a>
 8000c18:	1e69      	subs	r1, r5, #1
 8000c1a:	e006      	b.n	8000c2a <_strtol_l.isra.0+0xea>
 8000c1c:	b106      	cbz	r6, 8000c20 <_strtol_l.isra.0+0xe0>
 8000c1e:	4240      	negs	r0, r0
 8000c20:	f1b8 0f00 	cmp.w	r8, #0
 8000c24:	d099      	beq.n	8000b5a <_strtol_l.isra.0+0x1a>
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d1f6      	bne.n	8000c18 <_strtol_l.isra.0+0xd8>
 8000c2a:	f8c8 1000 	str.w	r1, [r8]
 8000c2e:	e794      	b.n	8000b5a <_strtol_l.isra.0+0x1a>
 8000c30:	08001c87 	.word	0x08001c87

08000c34 <strtol>:
 8000c34:	4613      	mov	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	4601      	mov	r1, r0
 8000c3a:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <strtol+0x10>)
 8000c3c:	6800      	ldr	r0, [r0, #0]
 8000c3e:	f7ff bf7f 	b.w	8000b40 <_strtol_l.isra.0>
 8000c42:	bf00      	nop
 8000c44:	2000003c 	.word	0x2000003c

08000c48 <std>:
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c56:	6083      	str	r3, [r0, #8]
 8000c58:	8181      	strh	r1, [r0, #12]
 8000c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000c5c:	81c2      	strh	r2, [r0, #14]
 8000c5e:	6183      	str	r3, [r0, #24]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2208      	movs	r2, #8
 8000c64:	305c      	adds	r0, #92	@ 0x5c
 8000c66:	f000 f8f4 	bl	8000e52 <memset>
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <std+0x58>)
 8000c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <std+0x5c>)
 8000c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <std+0x60>)
 8000c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <std+0x64>)
 8000c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <std+0x68>)
 8000c7c:	6224      	str	r4, [r4, #32]
 8000c7e:	429c      	cmp	r4, r3
 8000c80:	d006      	beq.n	8000c90 <std+0x48>
 8000c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c86:	4294      	cmp	r4, r2
 8000c88:	d002      	beq.n	8000c90 <std+0x48>
 8000c8a:	33d0      	adds	r3, #208	@ 0xd0
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	d105      	bne.n	8000c9c <std+0x54>
 8000c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c98:	f000 b9b0 	b.w	8000ffc <__retarget_lock_init_recursive>
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08000dcd 	.word	0x08000dcd
 8000ca4:	08000def 	.word	0x08000def
 8000ca8:	08000e27 	.word	0x08000e27
 8000cac:	08000e4b 	.word	0x08000e4b
 8000cb0:	200001e4 	.word	0x200001e4

08000cb4 <stdio_exit_handler>:
 8000cb4:	4a02      	ldr	r2, [pc, #8]	@ (8000cc0 <stdio_exit_handler+0xc>)
 8000cb6:	4903      	ldr	r1, [pc, #12]	@ (8000cc4 <stdio_exit_handler+0x10>)
 8000cb8:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <stdio_exit_handler+0x14>)
 8000cba:	f000 b869 	b.w	8000d90 <_fwalk_sglue>
 8000cbe:	bf00      	nop
 8000cc0:	20000030 	.word	0x20000030
 8000cc4:	08001359 	.word	0x08001359
 8000cc8:	20000040 	.word	0x20000040

08000ccc <cleanup_stdio>:
 8000ccc:	6841      	ldr	r1, [r0, #4]
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <cleanup_stdio+0x34>)
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	b510      	push	{r4, lr}
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	d001      	beq.n	8000cdc <cleanup_stdio+0x10>
 8000cd8:	f000 fb3e 	bl	8001358 <_fflush_r>
 8000cdc:	68a1      	ldr	r1, [r4, #8]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <cleanup_stdio+0x38>)
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d002      	beq.n	8000cea <cleanup_stdio+0x1e>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f000 fb37 	bl	8001358 <_fflush_r>
 8000cea:	68e1      	ldr	r1, [r4, #12]
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <cleanup_stdio+0x3c>)
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d004      	beq.n	8000cfc <cleanup_stdio+0x30>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cf8:	f000 bb2e 	b.w	8001358 <_fflush_r>
 8000cfc:	bd10      	pop	{r4, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001e4 	.word	0x200001e4
 8000d04:	2000024c 	.word	0x2000024c
 8000d08:	200002b4 	.word	0x200002b4

08000d0c <global_stdio_init.part.0>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <global_stdio_init.part.0+0x30>)
 8000d10:	4c0b      	ldr	r4, [pc, #44]	@ (8000d40 <global_stdio_init.part.0+0x34>)
 8000d12:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <global_stdio_init.part.0+0x38>)
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	4620      	mov	r0, r4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	f7ff ff94 	bl	8000c48 <std>
 8000d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d24:	2201      	movs	r2, #1
 8000d26:	2109      	movs	r1, #9
 8000d28:	f7ff ff8e 	bl	8000c48 <std>
 8000d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d30:	2202      	movs	r2, #2
 8000d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d36:	2112      	movs	r1, #18
 8000d38:	f7ff bf86 	b.w	8000c48 <std>
 8000d3c:	2000031c 	.word	0x2000031c
 8000d40:	200001e4 	.word	0x200001e4
 8000d44:	08000cb5 	.word	0x08000cb5

08000d48 <__sfp_lock_acquire>:
 8000d48:	4801      	ldr	r0, [pc, #4]	@ (8000d50 <__sfp_lock_acquire+0x8>)
 8000d4a:	f000 b958 	b.w	8000ffe <__retarget_lock_acquire_recursive>
 8000d4e:	bf00      	nop
 8000d50:	20000325 	.word	0x20000325

08000d54 <__sfp_lock_release>:
 8000d54:	4801      	ldr	r0, [pc, #4]	@ (8000d5c <__sfp_lock_release+0x8>)
 8000d56:	f000 b953 	b.w	8001000 <__retarget_lock_release_recursive>
 8000d5a:	bf00      	nop
 8000d5c:	20000325 	.word	0x20000325

08000d60 <__sinit>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
 8000d64:	f7ff fff0 	bl	8000d48 <__sfp_lock_acquire>
 8000d68:	6a23      	ldr	r3, [r4, #32]
 8000d6a:	b11b      	cbz	r3, 8000d74 <__sinit+0x14>
 8000d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d70:	f7ff bff0 	b.w	8000d54 <__sfp_lock_release>
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__sinit+0x28>)
 8000d76:	6223      	str	r3, [r4, #32]
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__sinit+0x2c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f5      	bne.n	8000d6c <__sinit+0xc>
 8000d80:	f7ff ffc4 	bl	8000d0c <global_stdio_init.part.0>
 8000d84:	e7f2      	b.n	8000d6c <__sinit+0xc>
 8000d86:	bf00      	nop
 8000d88:	08000ccd 	.word	0x08000ccd
 8000d8c:	2000031c 	.word	0x2000031c

08000d90 <_fwalk_sglue>:
 8000d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d94:	4607      	mov	r7, r0
 8000d96:	4688      	mov	r8, r1
 8000d98:	4614      	mov	r4, r2
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000da0:	f1b9 0901 	subs.w	r9, r9, #1
 8000da4:	d505      	bpl.n	8000db2 <_fwalk_sglue+0x22>
 8000da6:	6824      	ldr	r4, [r4, #0]
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d1f7      	bne.n	8000d9c <_fwalk_sglue+0xc>
 8000dac:	4630      	mov	r0, r6
 8000dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000db2:	89ab      	ldrh	r3, [r5, #12]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d907      	bls.n	8000dc8 <_fwalk_sglue+0x38>
 8000db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	d003      	beq.n	8000dc8 <_fwalk_sglue+0x38>
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	47c0      	blx	r8
 8000dc6:	4306      	orrs	r6, r0
 8000dc8:	3568      	adds	r5, #104	@ 0x68
 8000dca:	e7e9      	b.n	8000da0 <_fwalk_sglue+0x10>

08000dcc <__sread>:
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	460c      	mov	r4, r1
 8000dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd4:	f000 f8c4 	bl	8000f60 <_read_r>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	bfab      	itete	ge
 8000ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000dde:	89a3      	ldrhlt	r3, [r4, #12]
 8000de0:	181b      	addge	r3, r3, r0
 8000de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000de6:	bfac      	ite	ge
 8000de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dea:	81a3      	strhlt	r3, [r4, #12]
 8000dec:	bd10      	pop	{r4, pc}

08000dee <__swrite>:
 8000dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df2:	461f      	mov	r7, r3
 8000df4:	898b      	ldrh	r3, [r1, #12]
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	4605      	mov	r5, r0
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	4616      	mov	r6, r2
 8000dfe:	d505      	bpl.n	8000e0c <__swrite+0x1e>
 8000e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e04:	2302      	movs	r3, #2
 8000e06:	2200      	movs	r2, #0
 8000e08:	f000 f898 	bl	8000f3c <_lseek_r>
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e16:	81a3      	strh	r3, [r4, #12]
 8000e18:	4632      	mov	r2, r6
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e22:	f000 b8af 	b.w	8000f84 <_write_r>

08000e26 <__sseek>:
 8000e26:	b510      	push	{r4, lr}
 8000e28:	460c      	mov	r4, r1
 8000e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e2e:	f000 f885 	bl	8000f3c <_lseek_r>
 8000e32:	1c43      	adds	r3, r0, #1
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	bf15      	itete	ne
 8000e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e42:	81a3      	strheq	r3, [r4, #12]
 8000e44:	bf18      	it	ne
 8000e46:	81a3      	strhne	r3, [r4, #12]
 8000e48:	bd10      	pop	{r4, pc}

08000e4a <__sclose>:
 8000e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e4e:	f000 b865 	b.w	8000f1c <_close_r>

08000e52 <memset>:
 8000e52:	4402      	add	r2, r0
 8000e54:	4603      	mov	r3, r0
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d100      	bne.n	8000e5c <memset+0xa>
 8000e5a:	4770      	bx	lr
 8000e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8000e60:	e7f9      	b.n	8000e56 <memset+0x4>
	...

08000e64 <strtok>:
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <strtok+0x5c>)
 8000e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6a:	681f      	ldr	r7, [r3, #0]
 8000e6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8000e6e:	4605      	mov	r5, r0
 8000e70:	460e      	mov	r6, r1
 8000e72:	b9ec      	cbnz	r4, 8000eb0 <strtok+0x4c>
 8000e74:	2050      	movs	r0, #80	@ 0x50
 8000e76:	f000 f935 	bl	80010e4 <malloc>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e7e:	b920      	cbnz	r0, 8000e8a <strtok+0x26>
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <strtok+0x60>)
 8000e82:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <strtok+0x64>)
 8000e84:	215b      	movs	r1, #91	@ 0x5b
 8000e86:	f000 f8c5 	bl	8001014 <__assert_func>
 8000e8a:	e9c0 4400 	strd	r4, r4, [r0]
 8000e8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000e92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000e96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8000e9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8000e9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8000ea2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8000ea6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8000eaa:	6184      	str	r4, [r0, #24]
 8000eac:	7704      	strb	r4, [r0, #28]
 8000eae:	6244      	str	r4, [r0, #36]	@ 0x24
 8000eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	f000 b806 	b.w	8000ecc <__strtok_r>
 8000ec0:	2000003c 	.word	0x2000003c
 8000ec4:	08001d87 	.word	0x08001d87
 8000ec8:	08001d9e 	.word	0x08001d9e

08000ecc <__strtok_r>:
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	4604      	mov	r4, r0
 8000ed0:	b908      	cbnz	r0, 8000ed6 <__strtok_r+0xa>
 8000ed2:	6814      	ldr	r4, [r2, #0]
 8000ed4:	b144      	cbz	r4, 8000ee8 <__strtok_r+0x1c>
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000edc:	460f      	mov	r7, r1
 8000ede:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000ee2:	b91e      	cbnz	r6, 8000eec <__strtok_r+0x20>
 8000ee4:	b965      	cbnz	r5, 8000f00 <__strtok_r+0x34>
 8000ee6:	6015      	str	r5, [r2, #0]
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e005      	b.n	8000ef8 <__strtok_r+0x2c>
 8000eec:	42b5      	cmp	r5, r6
 8000eee:	d1f6      	bne.n	8000ede <__strtok_r+0x12>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <__strtok_r+0xa>
 8000ef4:	6014      	str	r4, [r2, #0]
 8000ef6:	7003      	strb	r3, [r0, #0]
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	461c      	mov	r4, r3
 8000efc:	e00c      	b.n	8000f18 <__strtok_r+0x4c>
 8000efe:	b91d      	cbnz	r5, 8000f08 <__strtok_r+0x3c>
 8000f00:	4627      	mov	r7, r4
 8000f02:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000f06:	460e      	mov	r6, r1
 8000f08:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000f0c:	42ab      	cmp	r3, r5
 8000f0e:	d1f6      	bne.n	8000efe <__strtok_r+0x32>
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f2      	beq.n	8000efa <__strtok_r+0x2e>
 8000f14:	2300      	movs	r3, #0
 8000f16:	703b      	strb	r3, [r7, #0]
 8000f18:	6014      	str	r4, [r2, #0]
 8000f1a:	e7ed      	b.n	8000ef8 <__strtok_r+0x2c>

08000f1c <_close_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d06      	ldr	r5, [pc, #24]	@ (8000f38 <_close_r+0x1c>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	602b      	str	r3, [r5, #0]
 8000f28:	f7ff fd76 	bl	8000a18 <_close>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d102      	bne.n	8000f36 <_close_r+0x1a>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	b103      	cbz	r3, 8000f36 <_close_r+0x1a>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	20000320 	.word	0x20000320

08000f3c <_lseek_r>:
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	4d07      	ldr	r5, [pc, #28]	@ (8000f5c <_lseek_r+0x20>)
 8000f40:	4604      	mov	r4, r0
 8000f42:	4608      	mov	r0, r1
 8000f44:	4611      	mov	r1, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	602a      	str	r2, [r5, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f7ff fd8b 	bl	8000a66 <_lseek>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_lseek_r+0x1e>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_lseek_r+0x1e>
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	20000320 	.word	0x20000320

08000f60 <_read_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4d07      	ldr	r5, [pc, #28]	@ (8000f80 <_read_r+0x20>)
 8000f64:	4604      	mov	r4, r0
 8000f66:	4608      	mov	r0, r1
 8000f68:	4611      	mov	r1, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	602a      	str	r2, [r5, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f7ff fd19 	bl	80009a6 <_read>
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	d102      	bne.n	8000f7e <_read_r+0x1e>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	b103      	cbz	r3, 8000f7e <_read_r+0x1e>
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	20000320 	.word	0x20000320

08000f84 <_write_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4d07      	ldr	r5, [pc, #28]	@ (8000fa4 <_write_r+0x20>)
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	2200      	movs	r2, #0
 8000f90:	602a      	str	r2, [r5, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	f7ff fd24 	bl	80009e0 <_write>
 8000f98:	1c43      	adds	r3, r0, #1
 8000f9a:	d102      	bne.n	8000fa2 <_write_r+0x1e>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	b103      	cbz	r3, 8000fa2 <_write_r+0x1e>
 8000fa0:	6023      	str	r3, [r4, #0]
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	20000320 	.word	0x20000320

08000fa8 <__errno>:
 8000fa8:	4b01      	ldr	r3, [pc, #4]	@ (8000fb0 <__errno+0x8>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000003c 	.word	0x2000003c

08000fb4 <__libc_init_array>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8000fec <__libc_init_array+0x38>)
 8000fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8000ff0 <__libc_init_array+0x3c>)
 8000fba:	1b64      	subs	r4, r4, r5
 8000fbc:	10a4      	asrs	r4, r4, #2
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	42a6      	cmp	r6, r4
 8000fc2:	d109      	bne.n	8000fd8 <__libc_init_array+0x24>
 8000fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8000ff4 <__libc_init_array+0x40>)
 8000fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8000ff8 <__libc_init_array+0x44>)
 8000fc8:	f000 fe40 	bl	8001c4c <_init>
 8000fcc:	1b64      	subs	r4, r4, r5
 8000fce:	10a4      	asrs	r4, r4, #2
 8000fd0:	2600      	movs	r6, #0
 8000fd2:	42a6      	cmp	r6, r4
 8000fd4:	d105      	bne.n	8000fe2 <__libc_init_array+0x2e>
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fdc:	4798      	blx	r3
 8000fde:	3601      	adds	r6, #1
 8000fe0:	e7ee      	b.n	8000fc0 <__libc_init_array+0xc>
 8000fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe6:	4798      	blx	r3
 8000fe8:	3601      	adds	r6, #1
 8000fea:	e7f2      	b.n	8000fd2 <__libc_init_array+0x1e>
 8000fec:	08001e70 	.word	0x08001e70
 8000ff0:	08001e70 	.word	0x08001e70
 8000ff4:	08001e70 	.word	0x08001e70
 8000ff8:	08001e74 	.word	0x08001e74

08000ffc <__retarget_lock_init_recursive>:
 8000ffc:	4770      	bx	lr

08000ffe <__retarget_lock_acquire_recursive>:
 8000ffe:	4770      	bx	lr

08001000 <__retarget_lock_release_recursive>:
 8001000:	4770      	bx	lr

08001002 <strcpy>:
 8001002:	4603      	mov	r3, r0
 8001004:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001008:	f803 2b01 	strb.w	r2, [r3], #1
 800100c:	2a00      	cmp	r2, #0
 800100e:	d1f9      	bne.n	8001004 <strcpy+0x2>
 8001010:	4770      	bx	lr
	...

08001014 <__assert_func>:
 8001014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001016:	4614      	mov	r4, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <__assert_func+0x2c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4605      	mov	r5, r0
 8001020:	68d8      	ldr	r0, [r3, #12]
 8001022:	b14c      	cbz	r4, 8001038 <__assert_func+0x24>
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <__assert_func+0x30>)
 8001026:	9100      	str	r1, [sp, #0]
 8001028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800102c:	4906      	ldr	r1, [pc, #24]	@ (8001048 <__assert_func+0x34>)
 800102e:	462b      	mov	r3, r5
 8001030:	f000 f9ba 	bl	80013a8 <fiprintf>
 8001034:	f000 f9da 	bl	80013ec <abort>
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <__assert_func+0x38>)
 800103a:	461c      	mov	r4, r3
 800103c:	e7f3      	b.n	8001026 <__assert_func+0x12>
 800103e:	bf00      	nop
 8001040:	2000003c 	.word	0x2000003c
 8001044:	08001df8 	.word	0x08001df8
 8001048:	08001e05 	.word	0x08001e05
 800104c:	08001e33 	.word	0x08001e33

08001050 <_free_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4605      	mov	r5, r0
 8001054:	2900      	cmp	r1, #0
 8001056:	d041      	beq.n	80010dc <_free_r+0x8c>
 8001058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800105c:	1f0c      	subs	r4, r1, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	bfb8      	it	lt
 8001062:	18e4      	addlt	r4, r4, r3
 8001064:	f000 f8e8 	bl	8001238 <__malloc_lock>
 8001068:	4a1d      	ldr	r2, [pc, #116]	@ (80010e0 <_free_r+0x90>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	b933      	cbnz	r3, 800107c <_free_r+0x2c>
 800106e:	6063      	str	r3, [r4, #4]
 8001070:	6014      	str	r4, [r2, #0]
 8001072:	4628      	mov	r0, r5
 8001074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001078:	f000 b8e4 	b.w	8001244 <__malloc_unlock>
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <_free_r+0x42>
 8001080:	6820      	ldr	r0, [r4, #0]
 8001082:	1821      	adds	r1, r4, r0
 8001084:	428b      	cmp	r3, r1
 8001086:	bf01      	itttt	eq
 8001088:	6819      	ldreq	r1, [r3, #0]
 800108a:	685b      	ldreq	r3, [r3, #4]
 800108c:	1809      	addeq	r1, r1, r0
 800108e:	6021      	streq	r1, [r4, #0]
 8001090:	e7ed      	b.n	800106e <_free_r+0x1e>
 8001092:	461a      	mov	r2, r3
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	b10b      	cbz	r3, 800109c <_free_r+0x4c>
 8001098:	42a3      	cmp	r3, r4
 800109a:	d9fa      	bls.n	8001092 <_free_r+0x42>
 800109c:	6811      	ldr	r1, [r2, #0]
 800109e:	1850      	adds	r0, r2, r1
 80010a0:	42a0      	cmp	r0, r4
 80010a2:	d10b      	bne.n	80010bc <_free_r+0x6c>
 80010a4:	6820      	ldr	r0, [r4, #0]
 80010a6:	4401      	add	r1, r0
 80010a8:	1850      	adds	r0, r2, r1
 80010aa:	4283      	cmp	r3, r0
 80010ac:	6011      	str	r1, [r2, #0]
 80010ae:	d1e0      	bne.n	8001072 <_free_r+0x22>
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	6053      	str	r3, [r2, #4]
 80010b6:	4408      	add	r0, r1
 80010b8:	6010      	str	r0, [r2, #0]
 80010ba:	e7da      	b.n	8001072 <_free_r+0x22>
 80010bc:	d902      	bls.n	80010c4 <_free_r+0x74>
 80010be:	230c      	movs	r3, #12
 80010c0:	602b      	str	r3, [r5, #0]
 80010c2:	e7d6      	b.n	8001072 <_free_r+0x22>
 80010c4:	6820      	ldr	r0, [r4, #0]
 80010c6:	1821      	adds	r1, r4, r0
 80010c8:	428b      	cmp	r3, r1
 80010ca:	bf04      	itt	eq
 80010cc:	6819      	ldreq	r1, [r3, #0]
 80010ce:	685b      	ldreq	r3, [r3, #4]
 80010d0:	6063      	str	r3, [r4, #4]
 80010d2:	bf04      	itt	eq
 80010d4:	1809      	addeq	r1, r1, r0
 80010d6:	6021      	streq	r1, [r4, #0]
 80010d8:	6054      	str	r4, [r2, #4]
 80010da:	e7ca      	b.n	8001072 <_free_r+0x22>
 80010dc:	bd38      	pop	{r3, r4, r5, pc}
 80010de:	bf00      	nop
 80010e0:	2000032c 	.word	0x2000032c

080010e4 <malloc>:
 80010e4:	4b02      	ldr	r3, [pc, #8]	@ (80010f0 <malloc+0xc>)
 80010e6:	4601      	mov	r1, r0
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f000 b825 	b.w	8001138 <_malloc_r>
 80010ee:	bf00      	nop
 80010f0:	2000003c 	.word	0x2000003c

080010f4 <sbrk_aligned>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	4e0f      	ldr	r6, [pc, #60]	@ (8001134 <sbrk_aligned+0x40>)
 80010f8:	460c      	mov	r4, r1
 80010fa:	6831      	ldr	r1, [r6, #0]
 80010fc:	4605      	mov	r5, r0
 80010fe:	b911      	cbnz	r1, 8001106 <sbrk_aligned+0x12>
 8001100:	f000 f964 	bl	80013cc <_sbrk_r>
 8001104:	6030      	str	r0, [r6, #0]
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f95f 	bl	80013cc <_sbrk_r>
 800110e:	1c43      	adds	r3, r0, #1
 8001110:	d103      	bne.n	800111a <sbrk_aligned+0x26>
 8001112:	f04f 34ff 	mov.w	r4, #4294967295
 8001116:	4620      	mov	r0, r4
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	1cc4      	adds	r4, r0, #3
 800111c:	f024 0403 	bic.w	r4, r4, #3
 8001120:	42a0      	cmp	r0, r4
 8001122:	d0f8      	beq.n	8001116 <sbrk_aligned+0x22>
 8001124:	1a21      	subs	r1, r4, r0
 8001126:	4628      	mov	r0, r5
 8001128:	f000 f950 	bl	80013cc <_sbrk_r>
 800112c:	3001      	adds	r0, #1
 800112e:	d1f2      	bne.n	8001116 <sbrk_aligned+0x22>
 8001130:	e7ef      	b.n	8001112 <sbrk_aligned+0x1e>
 8001132:	bf00      	nop
 8001134:	20000328 	.word	0x20000328

08001138 <_malloc_r>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	1ccd      	adds	r5, r1, #3
 800113e:	f025 0503 	bic.w	r5, r5, #3
 8001142:	3508      	adds	r5, #8
 8001144:	2d0c      	cmp	r5, #12
 8001146:	bf38      	it	cc
 8001148:	250c      	movcc	r5, #12
 800114a:	2d00      	cmp	r5, #0
 800114c:	4606      	mov	r6, r0
 800114e:	db01      	blt.n	8001154 <_malloc_r+0x1c>
 8001150:	42a9      	cmp	r1, r5
 8001152:	d904      	bls.n	800115e <_malloc_r+0x26>
 8001154:	230c      	movs	r3, #12
 8001156:	6033      	str	r3, [r6, #0]
 8001158:	2000      	movs	r0, #0
 800115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800115e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001234 <_malloc_r+0xfc>
 8001162:	f000 f869 	bl	8001238 <__malloc_lock>
 8001166:	f8d8 3000 	ldr.w	r3, [r8]
 800116a:	461c      	mov	r4, r3
 800116c:	bb44      	cbnz	r4, 80011c0 <_malloc_r+0x88>
 800116e:	4629      	mov	r1, r5
 8001170:	4630      	mov	r0, r6
 8001172:	f7ff ffbf 	bl	80010f4 <sbrk_aligned>
 8001176:	1c43      	adds	r3, r0, #1
 8001178:	4604      	mov	r4, r0
 800117a:	d158      	bne.n	800122e <_malloc_r+0xf6>
 800117c:	f8d8 4000 	ldr.w	r4, [r8]
 8001180:	4627      	mov	r7, r4
 8001182:	2f00      	cmp	r7, #0
 8001184:	d143      	bne.n	800120e <_malloc_r+0xd6>
 8001186:	2c00      	cmp	r4, #0
 8001188:	d04b      	beq.n	8001222 <_malloc_r+0xea>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	4639      	mov	r1, r7
 800118e:	4630      	mov	r0, r6
 8001190:	eb04 0903 	add.w	r9, r4, r3
 8001194:	f000 f91a 	bl	80013cc <_sbrk_r>
 8001198:	4581      	cmp	r9, r0
 800119a:	d142      	bne.n	8001222 <_malloc_r+0xea>
 800119c:	6821      	ldr	r1, [r4, #0]
 800119e:	1a6d      	subs	r5, r5, r1
 80011a0:	4629      	mov	r1, r5
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff ffa6 	bl	80010f4 <sbrk_aligned>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d03a      	beq.n	8001222 <_malloc_r+0xea>
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	442b      	add	r3, r5
 80011b0:	6023      	str	r3, [r4, #0]
 80011b2:	f8d8 3000 	ldr.w	r3, [r8]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	bb62      	cbnz	r2, 8001214 <_malloc_r+0xdc>
 80011ba:	f8c8 7000 	str.w	r7, [r8]
 80011be:	e00f      	b.n	80011e0 <_malloc_r+0xa8>
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	1b52      	subs	r2, r2, r5
 80011c4:	d420      	bmi.n	8001208 <_malloc_r+0xd0>
 80011c6:	2a0b      	cmp	r2, #11
 80011c8:	d917      	bls.n	80011fa <_malloc_r+0xc2>
 80011ca:	1961      	adds	r1, r4, r5
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	6025      	str	r5, [r4, #0]
 80011d0:	bf18      	it	ne
 80011d2:	6059      	strne	r1, [r3, #4]
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	bf08      	it	eq
 80011d8:	f8c8 1000 	streq.w	r1, [r8]
 80011dc:	5162      	str	r2, [r4, r5]
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	4630      	mov	r0, r6
 80011e2:	f000 f82f 	bl	8001244 <__malloc_unlock>
 80011e6:	f104 000b 	add.w	r0, r4, #11
 80011ea:	1d23      	adds	r3, r4, #4
 80011ec:	f020 0007 	bic.w	r0, r0, #7
 80011f0:	1ac2      	subs	r2, r0, r3
 80011f2:	bf1c      	itt	ne
 80011f4:	1a1b      	subne	r3, r3, r0
 80011f6:	50a3      	strne	r3, [r4, r2]
 80011f8:	e7af      	b.n	800115a <_malloc_r+0x22>
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	bf0c      	ite	eq
 8001200:	f8c8 2000 	streq.w	r2, [r8]
 8001204:	605a      	strne	r2, [r3, #4]
 8001206:	e7eb      	b.n	80011e0 <_malloc_r+0xa8>
 8001208:	4623      	mov	r3, r4
 800120a:	6864      	ldr	r4, [r4, #4]
 800120c:	e7ae      	b.n	800116c <_malloc_r+0x34>
 800120e:	463c      	mov	r4, r7
 8001210:	687f      	ldr	r7, [r7, #4]
 8001212:	e7b6      	b.n	8001182 <_malloc_r+0x4a>
 8001214:	461a      	mov	r2, r3
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	42a3      	cmp	r3, r4
 800121a:	d1fb      	bne.n	8001214 <_malloc_r+0xdc>
 800121c:	2300      	movs	r3, #0
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	e7de      	b.n	80011e0 <_malloc_r+0xa8>
 8001222:	230c      	movs	r3, #12
 8001224:	6033      	str	r3, [r6, #0]
 8001226:	4630      	mov	r0, r6
 8001228:	f000 f80c 	bl	8001244 <__malloc_unlock>
 800122c:	e794      	b.n	8001158 <_malloc_r+0x20>
 800122e:	6005      	str	r5, [r0, #0]
 8001230:	e7d6      	b.n	80011e0 <_malloc_r+0xa8>
 8001232:	bf00      	nop
 8001234:	2000032c 	.word	0x2000032c

08001238 <__malloc_lock>:
 8001238:	4801      	ldr	r0, [pc, #4]	@ (8001240 <__malloc_lock+0x8>)
 800123a:	f7ff bee0 	b.w	8000ffe <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	20000324 	.word	0x20000324

08001244 <__malloc_unlock>:
 8001244:	4801      	ldr	r0, [pc, #4]	@ (800124c <__malloc_unlock+0x8>)
 8001246:	f7ff bedb 	b.w	8001000 <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	20000324 	.word	0x20000324

08001250 <__sflush_r>:
 8001250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001258:	0716      	lsls	r6, r2, #28
 800125a:	4605      	mov	r5, r0
 800125c:	460c      	mov	r4, r1
 800125e:	d454      	bmi.n	800130a <__sflush_r+0xba>
 8001260:	684b      	ldr	r3, [r1, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	dc02      	bgt.n	800126c <__sflush_r+0x1c>
 8001266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd48      	ble.n	80012fe <__sflush_r+0xae>
 800126c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800126e:	2e00      	cmp	r6, #0
 8001270:	d045      	beq.n	80012fe <__sflush_r+0xae>
 8001272:	2300      	movs	r3, #0
 8001274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001278:	682f      	ldr	r7, [r5, #0]
 800127a:	6a21      	ldr	r1, [r4, #32]
 800127c:	602b      	str	r3, [r5, #0]
 800127e:	d030      	beq.n	80012e2 <__sflush_r+0x92>
 8001280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	0759      	lsls	r1, r3, #29
 8001286:	d505      	bpl.n	8001294 <__sflush_r+0x44>
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	1ad2      	subs	r2, r2, r3
 800128c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800128e:	b10b      	cbz	r3, 8001294 <__sflush_r+0x44>
 8001290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	2300      	movs	r3, #0
 8001296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001298:	6a21      	ldr	r1, [r4, #32]
 800129a:	4628      	mov	r0, r5
 800129c:	47b0      	blx	r6
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	d106      	bne.n	80012b2 <__sflush_r+0x62>
 80012a4:	6829      	ldr	r1, [r5, #0]
 80012a6:	291d      	cmp	r1, #29
 80012a8:	d82b      	bhi.n	8001302 <__sflush_r+0xb2>
 80012aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001354 <__sflush_r+0x104>)
 80012ac:	40ca      	lsrs	r2, r1
 80012ae:	07d6      	lsls	r6, r2, #31
 80012b0:	d527      	bpl.n	8001302 <__sflush_r+0xb2>
 80012b2:	2200      	movs	r2, #0
 80012b4:	6062      	str	r2, [r4, #4]
 80012b6:	04d9      	lsls	r1, r3, #19
 80012b8:	6922      	ldr	r2, [r4, #16]
 80012ba:	6022      	str	r2, [r4, #0]
 80012bc:	d504      	bpl.n	80012c8 <__sflush_r+0x78>
 80012be:	1c42      	adds	r2, r0, #1
 80012c0:	d101      	bne.n	80012c6 <__sflush_r+0x76>
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	b903      	cbnz	r3, 80012c8 <__sflush_r+0x78>
 80012c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80012c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ca:	602f      	str	r7, [r5, #0]
 80012cc:	b1b9      	cbz	r1, 80012fe <__sflush_r+0xae>
 80012ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012d2:	4299      	cmp	r1, r3
 80012d4:	d002      	beq.n	80012dc <__sflush_r+0x8c>
 80012d6:	4628      	mov	r0, r5
 80012d8:	f7ff feba 	bl	8001050 <_free_r>
 80012dc:	2300      	movs	r3, #0
 80012de:	6363      	str	r3, [r4, #52]	@ 0x34
 80012e0:	e00d      	b.n	80012fe <__sflush_r+0xae>
 80012e2:	2301      	movs	r3, #1
 80012e4:	4628      	mov	r0, r5
 80012e6:	47b0      	blx	r6
 80012e8:	4602      	mov	r2, r0
 80012ea:	1c50      	adds	r0, r2, #1
 80012ec:	d1c9      	bne.n	8001282 <__sflush_r+0x32>
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0c6      	beq.n	8001282 <__sflush_r+0x32>
 80012f4:	2b1d      	cmp	r3, #29
 80012f6:	d001      	beq.n	80012fc <__sflush_r+0xac>
 80012f8:	2b16      	cmp	r3, #22
 80012fa:	d11e      	bne.n	800133a <__sflush_r+0xea>
 80012fc:	602f      	str	r7, [r5, #0]
 80012fe:	2000      	movs	r0, #0
 8001300:	e022      	b.n	8001348 <__sflush_r+0xf8>
 8001302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001306:	b21b      	sxth	r3, r3
 8001308:	e01b      	b.n	8001342 <__sflush_r+0xf2>
 800130a:	690f      	ldr	r7, [r1, #16]
 800130c:	2f00      	cmp	r7, #0
 800130e:	d0f6      	beq.n	80012fe <__sflush_r+0xae>
 8001310:	0793      	lsls	r3, r2, #30
 8001312:	680e      	ldr	r6, [r1, #0]
 8001314:	bf08      	it	eq
 8001316:	694b      	ldreq	r3, [r1, #20]
 8001318:	600f      	str	r7, [r1, #0]
 800131a:	bf18      	it	ne
 800131c:	2300      	movne	r3, #0
 800131e:	eba6 0807 	sub.w	r8, r6, r7
 8001322:	608b      	str	r3, [r1, #8]
 8001324:	f1b8 0f00 	cmp.w	r8, #0
 8001328:	dde9      	ble.n	80012fe <__sflush_r+0xae>
 800132a:	6a21      	ldr	r1, [r4, #32]
 800132c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800132e:	4643      	mov	r3, r8
 8001330:	463a      	mov	r2, r7
 8001332:	4628      	mov	r0, r5
 8001334:	47b0      	blx	r6
 8001336:	2800      	cmp	r0, #0
 8001338:	dc08      	bgt.n	800134c <__sflush_r+0xfc>
 800133a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800133e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001342:	81a3      	strh	r3, [r4, #12]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134c:	4407      	add	r7, r0
 800134e:	eba8 0800 	sub.w	r8, r8, r0
 8001352:	e7e7      	b.n	8001324 <__sflush_r+0xd4>
 8001354:	20400001 	.word	0x20400001

08001358 <_fflush_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	690b      	ldr	r3, [r1, #16]
 800135c:	4605      	mov	r5, r0
 800135e:	460c      	mov	r4, r1
 8001360:	b913      	cbnz	r3, 8001368 <_fflush_r+0x10>
 8001362:	2500      	movs	r5, #0
 8001364:	4628      	mov	r0, r5
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	b118      	cbz	r0, 8001372 <_fflush_r+0x1a>
 800136a:	6a03      	ldr	r3, [r0, #32]
 800136c:	b90b      	cbnz	r3, 8001372 <_fflush_r+0x1a>
 800136e:	f7ff fcf7 	bl	8000d60 <__sinit>
 8001372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f3      	beq.n	8001362 <_fflush_r+0xa>
 800137a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800137c:	07d0      	lsls	r0, r2, #31
 800137e:	d404      	bmi.n	800138a <_fflush_r+0x32>
 8001380:	0599      	lsls	r1, r3, #22
 8001382:	d402      	bmi.n	800138a <_fflush_r+0x32>
 8001384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001386:	f7ff fe3a 	bl	8000ffe <__retarget_lock_acquire_recursive>
 800138a:	4628      	mov	r0, r5
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff ff5f 	bl	8001250 <__sflush_r>
 8001392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001394:	07da      	lsls	r2, r3, #31
 8001396:	4605      	mov	r5, r0
 8001398:	d4e4      	bmi.n	8001364 <_fflush_r+0xc>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	059b      	lsls	r3, r3, #22
 800139e:	d4e1      	bmi.n	8001364 <_fflush_r+0xc>
 80013a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013a2:	f7ff fe2d 	bl	8001000 <__retarget_lock_release_recursive>
 80013a6:	e7dd      	b.n	8001364 <_fflush_r+0xc>

080013a8 <fiprintf>:
 80013a8:	b40e      	push	{r1, r2, r3}
 80013aa:	b503      	push	{r0, r1, lr}
 80013ac:	4601      	mov	r1, r0
 80013ae:	ab03      	add	r3, sp, #12
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <fiprintf+0x20>)
 80013b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80013b6:	6800      	ldr	r0, [r0, #0]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f000 f847 	bl	800144c <_vfiprintf_r>
 80013be:	b002      	add	sp, #8
 80013c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013c4:	b003      	add	sp, #12
 80013c6:	4770      	bx	lr
 80013c8:	2000003c 	.word	0x2000003c

080013cc <_sbrk_r>:
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4d06      	ldr	r5, [pc, #24]	@ (80013e8 <_sbrk_r+0x1c>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	4608      	mov	r0, r1
 80013d6:	602b      	str	r3, [r5, #0]
 80013d8:	f7ff fb52 	bl	8000a80 <_sbrk>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	d102      	bne.n	80013e6 <_sbrk_r+0x1a>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b103      	cbz	r3, 80013e6 <_sbrk_r+0x1a>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	20000320 	.word	0x20000320

080013ec <abort>:
 80013ec:	b508      	push	{r3, lr}
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fb8c 	bl	8001b0c <raise>
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff facb 	bl	8000990 <_exit>

080013fa <__sfputc_r>:
 80013fa:	6893      	ldr	r3, [r2, #8]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	b410      	push	{r4}
 8001402:	6093      	str	r3, [r2, #8]
 8001404:	da08      	bge.n	8001418 <__sfputc_r+0x1e>
 8001406:	6994      	ldr	r4, [r2, #24]
 8001408:	42a3      	cmp	r3, r4
 800140a:	db01      	blt.n	8001410 <__sfputc_r+0x16>
 800140c:	290a      	cmp	r1, #10
 800140e:	d103      	bne.n	8001418 <__sfputc_r+0x1e>
 8001410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001414:	f000 babe 	b.w	8001994 <__swbuf_r>
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	1c58      	adds	r0, r3, #1
 800141c:	6010      	str	r0, [r2, #0]
 800141e:	7019      	strb	r1, [r3, #0]
 8001420:	4608      	mov	r0, r1
 8001422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001426:	4770      	bx	lr

08001428 <__sfputs_r>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	4606      	mov	r6, r0
 800142c:	460f      	mov	r7, r1
 800142e:	4614      	mov	r4, r2
 8001430:	18d5      	adds	r5, r2, r3
 8001432:	42ac      	cmp	r4, r5
 8001434:	d101      	bne.n	800143a <__sfputs_r+0x12>
 8001436:	2000      	movs	r0, #0
 8001438:	e007      	b.n	800144a <__sfputs_r+0x22>
 800143a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800143e:	463a      	mov	r2, r7
 8001440:	4630      	mov	r0, r6
 8001442:	f7ff ffda 	bl	80013fa <__sfputc_r>
 8001446:	1c43      	adds	r3, r0, #1
 8001448:	d1f3      	bne.n	8001432 <__sfputs_r+0xa>
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800144c <_vfiprintf_r>:
 800144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	460d      	mov	r5, r1
 8001452:	b09d      	sub	sp, #116	@ 0x74
 8001454:	4614      	mov	r4, r2
 8001456:	4698      	mov	r8, r3
 8001458:	4606      	mov	r6, r0
 800145a:	b118      	cbz	r0, 8001464 <_vfiprintf_r+0x18>
 800145c:	6a03      	ldr	r3, [r0, #32]
 800145e:	b90b      	cbnz	r3, 8001464 <_vfiprintf_r+0x18>
 8001460:	f7ff fc7e 	bl	8000d60 <__sinit>
 8001464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001466:	07d9      	lsls	r1, r3, #31
 8001468:	d405      	bmi.n	8001476 <_vfiprintf_r+0x2a>
 800146a:	89ab      	ldrh	r3, [r5, #12]
 800146c:	059a      	lsls	r2, r3, #22
 800146e:	d402      	bmi.n	8001476 <_vfiprintf_r+0x2a>
 8001470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001472:	f7ff fdc4 	bl	8000ffe <__retarget_lock_acquire_recursive>
 8001476:	89ab      	ldrh	r3, [r5, #12]
 8001478:	071b      	lsls	r3, r3, #28
 800147a:	d501      	bpl.n	8001480 <_vfiprintf_r+0x34>
 800147c:	692b      	ldr	r3, [r5, #16]
 800147e:	b99b      	cbnz	r3, 80014a8 <_vfiprintf_r+0x5c>
 8001480:	4629      	mov	r1, r5
 8001482:	4630      	mov	r0, r6
 8001484:	f000 fac4 	bl	8001a10 <__swsetup_r>
 8001488:	b170      	cbz	r0, 80014a8 <_vfiprintf_r+0x5c>
 800148a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800148c:	07dc      	lsls	r4, r3, #31
 800148e:	d504      	bpl.n	800149a <_vfiprintf_r+0x4e>
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	b01d      	add	sp, #116	@ 0x74
 8001496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800149a:	89ab      	ldrh	r3, [r5, #12]
 800149c:	0598      	lsls	r0, r3, #22
 800149e:	d4f7      	bmi.n	8001490 <_vfiprintf_r+0x44>
 80014a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014a2:	f7ff fdad 	bl	8001000 <__retarget_lock_release_recursive>
 80014a6:	e7f3      	b.n	8001490 <_vfiprintf_r+0x44>
 80014a8:	2300      	movs	r3, #0
 80014aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80014ac:	2320      	movs	r3, #32
 80014ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80014b6:	2330      	movs	r3, #48	@ 0x30
 80014b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001668 <_vfiprintf_r+0x21c>
 80014bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014c0:	f04f 0901 	mov.w	r9, #1
 80014c4:	4623      	mov	r3, r4
 80014c6:	469a      	mov	sl, r3
 80014c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014cc:	b10a      	cbz	r2, 80014d2 <_vfiprintf_r+0x86>
 80014ce:	2a25      	cmp	r2, #37	@ 0x25
 80014d0:	d1f9      	bne.n	80014c6 <_vfiprintf_r+0x7a>
 80014d2:	ebba 0b04 	subs.w	fp, sl, r4
 80014d6:	d00b      	beq.n	80014f0 <_vfiprintf_r+0xa4>
 80014d8:	465b      	mov	r3, fp
 80014da:	4622      	mov	r2, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	4630      	mov	r0, r6
 80014e0:	f7ff ffa2 	bl	8001428 <__sfputs_r>
 80014e4:	3001      	adds	r0, #1
 80014e6:	f000 80a7 	beq.w	8001638 <_vfiprintf_r+0x1ec>
 80014ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014ec:	445a      	add	r2, fp
 80014ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80014f0:	f89a 3000 	ldrb.w	r3, [sl]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 809f 	beq.w	8001638 <_vfiprintf_r+0x1ec>
 80014fa:	2300      	movs	r3, #0
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001504:	f10a 0a01 	add.w	sl, sl, #1
 8001508:	9304      	str	r3, [sp, #16]
 800150a:	9307      	str	r3, [sp, #28]
 800150c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001510:	931a      	str	r3, [sp, #104]	@ 0x68
 8001512:	4654      	mov	r4, sl
 8001514:	2205      	movs	r2, #5
 8001516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800151a:	4853      	ldr	r0, [pc, #332]	@ (8001668 <_vfiprintf_r+0x21c>)
 800151c:	f7fe fe78 	bl	8000210 <memchr>
 8001520:	9a04      	ldr	r2, [sp, #16]
 8001522:	b9d8      	cbnz	r0, 800155c <_vfiprintf_r+0x110>
 8001524:	06d1      	lsls	r1, r2, #27
 8001526:	bf44      	itt	mi
 8001528:	2320      	movmi	r3, #32
 800152a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800152e:	0713      	lsls	r3, r2, #28
 8001530:	bf44      	itt	mi
 8001532:	232b      	movmi	r3, #43	@ 0x2b
 8001534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001538:	f89a 3000 	ldrb.w	r3, [sl]
 800153c:	2b2a      	cmp	r3, #42	@ 0x2a
 800153e:	d015      	beq.n	800156c <_vfiprintf_r+0x120>
 8001540:	9a07      	ldr	r2, [sp, #28]
 8001542:	4654      	mov	r4, sl
 8001544:	2000      	movs	r0, #0
 8001546:	f04f 0c0a 	mov.w	ip, #10
 800154a:	4621      	mov	r1, r4
 800154c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001550:	3b30      	subs	r3, #48	@ 0x30
 8001552:	2b09      	cmp	r3, #9
 8001554:	d94b      	bls.n	80015ee <_vfiprintf_r+0x1a2>
 8001556:	b1b0      	cbz	r0, 8001586 <_vfiprintf_r+0x13a>
 8001558:	9207      	str	r2, [sp, #28]
 800155a:	e014      	b.n	8001586 <_vfiprintf_r+0x13a>
 800155c:	eba0 0308 	sub.w	r3, r0, r8
 8001560:	fa09 f303 	lsl.w	r3, r9, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	46a2      	mov	sl, r4
 800156a:	e7d2      	b.n	8001512 <_vfiprintf_r+0xc6>
 800156c:	9b03      	ldr	r3, [sp, #12]
 800156e:	1d19      	adds	r1, r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	9103      	str	r1, [sp, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bfbb      	ittet	lt
 8001578:	425b      	neglt	r3, r3
 800157a:	f042 0202 	orrlt.w	r2, r2, #2
 800157e:	9307      	strge	r3, [sp, #28]
 8001580:	9307      	strlt	r3, [sp, #28]
 8001582:	bfb8      	it	lt
 8001584:	9204      	strlt	r2, [sp, #16]
 8001586:	7823      	ldrb	r3, [r4, #0]
 8001588:	2b2e      	cmp	r3, #46	@ 0x2e
 800158a:	d10a      	bne.n	80015a2 <_vfiprintf_r+0x156>
 800158c:	7863      	ldrb	r3, [r4, #1]
 800158e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001590:	d132      	bne.n	80015f8 <_vfiprintf_r+0x1ac>
 8001592:	9b03      	ldr	r3, [sp, #12]
 8001594:	1d1a      	adds	r2, r3, #4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	9203      	str	r2, [sp, #12]
 800159a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800159e:	3402      	adds	r4, #2
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001678 <_vfiprintf_r+0x22c>
 80015a6:	7821      	ldrb	r1, [r4, #0]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4650      	mov	r0, sl
 80015ac:	f7fe fe30 	bl	8000210 <memchr>
 80015b0:	b138      	cbz	r0, 80015c2 <_vfiprintf_r+0x176>
 80015b2:	9b04      	ldr	r3, [sp, #16]
 80015b4:	eba0 000a 	sub.w	r0, r0, sl
 80015b8:	2240      	movs	r2, #64	@ 0x40
 80015ba:	4082      	lsls	r2, r0
 80015bc:	4313      	orrs	r3, r2
 80015be:	3401      	adds	r4, #1
 80015c0:	9304      	str	r3, [sp, #16]
 80015c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015c6:	4829      	ldr	r0, [pc, #164]	@ (800166c <_vfiprintf_r+0x220>)
 80015c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015cc:	2206      	movs	r2, #6
 80015ce:	f7fe fe1f 	bl	8000210 <memchr>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d03f      	beq.n	8001656 <_vfiprintf_r+0x20a>
 80015d6:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <_vfiprintf_r+0x224>)
 80015d8:	bb1b      	cbnz	r3, 8001622 <_vfiprintf_r+0x1d6>
 80015da:	9b03      	ldr	r3, [sp, #12]
 80015dc:	3307      	adds	r3, #7
 80015de:	f023 0307 	bic.w	r3, r3, #7
 80015e2:	3308      	adds	r3, #8
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015e8:	443b      	add	r3, r7
 80015ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80015ec:	e76a      	b.n	80014c4 <_vfiprintf_r+0x78>
 80015ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80015f2:	460c      	mov	r4, r1
 80015f4:	2001      	movs	r0, #1
 80015f6:	e7a8      	b.n	800154a <_vfiprintf_r+0xfe>
 80015f8:	2300      	movs	r3, #0
 80015fa:	3401      	adds	r4, #1
 80015fc:	9305      	str	r3, [sp, #20]
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0c0a 	mov.w	ip, #10
 8001604:	4620      	mov	r0, r4
 8001606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800160a:	3a30      	subs	r2, #48	@ 0x30
 800160c:	2a09      	cmp	r2, #9
 800160e:	d903      	bls.n	8001618 <_vfiprintf_r+0x1cc>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0c6      	beq.n	80015a2 <_vfiprintf_r+0x156>
 8001614:	9105      	str	r1, [sp, #20]
 8001616:	e7c4      	b.n	80015a2 <_vfiprintf_r+0x156>
 8001618:	fb0c 2101 	mla	r1, ip, r1, r2
 800161c:	4604      	mov	r4, r0
 800161e:	2301      	movs	r3, #1
 8001620:	e7f0      	b.n	8001604 <_vfiprintf_r+0x1b8>
 8001622:	ab03      	add	r3, sp, #12
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	462a      	mov	r2, r5
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <_vfiprintf_r+0x228>)
 800162a:	a904      	add	r1, sp, #16
 800162c:	4630      	mov	r0, r6
 800162e:	f3af 8000 	nop.w
 8001632:	4607      	mov	r7, r0
 8001634:	1c78      	adds	r0, r7, #1
 8001636:	d1d6      	bne.n	80015e6 <_vfiprintf_r+0x19a>
 8001638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800163a:	07d9      	lsls	r1, r3, #31
 800163c:	d405      	bmi.n	800164a <_vfiprintf_r+0x1fe>
 800163e:	89ab      	ldrh	r3, [r5, #12]
 8001640:	059a      	lsls	r2, r3, #22
 8001642:	d402      	bmi.n	800164a <_vfiprintf_r+0x1fe>
 8001644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001646:	f7ff fcdb 	bl	8001000 <__retarget_lock_release_recursive>
 800164a:	89ab      	ldrh	r3, [r5, #12]
 800164c:	065b      	lsls	r3, r3, #25
 800164e:	f53f af1f 	bmi.w	8001490 <_vfiprintf_r+0x44>
 8001652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001654:	e71e      	b.n	8001494 <_vfiprintf_r+0x48>
 8001656:	ab03      	add	r3, sp, #12
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	462a      	mov	r2, r5
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <_vfiprintf_r+0x228>)
 800165e:	a904      	add	r1, sp, #16
 8001660:	4630      	mov	r0, r6
 8001662:	f000 f879 	bl	8001758 <_printf_i>
 8001666:	e7e4      	b.n	8001632 <_vfiprintf_r+0x1e6>
 8001668:	08001e34 	.word	0x08001e34
 800166c:	08001e3e 	.word	0x08001e3e
 8001670:	00000000 	.word	0x00000000
 8001674:	08001429 	.word	0x08001429
 8001678:	08001e3a 	.word	0x08001e3a

0800167c <_printf_common>:
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	4616      	mov	r6, r2
 8001682:	4698      	mov	r8, r3
 8001684:	688a      	ldr	r2, [r1, #8]
 8001686:	690b      	ldr	r3, [r1, #16]
 8001688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800168c:	4293      	cmp	r3, r2
 800168e:	bfb8      	it	lt
 8001690:	4613      	movlt	r3, r2
 8001692:	6033      	str	r3, [r6, #0]
 8001694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001698:	4607      	mov	r7, r0
 800169a:	460c      	mov	r4, r1
 800169c:	b10a      	cbz	r2, 80016a2 <_printf_common+0x26>
 800169e:	3301      	adds	r3, #1
 80016a0:	6033      	str	r3, [r6, #0]
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	0699      	lsls	r1, r3, #26
 80016a6:	bf42      	ittt	mi
 80016a8:	6833      	ldrmi	r3, [r6, #0]
 80016aa:	3302      	addmi	r3, #2
 80016ac:	6033      	strmi	r3, [r6, #0]
 80016ae:	6825      	ldr	r5, [r4, #0]
 80016b0:	f015 0506 	ands.w	r5, r5, #6
 80016b4:	d106      	bne.n	80016c4 <_printf_common+0x48>
 80016b6:	f104 0a19 	add.w	sl, r4, #25
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	6832      	ldr	r2, [r6, #0]
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	42ab      	cmp	r3, r5
 80016c2:	dc26      	bgt.n	8001712 <_printf_common+0x96>
 80016c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016c8:	6822      	ldr	r2, [r4, #0]
 80016ca:	3b00      	subs	r3, #0
 80016cc:	bf18      	it	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	0692      	lsls	r2, r2, #26
 80016d2:	d42b      	bmi.n	800172c <_printf_common+0xb0>
 80016d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016d8:	4641      	mov	r1, r8
 80016da:	4638      	mov	r0, r7
 80016dc:	47c8      	blx	r9
 80016de:	3001      	adds	r0, #1
 80016e0:	d01e      	beq.n	8001720 <_printf_common+0xa4>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	6922      	ldr	r2, [r4, #16]
 80016e6:	f003 0306 	and.w	r3, r3, #6
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf02      	ittt	eq
 80016ee:	68e5      	ldreq	r5, [r4, #12]
 80016f0:	6833      	ldreq	r3, [r6, #0]
 80016f2:	1aed      	subeq	r5, r5, r3
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	bf0c      	ite	eq
 80016f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016fc:	2500      	movne	r5, #0
 80016fe:	4293      	cmp	r3, r2
 8001700:	bfc4      	itt	gt
 8001702:	1a9b      	subgt	r3, r3, r2
 8001704:	18ed      	addgt	r5, r5, r3
 8001706:	2600      	movs	r6, #0
 8001708:	341a      	adds	r4, #26
 800170a:	42b5      	cmp	r5, r6
 800170c:	d11a      	bne.n	8001744 <_printf_common+0xc8>
 800170e:	2000      	movs	r0, #0
 8001710:	e008      	b.n	8001724 <_printf_common+0xa8>
 8001712:	2301      	movs	r3, #1
 8001714:	4652      	mov	r2, sl
 8001716:	4641      	mov	r1, r8
 8001718:	4638      	mov	r0, r7
 800171a:	47c8      	blx	r9
 800171c:	3001      	adds	r0, #1
 800171e:	d103      	bne.n	8001728 <_printf_common+0xac>
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001728:	3501      	adds	r5, #1
 800172a:	e7c6      	b.n	80016ba <_printf_common+0x3e>
 800172c:	18e1      	adds	r1, r4, r3
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	2030      	movs	r0, #48	@ 0x30
 8001732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001736:	4422      	add	r2, r4
 8001738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800173c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001740:	3302      	adds	r3, #2
 8001742:	e7c7      	b.n	80016d4 <_printf_common+0x58>
 8001744:	2301      	movs	r3, #1
 8001746:	4622      	mov	r2, r4
 8001748:	4641      	mov	r1, r8
 800174a:	4638      	mov	r0, r7
 800174c:	47c8      	blx	r9
 800174e:	3001      	adds	r0, #1
 8001750:	d0e6      	beq.n	8001720 <_printf_common+0xa4>
 8001752:	3601      	adds	r6, #1
 8001754:	e7d9      	b.n	800170a <_printf_common+0x8e>
	...

08001758 <_printf_i>:
 8001758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800175c:	7e0f      	ldrb	r7, [r1, #24]
 800175e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001760:	2f78      	cmp	r7, #120	@ 0x78
 8001762:	4691      	mov	r9, r2
 8001764:	4680      	mov	r8, r0
 8001766:	460c      	mov	r4, r1
 8001768:	469a      	mov	sl, r3
 800176a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800176e:	d807      	bhi.n	8001780 <_printf_i+0x28>
 8001770:	2f62      	cmp	r7, #98	@ 0x62
 8001772:	d80a      	bhi.n	800178a <_printf_i+0x32>
 8001774:	2f00      	cmp	r7, #0
 8001776:	f000 80d1 	beq.w	800191c <_printf_i+0x1c4>
 800177a:	2f58      	cmp	r7, #88	@ 0x58
 800177c:	f000 80b8 	beq.w	80018f0 <_printf_i+0x198>
 8001780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001788:	e03a      	b.n	8001800 <_printf_i+0xa8>
 800178a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800178e:	2b15      	cmp	r3, #21
 8001790:	d8f6      	bhi.n	8001780 <_printf_i+0x28>
 8001792:	a101      	add	r1, pc, #4	@ (adr r1, 8001798 <_printf_i+0x40>)
 8001794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001798:	080017f1 	.word	0x080017f1
 800179c:	08001805 	.word	0x08001805
 80017a0:	08001781 	.word	0x08001781
 80017a4:	08001781 	.word	0x08001781
 80017a8:	08001781 	.word	0x08001781
 80017ac:	08001781 	.word	0x08001781
 80017b0:	08001805 	.word	0x08001805
 80017b4:	08001781 	.word	0x08001781
 80017b8:	08001781 	.word	0x08001781
 80017bc:	08001781 	.word	0x08001781
 80017c0:	08001781 	.word	0x08001781
 80017c4:	08001903 	.word	0x08001903
 80017c8:	0800182f 	.word	0x0800182f
 80017cc:	080018bd 	.word	0x080018bd
 80017d0:	08001781 	.word	0x08001781
 80017d4:	08001781 	.word	0x08001781
 80017d8:	08001925 	.word	0x08001925
 80017dc:	08001781 	.word	0x08001781
 80017e0:	0800182f 	.word	0x0800182f
 80017e4:	08001781 	.word	0x08001781
 80017e8:	08001781 	.word	0x08001781
 80017ec:	080018c5 	.word	0x080018c5
 80017f0:	6833      	ldr	r3, [r6, #0]
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6032      	str	r2, [r6, #0]
 80017f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001800:	2301      	movs	r3, #1
 8001802:	e09c      	b.n	800193e <_printf_i+0x1e6>
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	6820      	ldr	r0, [r4, #0]
 8001808:	1d19      	adds	r1, r3, #4
 800180a:	6031      	str	r1, [r6, #0]
 800180c:	0606      	lsls	r6, r0, #24
 800180e:	d501      	bpl.n	8001814 <_printf_i+0xbc>
 8001810:	681d      	ldr	r5, [r3, #0]
 8001812:	e003      	b.n	800181c <_printf_i+0xc4>
 8001814:	0645      	lsls	r5, r0, #25
 8001816:	d5fb      	bpl.n	8001810 <_printf_i+0xb8>
 8001818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800181c:	2d00      	cmp	r5, #0
 800181e:	da03      	bge.n	8001828 <_printf_i+0xd0>
 8001820:	232d      	movs	r3, #45	@ 0x2d
 8001822:	426d      	negs	r5, r5
 8001824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001828:	4858      	ldr	r0, [pc, #352]	@ (800198c <_printf_i+0x234>)
 800182a:	230a      	movs	r3, #10
 800182c:	e011      	b.n	8001852 <_printf_i+0xfa>
 800182e:	6821      	ldr	r1, [r4, #0]
 8001830:	6833      	ldr	r3, [r6, #0]
 8001832:	0608      	lsls	r0, r1, #24
 8001834:	f853 5b04 	ldr.w	r5, [r3], #4
 8001838:	d402      	bmi.n	8001840 <_printf_i+0xe8>
 800183a:	0649      	lsls	r1, r1, #25
 800183c:	bf48      	it	mi
 800183e:	b2ad      	uxthmi	r5, r5
 8001840:	2f6f      	cmp	r7, #111	@ 0x6f
 8001842:	4852      	ldr	r0, [pc, #328]	@ (800198c <_printf_i+0x234>)
 8001844:	6033      	str	r3, [r6, #0]
 8001846:	bf14      	ite	ne
 8001848:	230a      	movne	r3, #10
 800184a:	2308      	moveq	r3, #8
 800184c:	2100      	movs	r1, #0
 800184e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001852:	6866      	ldr	r6, [r4, #4]
 8001854:	60a6      	str	r6, [r4, #8]
 8001856:	2e00      	cmp	r6, #0
 8001858:	db05      	blt.n	8001866 <_printf_i+0x10e>
 800185a:	6821      	ldr	r1, [r4, #0]
 800185c:	432e      	orrs	r6, r5
 800185e:	f021 0104 	bic.w	r1, r1, #4
 8001862:	6021      	str	r1, [r4, #0]
 8001864:	d04b      	beq.n	80018fe <_printf_i+0x1a6>
 8001866:	4616      	mov	r6, r2
 8001868:	fbb5 f1f3 	udiv	r1, r5, r3
 800186c:	fb03 5711 	mls	r7, r3, r1, r5
 8001870:	5dc7      	ldrb	r7, [r0, r7]
 8001872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001876:	462f      	mov	r7, r5
 8001878:	42bb      	cmp	r3, r7
 800187a:	460d      	mov	r5, r1
 800187c:	d9f4      	bls.n	8001868 <_printf_i+0x110>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d10b      	bne.n	800189a <_printf_i+0x142>
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	07df      	lsls	r7, r3, #31
 8001886:	d508      	bpl.n	800189a <_printf_i+0x142>
 8001888:	6923      	ldr	r3, [r4, #16]
 800188a:	6861      	ldr	r1, [r4, #4]
 800188c:	4299      	cmp	r1, r3
 800188e:	bfde      	ittt	le
 8001890:	2330      	movle	r3, #48	@ 0x30
 8001892:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001896:	f106 36ff 	addle.w	r6, r6, #4294967295
 800189a:	1b92      	subs	r2, r2, r6
 800189c:	6122      	str	r2, [r4, #16]
 800189e:	f8cd a000 	str.w	sl, [sp]
 80018a2:	464b      	mov	r3, r9
 80018a4:	aa03      	add	r2, sp, #12
 80018a6:	4621      	mov	r1, r4
 80018a8:	4640      	mov	r0, r8
 80018aa:	f7ff fee7 	bl	800167c <_printf_common>
 80018ae:	3001      	adds	r0, #1
 80018b0:	d14a      	bne.n	8001948 <_printf_i+0x1f0>
 80018b2:	f04f 30ff 	mov.w	r0, #4294967295
 80018b6:	b004      	add	sp, #16
 80018b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	f043 0320 	orr.w	r3, r3, #32
 80018c2:	6023      	str	r3, [r4, #0]
 80018c4:	4832      	ldr	r0, [pc, #200]	@ (8001990 <_printf_i+0x238>)
 80018c6:	2778      	movs	r7, #120	@ 0x78
 80018c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	6831      	ldr	r1, [r6, #0]
 80018d0:	061f      	lsls	r7, r3, #24
 80018d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80018d6:	d402      	bmi.n	80018de <_printf_i+0x186>
 80018d8:	065f      	lsls	r7, r3, #25
 80018da:	bf48      	it	mi
 80018dc:	b2ad      	uxthmi	r5, r5
 80018de:	6031      	str	r1, [r6, #0]
 80018e0:	07d9      	lsls	r1, r3, #31
 80018e2:	bf44      	itt	mi
 80018e4:	f043 0320 	orrmi.w	r3, r3, #32
 80018e8:	6023      	strmi	r3, [r4, #0]
 80018ea:	b11d      	cbz	r5, 80018f4 <_printf_i+0x19c>
 80018ec:	2310      	movs	r3, #16
 80018ee:	e7ad      	b.n	800184c <_printf_i+0xf4>
 80018f0:	4826      	ldr	r0, [pc, #152]	@ (800198c <_printf_i+0x234>)
 80018f2:	e7e9      	b.n	80018c8 <_printf_i+0x170>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f023 0320 	bic.w	r3, r3, #32
 80018fa:	6023      	str	r3, [r4, #0]
 80018fc:	e7f6      	b.n	80018ec <_printf_i+0x194>
 80018fe:	4616      	mov	r6, r2
 8001900:	e7bd      	b.n	800187e <_printf_i+0x126>
 8001902:	6833      	ldr	r3, [r6, #0]
 8001904:	6825      	ldr	r5, [r4, #0]
 8001906:	6961      	ldr	r1, [r4, #20]
 8001908:	1d18      	adds	r0, r3, #4
 800190a:	6030      	str	r0, [r6, #0]
 800190c:	062e      	lsls	r6, r5, #24
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	d501      	bpl.n	8001916 <_printf_i+0x1be>
 8001912:	6019      	str	r1, [r3, #0]
 8001914:	e002      	b.n	800191c <_printf_i+0x1c4>
 8001916:	0668      	lsls	r0, r5, #25
 8001918:	d5fb      	bpl.n	8001912 <_printf_i+0x1ba>
 800191a:	8019      	strh	r1, [r3, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	6123      	str	r3, [r4, #16]
 8001920:	4616      	mov	r6, r2
 8001922:	e7bc      	b.n	800189e <_printf_i+0x146>
 8001924:	6833      	ldr	r3, [r6, #0]
 8001926:	1d1a      	adds	r2, r3, #4
 8001928:	6032      	str	r2, [r6, #0]
 800192a:	681e      	ldr	r6, [r3, #0]
 800192c:	6862      	ldr	r2, [r4, #4]
 800192e:	2100      	movs	r1, #0
 8001930:	4630      	mov	r0, r6
 8001932:	f7fe fc6d 	bl	8000210 <memchr>
 8001936:	b108      	cbz	r0, 800193c <_printf_i+0x1e4>
 8001938:	1b80      	subs	r0, r0, r6
 800193a:	6060      	str	r0, [r4, #4]
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	6123      	str	r3, [r4, #16]
 8001940:	2300      	movs	r3, #0
 8001942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001946:	e7aa      	b.n	800189e <_printf_i+0x146>
 8001948:	6923      	ldr	r3, [r4, #16]
 800194a:	4632      	mov	r2, r6
 800194c:	4649      	mov	r1, r9
 800194e:	4640      	mov	r0, r8
 8001950:	47d0      	blx	sl
 8001952:	3001      	adds	r0, #1
 8001954:	d0ad      	beq.n	80018b2 <_printf_i+0x15a>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	079b      	lsls	r3, r3, #30
 800195a:	d413      	bmi.n	8001984 <_printf_i+0x22c>
 800195c:	68e0      	ldr	r0, [r4, #12]
 800195e:	9b03      	ldr	r3, [sp, #12]
 8001960:	4298      	cmp	r0, r3
 8001962:	bfb8      	it	lt
 8001964:	4618      	movlt	r0, r3
 8001966:	e7a6      	b.n	80018b6 <_printf_i+0x15e>
 8001968:	2301      	movs	r3, #1
 800196a:	4632      	mov	r2, r6
 800196c:	4649      	mov	r1, r9
 800196e:	4640      	mov	r0, r8
 8001970:	47d0      	blx	sl
 8001972:	3001      	adds	r0, #1
 8001974:	d09d      	beq.n	80018b2 <_printf_i+0x15a>
 8001976:	3501      	adds	r5, #1
 8001978:	68e3      	ldr	r3, [r4, #12]
 800197a:	9903      	ldr	r1, [sp, #12]
 800197c:	1a5b      	subs	r3, r3, r1
 800197e:	42ab      	cmp	r3, r5
 8001980:	dcf2      	bgt.n	8001968 <_printf_i+0x210>
 8001982:	e7eb      	b.n	800195c <_printf_i+0x204>
 8001984:	2500      	movs	r5, #0
 8001986:	f104 0619 	add.w	r6, r4, #25
 800198a:	e7f5      	b.n	8001978 <_printf_i+0x220>
 800198c:	08001e45 	.word	0x08001e45
 8001990:	08001e56 	.word	0x08001e56

08001994 <__swbuf_r>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	460e      	mov	r6, r1
 8001998:	4614      	mov	r4, r2
 800199a:	4605      	mov	r5, r0
 800199c:	b118      	cbz	r0, 80019a6 <__swbuf_r+0x12>
 800199e:	6a03      	ldr	r3, [r0, #32]
 80019a0:	b90b      	cbnz	r3, 80019a6 <__swbuf_r+0x12>
 80019a2:	f7ff f9dd 	bl	8000d60 <__sinit>
 80019a6:	69a3      	ldr	r3, [r4, #24]
 80019a8:	60a3      	str	r3, [r4, #8]
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	071a      	lsls	r2, r3, #28
 80019ae:	d501      	bpl.n	80019b4 <__swbuf_r+0x20>
 80019b0:	6923      	ldr	r3, [r4, #16]
 80019b2:	b943      	cbnz	r3, 80019c6 <__swbuf_r+0x32>
 80019b4:	4621      	mov	r1, r4
 80019b6:	4628      	mov	r0, r5
 80019b8:	f000 f82a 	bl	8001a10 <__swsetup_r>
 80019bc:	b118      	cbz	r0, 80019c6 <__swbuf_r+0x32>
 80019be:	f04f 37ff 	mov.w	r7, #4294967295
 80019c2:	4638      	mov	r0, r7
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	6922      	ldr	r2, [r4, #16]
 80019ca:	1a98      	subs	r0, r3, r2
 80019cc:	6963      	ldr	r3, [r4, #20]
 80019ce:	b2f6      	uxtb	r6, r6
 80019d0:	4283      	cmp	r3, r0
 80019d2:	4637      	mov	r7, r6
 80019d4:	dc05      	bgt.n	80019e2 <__swbuf_r+0x4e>
 80019d6:	4621      	mov	r1, r4
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff fcbd 	bl	8001358 <_fflush_r>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d1ed      	bne.n	80019be <__swbuf_r+0x2a>
 80019e2:	68a3      	ldr	r3, [r4, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60a3      	str	r3, [r4, #8]
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	6022      	str	r2, [r4, #0]
 80019ee:	701e      	strb	r6, [r3, #0]
 80019f0:	6962      	ldr	r2, [r4, #20]
 80019f2:	1c43      	adds	r3, r0, #1
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d004      	beq.n	8001a02 <__swbuf_r+0x6e>
 80019f8:	89a3      	ldrh	r3, [r4, #12]
 80019fa:	07db      	lsls	r3, r3, #31
 80019fc:	d5e1      	bpl.n	80019c2 <__swbuf_r+0x2e>
 80019fe:	2e0a      	cmp	r6, #10
 8001a00:	d1df      	bne.n	80019c2 <__swbuf_r+0x2e>
 8001a02:	4621      	mov	r1, r4
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff fca7 	bl	8001358 <_fflush_r>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d0d9      	beq.n	80019c2 <__swbuf_r+0x2e>
 8001a0e:	e7d6      	b.n	80019be <__swbuf_r+0x2a>

08001a10 <__swsetup_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <__swsetup_r+0xa8>)
 8001a14:	4605      	mov	r5, r0
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	460c      	mov	r4, r1
 8001a1a:	b118      	cbz	r0, 8001a24 <__swsetup_r+0x14>
 8001a1c:	6a03      	ldr	r3, [r0, #32]
 8001a1e:	b90b      	cbnz	r3, 8001a24 <__swsetup_r+0x14>
 8001a20:	f7ff f99e 	bl	8000d60 <__sinit>
 8001a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a28:	0719      	lsls	r1, r3, #28
 8001a2a:	d422      	bmi.n	8001a72 <__swsetup_r+0x62>
 8001a2c:	06da      	lsls	r2, r3, #27
 8001a2e:	d407      	bmi.n	8001a40 <__swsetup_r+0x30>
 8001a30:	2209      	movs	r2, #9
 8001a32:	602a      	str	r2, [r5, #0]
 8001a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a38:	81a3      	strh	r3, [r4, #12]
 8001a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3e:	e033      	b.n	8001aa8 <__swsetup_r+0x98>
 8001a40:	0758      	lsls	r0, r3, #29
 8001a42:	d512      	bpl.n	8001a6a <__swsetup_r+0x5a>
 8001a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a46:	b141      	cbz	r1, 8001a5a <__swsetup_r+0x4a>
 8001a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a4c:	4299      	cmp	r1, r3
 8001a4e:	d002      	beq.n	8001a56 <__swsetup_r+0x46>
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff fafd 	bl	8001050 <_free_r>
 8001a56:	2300      	movs	r3, #0
 8001a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a60:	81a3      	strh	r3, [r4, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	6923      	ldr	r3, [r4, #16]
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	b94b      	cbnz	r3, 8001a8a <__swsetup_r+0x7a>
 8001a76:	89a3      	ldrh	r3, [r4, #12]
 8001a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a80:	d003      	beq.n	8001a8a <__swsetup_r+0x7a>
 8001a82:	4621      	mov	r1, r4
 8001a84:	4628      	mov	r0, r5
 8001a86:	f000 f883 	bl	8001b90 <__smakebuf_r>
 8001a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8e:	f013 0201 	ands.w	r2, r3, #1
 8001a92:	d00a      	beq.n	8001aaa <__swsetup_r+0x9a>
 8001a94:	2200      	movs	r2, #0
 8001a96:	60a2      	str	r2, [r4, #8]
 8001a98:	6962      	ldr	r2, [r4, #20]
 8001a9a:	4252      	negs	r2, r2
 8001a9c:	61a2      	str	r2, [r4, #24]
 8001a9e:	6922      	ldr	r2, [r4, #16]
 8001aa0:	b942      	cbnz	r2, 8001ab4 <__swsetup_r+0xa4>
 8001aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001aa6:	d1c5      	bne.n	8001a34 <__swsetup_r+0x24>
 8001aa8:	bd38      	pop	{r3, r4, r5, pc}
 8001aaa:	0799      	lsls	r1, r3, #30
 8001aac:	bf58      	it	pl
 8001aae:	6962      	ldrpl	r2, [r4, #20]
 8001ab0:	60a2      	str	r2, [r4, #8]
 8001ab2:	e7f4      	b.n	8001a9e <__swsetup_r+0x8e>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e7f7      	b.n	8001aa8 <__swsetup_r+0x98>
 8001ab8:	2000003c 	.word	0x2000003c

08001abc <_raise_r>:
 8001abc:	291f      	cmp	r1, #31
 8001abe:	b538      	push	{r3, r4, r5, lr}
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	d904      	bls.n	8001ad0 <_raise_r+0x14>
 8001ac6:	2316      	movs	r3, #22
 8001ac8:	6003      	str	r3, [r0, #0]
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001ad2:	b112      	cbz	r2, 8001ada <_raise_r+0x1e>
 8001ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ad8:	b94b      	cbnz	r3, 8001aee <_raise_r+0x32>
 8001ada:	4628      	mov	r0, r5
 8001adc:	f000 f830 	bl	8001b40 <_getpid_r>
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aea:	f000 b817 	b.w	8001b1c <_kill_r>
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d00a      	beq.n	8001b08 <_raise_r+0x4c>
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	d103      	bne.n	8001afe <_raise_r+0x42>
 8001af6:	2316      	movs	r3, #22
 8001af8:	6003      	str	r3, [r0, #0]
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7e7      	b.n	8001ace <_raise_r+0x12>
 8001afe:	2100      	movs	r1, #0
 8001b00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001b04:	4620      	mov	r0, r4
 8001b06:	4798      	blx	r3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e7e0      	b.n	8001ace <_raise_r+0x12>

08001b0c <raise>:
 8001b0c:	4b02      	ldr	r3, [pc, #8]	@ (8001b18 <raise+0xc>)
 8001b0e:	4601      	mov	r1, r0
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f7ff bfd3 	b.w	8001abc <_raise_r>
 8001b16:	bf00      	nop
 8001b18:	2000003c 	.word	0x2000003c

08001b1c <_kill_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4d07      	ldr	r5, [pc, #28]	@ (8001b3c <_kill_r+0x20>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	f7fe ff21 	bl	8000970 <_kill>
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	d102      	bne.n	8001b38 <_kill_r+0x1c>
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	b103      	cbz	r3, 8001b38 <_kill_r+0x1c>
 8001b36:	6023      	str	r3, [r4, #0]
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000320 	.word	0x20000320

08001b40 <_getpid_r>:
 8001b40:	f7fe bf0e 	b.w	8000960 <_getpid>

08001b44 <__swhatbuf_r>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	460c      	mov	r4, r1
 8001b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	b096      	sub	sp, #88	@ 0x58
 8001b50:	4615      	mov	r5, r2
 8001b52:	461e      	mov	r6, r3
 8001b54:	da0d      	bge.n	8001b72 <__swhatbuf_r+0x2e>
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2340      	movne	r3, #64	@ 0x40
 8001b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001b68:	2000      	movs	r0, #0
 8001b6a:	6031      	str	r1, [r6, #0]
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	b016      	add	sp, #88	@ 0x58
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
 8001b72:	466a      	mov	r2, sp
 8001b74:	f000 f848 	bl	8001c08 <_fstat_r>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	dbec      	blt.n	8001b56 <__swhatbuf_r+0x12>
 8001b7c:	9901      	ldr	r1, [sp, #4]
 8001b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001b86:	4259      	negs	r1, r3
 8001b88:	4159      	adcs	r1, r3
 8001b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8e:	e7eb      	b.n	8001b68 <__swhatbuf_r+0x24>

08001b90 <__smakebuf_r>:
 8001b90:	898b      	ldrh	r3, [r1, #12]
 8001b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b94:	079d      	lsls	r5, r3, #30
 8001b96:	4606      	mov	r6, r0
 8001b98:	460c      	mov	r4, r1
 8001b9a:	d507      	bpl.n	8001bac <__smakebuf_r+0x1c>
 8001b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	6123      	str	r3, [r4, #16]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	6163      	str	r3, [r4, #20]
 8001ba8:	b003      	add	sp, #12
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bac:	ab01      	add	r3, sp, #4
 8001bae:	466a      	mov	r2, sp
 8001bb0:	f7ff ffc8 	bl	8001b44 <__swhatbuf_r>
 8001bb4:	9f00      	ldr	r7, [sp, #0]
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	4639      	mov	r1, r7
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7ff fabc 	bl	8001138 <_malloc_r>
 8001bc0:	b948      	cbnz	r0, 8001bd6 <__smakebuf_r+0x46>
 8001bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bc6:	059a      	lsls	r2, r3, #22
 8001bc8:	d4ee      	bmi.n	8001ba8 <__smakebuf_r+0x18>
 8001bca:	f023 0303 	bic.w	r3, r3, #3
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	81a3      	strh	r3, [r4, #12]
 8001bd4:	e7e2      	b.n	8001b9c <__smakebuf_r+0xc>
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	6020      	str	r0, [r4, #0]
 8001bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bde:	81a3      	strh	r3, [r4, #12]
 8001be0:	9b01      	ldr	r3, [sp, #4]
 8001be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001be6:	b15b      	cbz	r3, 8001c00 <__smakebuf_r+0x70>
 8001be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 f81d 	bl	8001c2c <_isatty_r>
 8001bf2:	b128      	cbz	r0, 8001c00 <__smakebuf_r+0x70>
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	81a3      	strh	r3, [r4, #12]
 8001c00:	89a3      	ldrh	r3, [r4, #12]
 8001c02:	431d      	orrs	r5, r3
 8001c04:	81a5      	strh	r5, [r4, #12]
 8001c06:	e7cf      	b.n	8001ba8 <__smakebuf_r+0x18>

08001c08 <_fstat_r>:
 8001c08:	b538      	push	{r3, r4, r5, lr}
 8001c0a:	4d07      	ldr	r5, [pc, #28]	@ (8001c28 <_fstat_r+0x20>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	f7fe ff0b 	bl	8000a30 <_fstat>
 8001c1a:	1c43      	adds	r3, r0, #1
 8001c1c:	d102      	bne.n	8001c24 <_fstat_r+0x1c>
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	b103      	cbz	r3, 8001c24 <_fstat_r+0x1c>
 8001c22:	6023      	str	r3, [r4, #0]
 8001c24:	bd38      	pop	{r3, r4, r5, pc}
 8001c26:	bf00      	nop
 8001c28:	20000320 	.word	0x20000320

08001c2c <_isatty_r>:
 8001c2c:	b538      	push	{r3, r4, r5, lr}
 8001c2e:	4d06      	ldr	r5, [pc, #24]	@ (8001c48 <_isatty_r+0x1c>)
 8001c30:	2300      	movs	r3, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	602b      	str	r3, [r5, #0]
 8001c38:	f7fe ff0a 	bl	8000a50 <_isatty>
 8001c3c:	1c43      	adds	r3, r0, #1
 8001c3e:	d102      	bne.n	8001c46 <_isatty_r+0x1a>
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	b103      	cbz	r3, 8001c46 <_isatty_r+0x1a>
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
 8001c48:	20000320 	.word	0x20000320

08001c4c <_init>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	bf00      	nop
 8001c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c52:	bc08      	pop	{r3}
 8001c54:	469e      	mov	lr, r3
 8001c56:	4770      	bx	lr

08001c58 <_fini>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	bf00      	nop
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr
