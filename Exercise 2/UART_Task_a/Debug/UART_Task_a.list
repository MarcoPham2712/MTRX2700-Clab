
UART_Task_a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  00002028  2**0
                  CONTENTS
  4 .ARM          00000000  080004c4  080004c4  00002028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c4  080004c4  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080004cc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002028  2**0
                  CONTENTS
 10 .bss          0000009c  20000028  20000028  00002028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00002028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006fa  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002bd  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159c8  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c66  00000000  00000000  000184c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075e74  00000000  00000000  0001912a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008ef9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000124  00000000  00000000  0008efe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0008f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a4 	.word	0x080004a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080004a4 	.word	0x080004a4

080001d4 <finished_transmission>:

// Buffer to store the received string
uint8_t received_string[128];

// Called when transmission completes
void finished_transmission(uint32_t bytes_sent) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	SerialOutputString((uint8_t *)"Done!\r\n", &USART1_PORT);
 80001dc:	4903      	ldr	r1, [pc, #12]	@ (80001ec <finished_transmission+0x18>)
 80001de:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <finished_transmission+0x1c>)
 80001e0:	f000 f8bb 	bl	800035a <SerialOutputString>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	080004bc 	.word	0x080004bc

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	// Initialize USART1
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 80001f8:	4a08      	ldr	r2, [pc, #32]	@ (800021c <main+0x28>)
 80001fa:	4909      	ldr	r1, [pc, #36]	@ (8000220 <main+0x2c>)
 80001fc:	2004      	movs	r0, #4
 80001fe:	f000 f813 	bl	8000228 <SerialInitialise>

	// Receives until terminating character
	SerialInputUntil(received_string, sizeof(received_string), '\r', &USART1_PORT);
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <main+0x2c>)
 8000204:	220d      	movs	r2, #13
 8000206:	2180      	movs	r1, #128	@ 0x80
 8000208:	4806      	ldr	r0, [pc, #24]	@ (8000224 <main+0x30>)
 800020a:	f000 f8c6 	bl	800039a <SerialInputUntil>

	// Transmits message over USART
	SerialOutputString(received_string, &USART1_PORT);
 800020e:	4904      	ldr	r1, [pc, #16]	@ (8000220 <main+0x2c>)
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <main+0x30>)
 8000212:	f000 f8a2 	bl	800035a <SerialOutputString>

	for(;;) {}
 8000216:	bf00      	nop
 8000218:	e7fd      	b.n	8000216 <main+0x22>
 800021a:	bf00      	nop
 800021c:	080001d5 	.word	0x080001d5
 8000220:	20000000 	.word	0x20000000
 8000224:	20000044 	.word	0x20000044

08000228 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800023a:	4b3a      	ldr	r3, [pc, #232]	@ (8000324 <SerialInitialise+0xfc>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	4a39      	ldr	r2, [pc, #228]	@ (8000324 <SerialInitialise+0xfc>)
 8000240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000244:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000246:	4b37      	ldr	r3, [pc, #220]	@ (8000324 <SerialInitialise+0xfc>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a36      	ldr	r2, [pc, #216]	@ (8000324 <SerialInitialise+0xfc>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	691a      	ldr	r2, [r3, #16]
 8000256:	4b33      	ldr	r3, [pc, #204]	@ (8000324 <SerialInitialise+0xfc>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4932      	ldr	r1, [pc, #200]	@ (8000324 <SerialInitialise+0xfc>)
 800025c:	4313      	orrs	r3, r2
 800025e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	68ba      	ldr	r2, [r7, #8]
 8000266:	6952      	ldr	r2, [r2, #20]
 8000268:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	6992      	ldr	r2, [r2, #24]
 8000272:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	69d9      	ldr	r1, [r3, #28]
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	6a1a      	ldr	r2, [r3, #32]
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	430a      	orrs	r2, r1
 8000284:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	6a19      	ldr	r1, [r3, #32]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	430a      	orrs	r2, r1
 8000296:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	68da      	ldr	r2, [r3, #12]
 800029c:	4b21      	ldr	r3, [pc, #132]	@ (8000324 <SerialInitialise+0xfc>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4920      	ldr	r1, [pc, #128]	@ (8000324 <SerialInitialise+0xfc>)
 80002a2:	4313      	orrs	r3, r2
 80002a4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	689a      	ldr	r2, [r3, #8]
 80002aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <SerialInitialise+0xfc>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	491d      	ldr	r1, [pc, #116]	@ (8000324 <SerialInitialise+0xfc>)
 80002b0:	4313      	orrs	r3, r2
 80002b2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	330c      	adds	r3, #12
 80002ba:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d822      	bhi.n	8000308 <SerialInitialise+0xe0>
 80002c2:	a201      	add	r2, pc, #4	@ (adr r2, 80002c8 <SerialInitialise+0xa0>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	080002dd 	.word	0x080002dd
 80002cc:	080002e7 	.word	0x080002e7
 80002d0:	080002f1 	.word	0x080002f1
 80002d4:	080002f9 	.word	0x080002f9
 80002d8:	08000301 	.word	0x08000301
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x341;  // 115200 at 8MHz
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	f240 3241 	movw	r2, #833	@ 0x341
 80002e2:	801a      	strh	r2, [r3, #0]
		break;
 80002e4:	e010      	b.n	8000308 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80002ec:	801a      	strh	r2, [r3, #0]
		break;
 80002ee:	e00b      	b.n	8000308 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xD0;  // 115200 at 8MHz
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	22d0      	movs	r2, #208	@ 0xd0
 80002f4:	801a      	strh	r2, [r3, #0]
		break;
 80002f6:	e007      	b.n	8000308 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8B;  // 115200 at 8MHz
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	228b      	movs	r2, #139	@ 0x8b
 80002fc:	801a      	strh	r2, [r3, #0]
		break;
 80002fe:	e003      	b.n	8000308 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	2246      	movs	r2, #70	@ 0x46
 8000304:	801a      	strh	r2, [r3, #0]
		break;
 8000306:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f042 020d 	orr.w	r2, r2, #13
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	371c      	adds	r7, #28
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000334:	bf00      	nop
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f8      	beq.n	8000336 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	b292      	uxth	r2, r2
 800034c:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800035a:	b580      	push	{r7, lr}
 800035c:	b084      	sub	sp, #16
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000368:	e00b      	b.n	8000382 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	6839      	ldr	r1, [r7, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffd9 	bl	8000328 <SerialOutputChar>
		counter++;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3301      	adds	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
		pt++;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1ef      	bne.n	800036a <SerialOutputString+0x10>
	}

	serial_port->completion_function(counter);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800038e:	68f8      	ldr	r0, [r7, #12]
 8000390:	4798      	blx	r3
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <SerialInputUntil>:

void SerialInputUntil(uint8_t *buffer, uint32_t max_length, char terminator, SerialPort *serial_port) {
 800039a:	b580      	push	{r7, lr}
 800039c:	b086      	sub	sp, #24
 800039e:	af00      	add	r7, sp, #0
 80003a0:	60f8      	str	r0, [r7, #12]
 80003a2:	60b9      	str	r1, [r7, #8]
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	4613      	mov	r3, r2
 80003a8:	71fb      	strb	r3, [r7, #7]

	uint32_t counter = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]

	while (counter < (max_length - 1)) {
 80003ae:	e017      	b.n	80003e0 <SerialInputUntil+0x46>

		// Wait until ready to receive
		while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {
 80003b0:	bf00      	nop
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f8      	beq.n	80003b2 <SerialInputUntil+0x18>
		}

		// Read a character from UART
		uint8_t data = serial_port->UART->RDR;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	74fb      	strb	r3, [r7, #19]

		// Stop if the terminator is reached
		if (data == terminator) {
 80003ca:	7cfa      	ldrb	r2, [r7, #19]
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d00c      	beq.n	80003ec <SerialInputUntil+0x52>
			break;
		}

		// Store the character into a buffer
		buffer[counter++] = data;
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	1c5a      	adds	r2, r3, #1
 80003d6:	617a      	str	r2, [r7, #20]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	4413      	add	r3, r2
 80003dc:	7cfa      	ldrb	r2, [r7, #19]
 80003de:	701a      	strb	r2, [r3, #0]
	while (counter < (max_length - 1)) {
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d3e2      	bcc.n	80003b0 <SerialInputUntil+0x16>
 80003ea:	e000      	b.n	80003ee <SerialInputUntil+0x54>
			break;
 80003ec:	bf00      	nop
	}

	// Adding null terminator,carriage return and new line
	buffer[counter] = '\0\r\n';
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	4413      	add	r3, r2
 80003f4:	220a      	movs	r2, #10
 80003f6:	701a      	strb	r2, [r3, #0]

	// Callback function
	serial_port->completion_function(counter);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003fc:	6978      	ldr	r0, [r7, #20]
 80003fe:	4798      	blx	r3
}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff fedb 	bl	80001f4 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800044c:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000450:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000454:	200000c4 	.word	0x200000c4

08000458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_2_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004c4 	.word	0x080004c4
 8000498:	080004c4 	.word	0x080004c4
 800049c:	080004c4 	.word	0x080004c4
 80004a0:	080004c8 	.word	0x080004c8

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
