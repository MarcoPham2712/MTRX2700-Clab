
UART_Task_b_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  0800057c  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  0800057c  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0000157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000580  08000580  00001580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08000584  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          00000084  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e0a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000047f  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000032e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000083  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001588e  00000000  00000000  00003423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001139  00000000  00000000  00018cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075c81  00000000  00000000  00019dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008fa6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a0  00000000  00000000  0008fab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0008fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000564 	.word	0x08000564

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000564 	.word	0x08000564

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <finished_transmission>:
// Counter to track length of string
uint8_t counter = 0;
// Terminating character
char terminator = '\r';

void finished_transmission(uint8_t *rx_string, uint32_t bytes_sent) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
    rx_string[bytes_sent] = '\0';  // Null terminate the string
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	4413      	add	r3, r2
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
    SerialOutputString(rx_string, &USART1_PORT);  // Print the string to the terminal
 8000278:	4903      	ldr	r1, [pc, #12]	@ (8000288 <finished_transmission+0x24>)
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f000 f901 	bl	8000482 <SerialOutputString>
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000004 	.word	0x20000004

0800028c <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    // Check if ready to receive
    if (USART1->ISR & USART_ISR_RXNE) {
 8000292:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <USART1_EXTI25_IRQHandler+0x64>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 0320 	and.w	r3, r3, #32
 800029a:	2b00      	cmp	r3, #0
 800029c:	d023      	beq.n	80002e6 <USART1_EXTI25_IRQHandler+0x5a>
        // Read the incoming character
        uint8_t data = USART1->RDR;
 800029e:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <USART1_EXTI25_IRQHandler+0x64>)
 80002a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	71fb      	strb	r3, [r7, #7]
        // Check for buffer overflow
        if (counter < sizeof(string) - 1) {
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b62      	cmp	r3, #98	@ 0x62
 80002ac:	d818      	bhi.n	80002e0 <USART1_EXTI25_IRQHandler+0x54>
            // Store the character and increment the counter
            string[counter++] = data;
 80002ae:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	b2d1      	uxtb	r1, r2
 80002b6:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002b8:	7011      	strb	r1, [r2, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <USART1_EXTI25_IRQHandler+0x6c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	5453      	strb	r3, [r2, r1]
            // Check for terminator
            if (data == terminator) {
 80002c2:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <USART1_EXTI25_IRQHandler+0x70>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d10c      	bne.n	80002e6 <USART1_EXTI25_IRQHandler+0x5a>
                // Call the callback function
                finished_transmission(string, counter);
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <USART1_EXTI25_IRQHandler+0x6c>)
 80002d4:	f7ff ffc6 	bl	8000264 <finished_transmission>
                // Reset counter for the next string
                counter = 0;
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
        } else {
            // Reset counter
            counter = 0;
        }
    }
}
 80002de:	e002      	b.n	80002e6 <USART1_EXTI25_IRQHandler+0x5a>
            counter = 0;
 80002e0:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <USART1_EXTI25_IRQHandler+0x68>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40013800 	.word	0x40013800
 80002f4:	200000ac 	.word	0x200000ac
 80002f8:	20000048 	.word	0x20000048
 80002fc:	20000000 	.word	0x20000000

08000300 <enable_interrupt>:
void enable_interrupt() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
    __disable_irq();  // Disable interrupts

    USART1->CR1 |= USART_CR1_RXNEIE;      // Enable RX interrupt
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <enable_interrupt+0x2c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a07      	ldr	r2, [pc, #28]	@ (800032c <enable_interrupt+0x2c>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(USART1_IRQn, 1);     // Set priority for USART1 interrupt
 8000314:	2101      	movs	r1, #1
 8000316:	2025      	movs	r0, #37	@ 0x25
 8000318:	f7ff ff7a 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);          // Enable USART1 interrupt in NVIC
 800031c:	2025      	movs	r0, #37	@ 0x25
 800031e:	f7ff ff59 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000322:	b662      	cpsie	i
}
 8000324:	bf00      	nop

    __enable_irq();   // Re-enable interrupts
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40013800 	.word	0x40013800

08000330 <main>:
#include "serial.h"
#include "interrupt.h"
#include "stm32f303xc.h"

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
    SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);  // Initialise USART1
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <main+0x18>)
 8000336:	4905      	ldr	r1, [pc, #20]	@ (800034c <main+0x1c>)
 8000338:	2004      	movs	r0, #4
 800033a:	f000 f809 	bl	8000350 <SerialInitialise>
    enable_interrupt();
 800033e:	f7ff ffdf 	bl	8000300 <enable_interrupt>

    for(;;); // Infinite loop
 8000342:	bf00      	nop
 8000344:	e7fd      	b.n	8000342 <main+0x12>
 8000346:	bf00      	nop
 8000348:	08000265 	.word	0x08000265
 800034c:	20000004 	.word	0x20000004

08000350 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint8_t *, uint32_t)) {
 8000350:	b480      	push	{r7}
 8000352:	b087      	sub	sp, #28
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000362:	4b3a      	ldr	r3, [pc, #232]	@ (800044c <SerialInitialise+0xfc>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a39      	ldr	r2, [pc, #228]	@ (800044c <SerialInitialise+0xfc>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800036e:	4b37      	ldr	r3, [pc, #220]	@ (800044c <SerialInitialise+0xfc>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a36      	ldr	r2, [pc, #216]	@ (800044c <SerialInitialise+0xfc>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	691a      	ldr	r2, [r3, #16]
 800037e:	4b33      	ldr	r3, [pc, #204]	@ (800044c <SerialInitialise+0xfc>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4932      	ldr	r1, [pc, #200]	@ (800044c <SerialInitialise+0xfc>)
 8000384:	4313      	orrs	r3, r2
 8000386:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	6952      	ldr	r2, [r2, #20]
 8000390:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	6992      	ldr	r2, [r2, #24]
 800039a:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	69d9      	ldr	r1, [r3, #28]
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	6a1a      	ldr	r2, [r3, #32]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	430a      	orrs	r2, r1
 80003ac:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	6a19      	ldr	r1, [r3, #32]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	4b21      	ldr	r3, [pc, #132]	@ (800044c <SerialInitialise+0xfc>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4920      	ldr	r1, [pc, #128]	@ (800044c <SerialInitialise+0xfc>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	4b1e      	ldr	r3, [pc, #120]	@ (800044c <SerialInitialise+0xfc>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	491d      	ldr	r1, [pc, #116]	@ (800044c <SerialInitialise+0xfc>)
 80003d8:	4313      	orrs	r3, r2
 80003da:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	330c      	adds	r3, #12
 80003e2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	d822      	bhi.n	8000430 <SerialInitialise+0xe0>
 80003ea:	a201      	add	r2, pc, #4	@ (adr r2, 80003f0 <SerialInitialise+0xa0>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	08000405 	.word	0x08000405
 80003f4:	0800040f 	.word	0x0800040f
 80003f8:	08000419 	.word	0x08000419
 80003fc:	08000421 	.word	0x08000421
 8000400:	08000429 	.word	0x08000429
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x341;  // 115200 at 8MHz
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	f240 3241 	movw	r2, #833	@ 0x341
 800040a:	801a      	strh	r2, [r3, #0]
		break;
 800040c:	e010      	b.n	8000430 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000414:	801a      	strh	r2, [r3, #0]
		break;
 8000416:	e00b      	b.n	8000430 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xD0;  // 115200 at 8MHz
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	22d0      	movs	r2, #208	@ 0xd0
 800041c:	801a      	strh	r2, [r3, #0]
		break;
 800041e:	e007      	b.n	8000430 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8B;  // 115200 at 8MHz
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	228b      	movs	r2, #139	@ 0x8b
 8000424:	801a      	strh	r2, [r3, #0]
		break;
 8000426:	e003      	b.n	8000430 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	2246      	movs	r2, #70	@ 0x46
 800042c:	801a      	strh	r2, [r3, #0]
		break;
 800042e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f042 020d 	orr.w	r2, r2, #13
 800043e:	601a      	str	r2, [r3, #0]
}
 8000440:	bf00      	nop
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000

08000450 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 800045c:	bf00      	nop
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f8      	beq.n	800045e <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	79fa      	ldrb	r2, [r7, #7]
 8000472:	b292      	uxth	r2, r2
 8000474:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
uint8_t counter = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]

while(*pt) {
 8000490:	e00b      	b.n	80004aa <SerialOutputString+0x28>
SerialOutputChar(*pt, serial_port);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffd9 	bl	8000450 <SerialOutputChar>
counter++;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3301      	adds	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
pt++;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
while(*pt) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1ef      	bne.n	8000492 <SerialOutputString+0x10>
}

serial_port->completion_function(pt, counter);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	4611      	mov	r1, r2
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	4798      	blx	r3
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c8:	480d      	ldr	r0, [pc, #52]	@ (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	@ (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f000 f811 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff ff19 	bl	8000330 <main>

080004fe <LoopForever>:

LoopForever:
  b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800050c:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 8000510:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000514:	200000b0 	.word	0x200000b0

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4d0d      	ldr	r5, [pc, #52]	@ (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	@ (8000558 <__libc_init_array+0x3c>)
 8000522:	1b64      	subs	r4, r4, r5
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2600      	movs	r6, #0
 8000528:	42a6      	cmp	r6, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4d0b      	ldr	r5, [pc, #44]	@ (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	@ (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1b64      	subs	r4, r4, r5
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2600      	movs	r6, #0
 800053a:	42a6      	cmp	r6, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f855 3b04 	ldr.w	r3, [r5], #4
 8000544:	4798      	blx	r3
 8000546:	3601      	adds	r6, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f855 3b04 	ldr.w	r3, [r5], #4
 800054e:	4798      	blx	r3
 8000550:	3601      	adds	r6, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
