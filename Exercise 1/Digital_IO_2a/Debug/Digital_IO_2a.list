
Digital_IO_2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000350  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004e4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004e4  080004e4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004e4  080004e4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004ec  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b46  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002f3  00000000  00000000  00002b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00002e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d88  00000000  00000000  00002f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b3a  00000000  00000000  00017d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072772  00000000  00000000  0001884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008afbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000190  00000000  00000000  0008b000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0008b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004cc 	.word	0x080004cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004cc 	.word	0x080004cc

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <DIO_EnableClocks>:
#include "stm32f303xc.h"

static uint8_t led_index = 0;
static uint8_t direction_up = 1;  // 1 = increment, 0 = decrement

void DIO_EnableClocks(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    // Enable GPIOA (button), GPIOE (LEDs), and SYSCFG (for interrupt config)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000268:	4b08      	ldr	r3, [pc, #32]	@ (800028c <DIO_EnableClocks+0x28>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a07      	ldr	r2, [pc, #28]	@ (800028c <DIO_EnableClocks+0x28>)
 800026e:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 8000272:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000274:	4b05      	ldr	r3, [pc, #20]	@ (800028c <DIO_EnableClocks+0x28>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a04      	ldr	r2, [pc, #16]	@ (800028c <DIO_EnableClocks+0x28>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6193      	str	r3, [r2, #24]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <DIO_InitialiseBoard>:

void DIO_InitialiseBoard(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
    // Set PE8–PE15 as output (MODER bits = 01 for each pin)
    // We do it all at once by writing 0x5555 to the upper half of the MODER register
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <DIO_InitialiseBoard+0x2c>)
 8000298:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002a0:	801a      	strh	r2, [r3, #0]

    // Clear all LEDs initially
    GPIOE->ODR &= ~(0xFF << 8);  // Clear bits 8–15
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <DIO_InitialiseBoard+0x30>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a06      	ldr	r2, [pc, #24]	@ (80002c0 <DIO_InitialiseBoard+0x30>)
 80002a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80002ac:	6153      	str	r3, [r2, #20]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	48001002 	.word	0x48001002
 80002c0:	48001000 	.word	0x48001000

080002c4 <DIO_EnableInterrupt>:

void DIO_EnableInterrupt(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
    __disable_irq();

    // Connect EXTI0 to PA0
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <DIO_EnableInterrupt+0x3c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]

    // Trigger interrupt on rising edge for EXTI0 (PA0)
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <DIO_EnableInterrupt+0x40>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <DIO_EnableInterrupt+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <DIO_EnableInterrupt+0x40>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <DIO_EnableInterrupt+0x40>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6013      	str	r3, [r2, #0]

    // Enable and prioritize EXTI0 in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002ea:	2101      	movs	r1, #1
 80002ec:	2006      	movs	r0, #6
 80002ee:	f7ff ff8f 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002f2:	2006      	movs	r0, #6
 80002f4:	f7ff ff6e 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002f8:	b662      	cpsie	i
}
 80002fa:	bf00      	nop

    __enable_irq();
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010000 	.word	0x40010000
 8000304:	40010400 	.word	0x40010400

08000308 <DIO_Init>:

void DIO_Init(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    DIO_EnableClocks();
 800030c:	f7ff ffaa 	bl	8000264 <DIO_EnableClocks>
    DIO_InitialiseBoard();
 8000310:	f7ff ffbe 	bl	8000290 <DIO_InitialiseBoard>
    DIO_EnableInterrupt();
 8000314:	f7ff ffd6 	bl	80002c4 <DIO_EnableInterrupt>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <DIO_ButtonInterruptHandler>:

void DIO_ButtonInterruptHandler(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
    DIO_UpdateLEDs();
 8000320:	f000 f80a 	bl	8000338 <DIO_UpdateLEDs>
    EXTI->PR |= EXTI_PR_PR0;
 8000324:	4b03      	ldr	r3, [pc, #12]	@ (8000334 <DIO_ButtonInterruptHandler+0x18>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a02      	ldr	r2, [pc, #8]	@ (8000334 <DIO_ButtonInterruptHandler+0x18>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6153      	str	r3, [r2, #20]
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010400 	.word	0x40010400

08000338 <DIO_UpdateLEDs>:

void DIO_UpdateLEDs(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    if (direction_up) {
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <DIO_UpdateLEDs+0xa4>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d023      	beq.n	800038c <DIO_UpdateLEDs+0x54>
        if (led_index < 8) {
 8000344:	4b26      	ldr	r3, [pc, #152]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b07      	cmp	r3, #7
 800034a:	d811      	bhi.n	8000370 <DIO_UpdateLEDs+0x38>
            GPIOE->ODR |= (1 << (8 + led_index));
 800034c:	4b25      	ldr	r3, [pc, #148]	@ (80003e4 <DIO_UpdateLEDs+0xac>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a23      	ldr	r2, [pc, #140]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000352:	7812      	ldrb	r2, [r2, #0]
 8000354:	3208      	adds	r2, #8
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a21      	ldr	r2, [pc, #132]	@ (80003e4 <DIO_UpdateLEDs+0xac>)
 8000360:	430b      	orrs	r3, r1
 8000362:	6153      	str	r3, [r2, #20]
            led_index++;
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 800036e:	701a      	strb	r2, [r3, #0]
        }
        if (led_index == 8) {
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b08      	cmp	r3, #8
 8000376:	d12b      	bne.n	80003d0 <DIO_UpdateLEDs+0x98>
            direction_up = 0;  // Flip direction only after all ON
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <DIO_UpdateLEDs+0xa4>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
            led_index--;       // Immediately prepare to turn one OFF
 800037e:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 8000388:	701a      	strb	r2, [r3, #0]
        }
        if (led_index == 0) {
            direction_up = 1; // Flip direction only after all OFF
        }
    }
}
 800038a:	e021      	b.n	80003d0 <DIO_UpdateLEDs+0x98>
        if (led_index < 8) {  // Safety check: led_index must stay in range 0–7
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b07      	cmp	r3, #7
 8000392:	d80c      	bhi.n	80003ae <DIO_UpdateLEDs+0x76>
            GPIOE->ODR &= ~(1 << (8 + led_index));
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <DIO_UpdateLEDs+0xac>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 800039a:	7812      	ldrb	r2, [r2, #0]
 800039c:	3208      	adds	r2, #8
 800039e:	2101      	movs	r1, #1
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <DIO_UpdateLEDs+0xac>)
 80003aa:	400b      	ands	r3, r1
 80003ac:	6153      	str	r3, [r2, #20]
        if (led_index > 0) {
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d005      	beq.n	80003c2 <DIO_UpdateLEDs+0x8a>
            led_index--;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 80003c0:	701a      	strb	r2, [r3, #0]
        if (led_index == 0) {
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <DIO_UpdateLEDs+0xa8>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d102      	bne.n	80003d0 <DIO_UpdateLEDs+0x98>
            direction_up = 1; // Flip direction only after all OFF
 80003ca:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <DIO_UpdateLEDs+0xa4>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000020 	.word	0x20000020
 80003e4:	48001000 	.word	0x48001000

080003e8 <EXTI0_IRQHandler>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*on_button_press)() = 0x00;

void EXTI0_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <EXTI0_IRQHandler+0x24>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <EXTI0_IRQHandler+0x12>
		on_button_press();
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <EXTI0_IRQHandler+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 80003fa:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <EXTI0_IRQHandler+0x28>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <EXTI0_IRQHandler+0x28>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6153      	str	r3, [r2, #20]
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000024 	.word	0x20000024
 8000410:	40010400 	.word	0x40010400

08000414 <main>:



int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	DIO_Init();
 8000418:	f7ff ff76 	bl	8000308 <DIO_Init>
	on_button_press = &DIO_ButtonInterruptHandler;
 800041c:	4b02      	ldr	r3, [pc, #8]	@ (8000428 <main+0x14>)
 800041e:	4a03      	ldr	r2, [pc, #12]	@ (800042c <main+0x18>)
 8000420:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;) {}
 8000422:	bf00      	nop
 8000424:	e7fd      	b.n	8000422 <main+0xe>
 8000426:	bf00      	nop
 8000428:	20000024 	.word	0x20000024
 800042c:	0800031d 	.word	0x0800031d

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 f811 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff ffd7 	bl	8000414 <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000474:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000478:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800047c:	20000028 	.word	0x20000028

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	4d0d      	ldr	r5, [pc, #52]	@ (80004bc <__libc_init_array+0x38>)
 8000488:	4c0d      	ldr	r4, [pc, #52]	@ (80004c0 <__libc_init_array+0x3c>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	2600      	movs	r6, #0
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	4d0b      	ldr	r5, [pc, #44]	@ (80004c4 <__libc_init_array+0x40>)
 8000496:	4c0c      	ldr	r4, [pc, #48]	@ (80004c8 <__libc_init_array+0x44>)
 8000498:	f000 f818 	bl	80004cc <_init>
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	2600      	movs	r6, #0
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
