
Integration_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08001d20  08001d20  00002d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f44  08001f44  00003088  2**0
                  CONTENTS
  4 .ARM          00000008  08001f44  08001f44  00002f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f4c  08001f4c  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f50  08001f50  00002f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08001f54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003088  2**0
                  CONTENTS
 10 .bss          000002a4  20000088  20000088  00003088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00003088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000026c0  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a31  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  000061b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000162  00000000  00000000  000063b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d92  00000000  00000000  0000651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a4c  00000000  00000000  0001d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078560  00000000  00000000  0001fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00098258  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001094  00000000  00000000  0009829c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00099330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d08 	.word	0x08001d08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08001d08 	.word	0x08001d08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <TIM2_IRQHandler>:

// Function pointer for when interrupt occurs
void (*on_button_press)() = 0x00;

void TIM2_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    // Check if the update interrupt flag is set
    if ((TIM2->SR & TIM_SR_UIF) != 0){
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d00a      	beq.n	80002d8 <TIM2_IRQHandler+0x28>
        TIM2->SR &= ~TIM_SR_UIF;   // Clear the interrupt flag
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	6113      	str	r3, [r2, #16]

        // Call function pointer
        on_button_press();
 80002d2:	4b02      	ldr	r3, [pc, #8]	@ (80002dc <TIM2_IRQHandler+0x2c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4798      	blx	r3
    }
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000a4 	.word	0x200000a4

080002e0 <led_chase_direction>:

// Function to decide which LED pattern to use
void led_chase_direction(char direction)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
    switch (direction) {
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b61      	cmp	r3, #97	@ 0x61
 80002ee:	d005      	beq.n	80002fc <led_chase_direction+0x1c>
 80002f0:	2b63      	cmp	r3, #99	@ 0x63
 80002f2:	d107      	bne.n	8000304 <led_chase_direction+0x24>
        case 'c':
            on_button_press = &chase_led_c;  // Assign clockwise LED shift
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <led_chase_direction+0x30>)
 80002f6:	4a07      	ldr	r2, [pc, #28]	@ (8000314 <led_chase_direction+0x34>)
 80002f8:	601a      	str	r2, [r3, #0]
            break;
 80002fa:	e003      	b.n	8000304 <led_chase_direction+0x24>
        case 'a':
            on_button_press = &chase_led_a;  // Assign blinking
 80002fc:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <led_chase_direction+0x30>)
 80002fe:	4a06      	ldr	r2, [pc, #24]	@ (8000318 <led_chase_direction+0x38>)
 8000300:	601a      	str	r2, [r3, #0]
            break;
 8000302:	bf00      	nop
    }
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	200000a4 	.word	0x200000a4
 8000314:	0800031d 	.word	0x0800031d
 8000318:	08000351 	.word	0x08000351

0800031c <chase_led_c>:

void chase_led_c()
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
    // Setting LED pins
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <chase_led_c+0x30>)
 8000324:	607b      	str	r3, [r7, #4]

    *led_register <<= 1;  // Shift LEDs by 1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	701a      	strb	r2, [r3, #0]

    // If all LEDs are off then turn the first on
    if (*led_register == 0) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d102      	bne.n	8000340 <chase_led_c+0x24>
        *led_register = 1;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
    }
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	48001015 	.word	0x48001015

08000350 <chase_led_a>:

void chase_led_a()
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000356:	4b09      	ldr	r3, [pc, #36]	@ (800037c <chase_led_a+0x2c>)
 8000358:	607b      	str	r3, [r7, #4]

    if (*led_register != 0){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d003      	beq.n	800036a <chase_led_a+0x1a>
        *led_register = 0;       // If any LED is on, turn all off
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
    }
    else{
        *led_register = 0xFF;    // If all LEDs are off, turn all on
    }
}
 8000368:	e002      	b.n	8000370 <chase_led_a+0x20>
        *led_register = 0xFF;    // If all LEDs are off, turn all on
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	22ff      	movs	r2, #255	@ 0xff
 800036e:	701a      	strb	r2, [r3, #0]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	48001015 	.word	0x48001015

08000380 <finished_transmission>:
extern uint8_t transmit_index;
extern uint8_t transmit_length;
extern uint8_t is_transmitting;		// Transmit mode

// Callback function when string is received
void finished_transmission(uint8_t *user_buffer, uint32_t message_length) {
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
    user_buffer[message_length] = '\0';  // Null terminate the received string
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	4413      	add	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]

    // Extract the command
    char *command = strtok((char*)user_buffer, " ");
 8000394:	4934      	ldr	r1, [pc, #208]	@ (8000468 <finished_transmission+0xe8>)
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 fd72 	bl	8000e80 <strtok>
 800039c:	60f8      	str	r0, [r7, #12]
    char *operand = strtok(0x00, "");  // Next token is the operand
 800039e:	4933      	ldr	r1, [pc, #204]	@ (800046c <finished_transmission+0xec>)
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fd6d 	bl	8000e80 <strtok>
 80003a6:	60b8      	str	r0, [r7, #8]

    // Decide which command
    if (command) {
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d058      	beq.n	8000460 <finished_transmission+0xe0>
        // Compare the command and call right function
        if (strcmp(command, "led") == 0 && operand) {
 80003ae:	4930      	ldr	r1, [pc, #192]	@ (8000470 <finished_transmission+0xf0>)
 80003b0:	68f8      	ldr	r0, [r7, #12]
 80003b2:	f7ff ff1d 	bl	80001f0 <strcmp>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d106      	bne.n	80003ca <finished_transmission+0x4a>
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d003      	beq.n	80003ca <finished_transmission+0x4a>
            led_command(operand);
 80003c2:	68b8      	ldr	r0, [r7, #8]
 80003c4:	f000 f868 	bl	8000498 <led_command>
 80003c8:	e04a      	b.n	8000460 <finished_transmission+0xe0>
        } else if (strcmp(command, "serial") == 0 && operand) {
 80003ca:	492a      	ldr	r1, [pc, #168]	@ (8000474 <finished_transmission+0xf4>)
 80003cc:	68f8      	ldr	r0, [r7, #12]
 80003ce:	f7ff ff0f 	bl	80001f0 <strcmp>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <finished_transmission+0x66>
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d003      	beq.n	80003e6 <finished_transmission+0x66>
            serial_command(operand);
 80003de:	68b8      	ldr	r0, [r7, #8]
 80003e0:	f000 f878 	bl	80004d4 <serial_command>
 80003e4:	e03c      	b.n	8000460 <finished_transmission+0xe0>
        } else if (strcmp(command, "oneshot") == 0 && operand) {
 80003e6:	4924      	ldr	r1, [pc, #144]	@ (8000478 <finished_transmission+0xf8>)
 80003e8:	68f8      	ldr	r0, [r7, #12]
 80003ea:	f7ff ff01 	bl	80001f0 <strcmp>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d106      	bne.n	8000402 <finished_transmission+0x82>
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d003      	beq.n	8000402 <finished_transmission+0x82>
            oneshot_command(operand);
 80003fa:	68b8      	ldr	r0, [r7, #8]
 80003fc:	f000 f8a2 	bl	8000544 <oneshot_command>
 8000400:	e02e      	b.n	8000460 <finished_transmission+0xe0>
        } else if (strcmp(command, "timer") == 0 && operand) {
 8000402:	491e      	ldr	r1, [pc, #120]	@ (800047c <finished_transmission+0xfc>)
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f7ff fef3 	bl	80001f0 <strcmp>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d106      	bne.n	800041e <finished_transmission+0x9e>
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d003      	beq.n	800041e <finished_transmission+0x9e>
            timer_command(operand);
 8000416:	68b8      	ldr	r0, [r7, #8]
 8000418:	f000 f8b8 	bl	800058c <timer_command>
 800041c:	e020      	b.n	8000460 <finished_transmission+0xe0>
        } else {
            // If it isn't a proper command, prompt to try again
            strcpy((char*)transmit_buffer, "Invalid input! Try Again.\r\n");
 800041e:	4a18      	ldr	r2, [pc, #96]	@ (8000480 <finished_transmission+0x100>)
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <finished_transmission+0x104>)
 8000422:	4615      	mov	r5, r2
 8000424:	461c      	mov	r4, r3
 8000426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000428:	6028      	str	r0, [r5, #0]
 800042a:	6069      	str	r1, [r5, #4]
 800042c:	60aa      	str	r2, [r5, #8]
 800042e:	60eb      	str	r3, [r5, #12]
 8000430:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000432:	6128      	str	r0, [r5, #16]
 8000434:	6169      	str	r1, [r5, #20]
 8000436:	61aa      	str	r2, [r5, #24]
            transmit_length = strlen((char*)transmit_buffer);
 8000438:	4811      	ldr	r0, [pc, #68]	@ (8000480 <finished_transmission+0x100>)
 800043a:	f7ff fed1 	bl	80001e0 <strlen>
 800043e:	4603      	mov	r3, r0
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <finished_transmission+0x108>)
 8000444:	701a      	strb	r2, [r3, #0]
            transmit_index = 0;
 8000446:	4b11      	ldr	r3, [pc, #68]	@ (800048c <finished_transmission+0x10c>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
            is_transmitting = 1;			 // Set transmit mode
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <finished_transmission+0x110>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
            USART1->CR1 |= USART_CR1_TXEIE;  // Enable transmit interrupt
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <finished_transmission+0x114>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <finished_transmission+0x114>)
 8000458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800045c:	6013      	str	r3, [r2, #0]
        }
    }
}
 800045e:	e7ff      	b.n	8000460 <finished_transmission+0xe0>
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bdb0      	pop	{r4, r5, r7, pc}
 8000468:	08001d20 	.word	0x08001d20
 800046c:	08001d24 	.word	0x08001d24
 8000470:	08001d28 	.word	0x08001d28
 8000474:	08001d2c 	.word	0x08001d2c
 8000478:	08001d34 	.word	0x08001d34
 800047c:	08001d3c 	.word	0x08001d3c
 8000480:	20000174 	.word	0x20000174
 8000484:	08001d44 	.word	0x08001d44
 8000488:	200001d9 	.word	0x200001d9
 800048c:	200001d8 	.word	0x200001d8
 8000490:	200001da 	.word	0x200001da
 8000494:	40013800 	.word	0x40013800

08000498 <led_command>:

void led_command(char *operand) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    TIM2->CR1 &= ~TIM_CR1_CEN;  // Disable Timer 2 to stop interrupts
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004aa:	f023 0301 	bic.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;  // Set LED pins
 80004b0:	4b07      	ldr	r3, [pc, #28]	@ (80004d0 <led_command+0x38>)
 80004b2:	60fb      	str	r3, [r7, #12]
    uint8_t value = (uint8_t)strtol(operand, 0x00, 2);      // Convert binary string to number
 80004b4:	2202      	movs	r2, #2
 80004b6:	2100      	movs	r1, #0
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 fcb9 	bl	8000e30 <strtol>
 80004be:	4603      	mov	r3, r0
 80004c0:	72fb      	strb	r3, [r7, #11]
    *led_register = value;  // Output the value to LEDs
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	7afa      	ldrb	r2, [r7, #11]
 80004c6:	701a      	strb	r2, [r3, #0]
}
 80004c8:	bf00      	nop
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	48001015 	.word	0x48001015

080004d4 <serial_command>:

void serial_command(char *operand) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    TIM2->CR1 &= ~TIM_CR1_CEN;  // Disable Timer 2 to stop interrupts
 80004dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <serial_command+0x58>)
 80004ee:	60fb      	str	r3, [r7, #12]
    *led_register = 0;  // Turn off all LEDs before sending
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]

    strcpy((char*)transmit_buffer, operand);      // Copy operand to transmit buffer
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <serial_command+0x5c>)
 80004fa:	f000 fd52 	bl	8000fa2 <strcpy>
    transmit_length = strlen(operand);            // Set the number of characters to send
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff fe6e 	bl	80001e0 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <serial_command+0x60>)
 800050a:	701a      	strb	r2, [r3, #0]
    transmit_index = 0;
 800050c:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <serial_command+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
    is_transmitting = 1;
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <serial_command+0x68>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_TXEIE;               // Enable transmit interrupt
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <serial_command+0x6c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <serial_command+0x6c>)
 800051e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48001015 	.word	0x48001015
 8000530:	20000174 	.word	0x20000174
 8000534:	200001d9 	.word	0x200001d9
 8000538:	200001d8 	.word	0x200001d8
 800053c:	200001da 	.word	0x200001da
 8000540:	40013800 	.word	0x40013800

08000544 <oneshot_command>:

void oneshot_command(char *operand){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <oneshot_command+0x44>)
 800054e:	60fb      	str	r3, [r7, #12]
    *led_register = 0xFF;  // Turn on all LEDs
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	22ff      	movs	r2, #255	@ 0xff
 8000554:	701a      	strb	r2, [r3, #0]

    // Convert the operand to a decimal number
    uint32_t arr_value = (uint32_t)strtol(operand, 0x00, 10);
 8000556:	220a      	movs	r2, #10
 8000558:	2100      	movs	r1, #0
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 fc68 	bl	8000e30 <strtol>
 8000560:	4603      	mov	r3, r0
 8000562:	60bb      	str	r3, [r7, #8]

    enable_timers(arr_value);        // Setup timer
 8000564:	68b8      	ldr	r0, [r7, #8]
 8000566:	f000 f8f5 	bl	8000754 <enable_timers>
    TIM2->CR1 |= TIM_CR1_OPM;        // Enable one-pulse mode
 800056a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6013      	str	r3, [r2, #0]
    led_chase_direction('a');        // Flash LED pattern
 800057a:	2061      	movs	r0, #97	@ 0x61
 800057c:	f7ff feb0 	bl	80002e0 <led_chase_direction>
}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	48001015 	.word	0x48001015

0800058c <timer_command>:

void timer_command(char *operand){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <timer_command+0x34>)
 8000596:	60fb      	str	r3, [r7, #12]
    *led_register = 1;  // Turn on first LED
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]

    // Convert string to decimal number
    uint32_t arr_value = (uint32_t)strtol(operand, 0x00, 10);
 800059e:	220a      	movs	r2, #10
 80005a0:	2100      	movs	r1, #0
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 fc44 	bl	8000e30 <strtol>
 80005a8:	4603      	mov	r3, r0
 80005aa:	60bb      	str	r3, [r7, #8]
    enable_timers(arr_value);        // Set auto reload value
 80005ac:	68b8      	ldr	r0, [r7, #8]
 80005ae:	f000 f8d1 	bl	8000754 <enable_timers>
    led_chase_direction('c');        // Set LED pattern
 80005b2:	2063      	movs	r0, #99	@ 0x63
 80005b4:	f7ff fe94 	bl	80002e0 <led_chase_direction>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	48001015 	.word	0x48001015

080005c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db0b      	blt.n	80005ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 021f 	and.w	r2, r3, #31
 80005dc:	4907      	ldr	r1, [pc, #28]	@ (80005fc <__NVIC_EnableIRQ+0x38>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	@ (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	@ (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <USART1_EXTI25_IRQHandler>:
uint8_t transmit_buffer[MESSAGE_LENGTH];   // Holds outgoing data
uint8_t transmit_index = 0;                // Current sending position
uint8_t transmit_length = 0;               // Total length of the outgoing message
uint8_t is_transmitting = 0;               // Flag to indicate transmission is active

void USART1_EXTI25_IRQHandler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
    // If data is available to read
    if (USART1->ISR & USART_ISR_RXNE) {
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	2b00      	cmp	r3, #0
 8000664:	d03a      	beq.n	80006dc <USART1_EXTI25_IRQHandler+0x88>
        uint8_t incoming_byte = USART1->RDR;  // Read the received character
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 8000668:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800066a:	b29b      	uxth	r3, r3
 800066c:	71fb      	strb	r3, [r7, #7]

        // Check if there's space left in the buffer
        if (kernel_index < MESSAGE_LENGTH - 1) {
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b62      	cmp	r3, #98	@ 0x62
 8000674:	d82f      	bhi.n	80006d6 <USART1_EXTI25_IRQHandler+0x82>
            kernel_buffer[active_kernel][kernel_index++] = incoming_byte;  // Store the character
 8000676:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <USART1_EXTI25_IRQHandler+0xe4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 8000686:	7011      	strb	r1, [r2, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	4a2c      	ldr	r2, [pc, #176]	@ (800073c <USART1_EXTI25_IRQHandler+0xe8>)
 800068c:	2364      	movs	r3, #100	@ 0x64
 800068e:	fb00 f303 	mul.w	r3, r0, r3
 8000692:	4413      	add	r3, r2
 8000694:	440b      	add	r3, r1
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	701a      	strb	r2, [r3, #0]

            // Check for terminator
            if (incoming_byte == message_terminator) {
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <USART1_EXTI25_IRQHandler+0xec>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d11b      	bne.n	80006dc <USART1_EXTI25_IRQHandler+0x88>
                finished_transmission(kernel_buffer[active_kernel], kernel_index);  // Callback function
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <USART1_EXTI25_IRQHandler+0xe4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	4a22      	ldr	r2, [pc, #136]	@ (800073c <USART1_EXTI25_IRQHandler+0xe8>)
 80006b2:	4413      	add	r3, r2
 80006b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe60 	bl	8000380 <finished_transmission>
                active_kernel ^= 1;     // Swap to the other buffer
 80006c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <USART1_EXTI25_IRQHandler+0xe4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <USART1_EXTI25_IRQHandler+0xe4>)
 80006cc:	701a      	strb	r2, [r3, #0]
                kernel_index = 0;       // Reset buffer index for next message
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	e002      	b.n	80006dc <USART1_EXTI25_IRQHandler+0x88>
            }
        } else {
            kernel_index = 0;  // Reset if buffer overflows
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <USART1_EXTI25_IRQHandler+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
        }
    }

    // If ready to transmit data
    if ((USART1->ISR & USART_ISR_TXE) && is_transmitting) {
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01e      	beq.n	8000726 <USART1_EXTI25_IRQHandler+0xd2>
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <USART1_EXTI25_IRQHandler+0xf0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d01a      	beq.n	8000726 <USART1_EXTI25_IRQHandler+0xd2>
        if (transmit_index < transmit_length) {
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <USART1_EXTI25_IRQHandler+0xf4>)
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <USART1_EXTI25_IRQHandler+0xf8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d20b      	bcs.n	8000714 <USART1_EXTI25_IRQHandler+0xc0>
            USART1->TDR = transmit_buffer[transmit_index++];  // Send next character
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <USART1_EXTI25_IRQHandler+0xf4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	b2d1      	uxtb	r1, r2
 8000704:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <USART1_EXTI25_IRQHandler+0xf4>)
 8000706:	7011      	strb	r1, [r2, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <USART1_EXTI25_IRQHandler+0xfc>)
 800070c:	5c9a      	ldrb	r2, [r3, r2]
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 8000710:	851a      	strh	r2, [r3, #40]	@ 0x28
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Disable TX interrupt when done
            is_transmitting = 0;              // Disable transmit
        }
    }
}
 8000712:	e008      	b.n	8000726 <USART1_EXTI25_IRQHandler+0xd2>
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Disable TX interrupt when done
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <USART1_EXTI25_IRQHandler+0xdc>)
 800071a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800071e:	6013      	str	r3, [r2, #0]
            is_transmitting = 0;              // Disable transmit
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <USART1_EXTI25_IRQHandler+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013800 	.word	0x40013800
 8000734:	20000171 	.word	0x20000171
 8000738:	20000170 	.word	0x20000170
 800073c:	200000a8 	.word	0x200000a8
 8000740:	20000000 	.word	0x20000000
 8000744:	200001da 	.word	0x200001da
 8000748:	200001d8 	.word	0x200001d8
 800074c:	200001d9 	.word	0x200001d9
 8000750:	20000174 	.word	0x20000174

08000754 <enable_timers>:

void enable_timers(uint32_t delay_us) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
    __disable_irq();  // Temporarily disable global interrupts

    // Enable the clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000760:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <enable_timers+0x94>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <enable_timers+0x94>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	61d3      	str	r3, [r2, #28]

    // Reset timer settings
    TIM2->CR1 = 0;
 800076c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
    TIM2->DIER = 0;
 8000774:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    TIM2->SR = 0;     // Clear all timer interrupt flags
 800077c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
    TIM2->CNT = 0;    // Reset the counter
 8000784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->PSC = 7999;     // 8 MHz / (7999 + 1) = 1 ms tick
 800078c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000790:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_us; // Number of ticks to wait
 8000796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Force update event to set ARR value
    TIM2->EGR = TIM_EGR_UG;
 800079e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a2:	2201      	movs	r2, #1
 80007a4:	615a      	str	r2, [r3, #20]

    // Clear interrupts
    TIM2->SR &= ~TIM_SR_UIF;
 80007a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	6113      	str	r3, [r2, #16]

    // Enable timer update interrupt
    TIM2->DIER = TIM_DIER_UIE;
 80007b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ba:	2201      	movs	r2, #1
 80007bc:	60da      	str	r2, [r3, #12]

    NVIC_SetPriority(TIM2_IRQn, 2);     // Set interrupt priority
 80007be:	2102      	movs	r1, #2
 80007c0:	201c      	movs	r0, #28
 80007c2:	f7ff ff1d 	bl	8000600 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);          // Enable TIM2 interrupt in NVIC
 80007c6:	201c      	movs	r0, #28
 80007c8:	f7ff fefc 	bl	80005c4 <__NVIC_EnableIRQ>

    // Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 80007cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007dc:	b662      	cpsie	i
}
 80007de:	bf00      	nop

    __enable_irq();  // Re-enable global interrupts
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <main>:
#include "commands.h"



int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    enable_clocks();	// Enable peripherals
 80007f0:	f000 f8d6 	bl	80009a0 <enable_clocks>
    initialise_board();	// Initialise board
 80007f4:	f000 f8e4 	bl	80009c0 <initialise_board>
    SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);	// Set USART1
 80007f8:	2200      	movs	r2, #0
 80007fa:	4904      	ldr	r1, [pc, #16]	@ (800080c <main+0x20>)
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 f84f 	bl	80008a0 <SerialInitialise>
    enable_interrupt();	// Enable interrupts
 8000802:	f000 f8ef 	bl	80009e4 <enable_interrupt>

    for (;;);
 8000806:	bf00      	nop
 8000808:	e7fd      	b.n	8000806 <main+0x1a>
 800080a:	bf00      	nop
 800080c:	20000004 	.word	0x20000004

08000810 <__NVIC_EnableIRQ>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008b2:	4b3a      	ldr	r3, [pc, #232]	@ (800099c <SerialInitialise+0xfc>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a39      	ldr	r2, [pc, #228]	@ (800099c <SerialInitialise+0xfc>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80008be:	4b37      	ldr	r3, [pc, #220]	@ (800099c <SerialInitialise+0xfc>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a36      	ldr	r2, [pc, #216]	@ (800099c <SerialInitialise+0xfc>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <SerialInitialise+0xfc>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4932      	ldr	r1, [pc, #200]	@ (800099c <SerialInitialise+0xfc>)
 80008d4:	4313      	orrs	r3, r2
 80008d6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	6952      	ldr	r2, [r2, #20]
 80008e0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	6992      	ldr	r2, [r2, #24]
 80008ea:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	69d9      	ldr	r1, [r3, #28]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	6a1a      	ldr	r2, [r3, #32]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	6a19      	ldr	r1, [r3, #32]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	430a      	orrs	r2, r1
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SerialInitialise+0xfc>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4920      	ldr	r1, [pc, #128]	@ (800099c <SerialInitialise+0xfc>)
 800091a:	4313      	orrs	r3, r2
 800091c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <SerialInitialise+0xfc>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	491d      	ldr	r1, [pc, #116]	@ (800099c <SerialInitialise+0xfc>)
 8000928:	4313      	orrs	r3, r2
 800092a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	330c      	adds	r3, #12
 8000932:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d822      	bhi.n	8000980 <SerialInitialise+0xe0>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <SerialInitialise+0xa0>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095f 	.word	0x0800095f
 8000948:	08000969 	.word	0x08000969
 800094c:	08000971 	.word	0x08000971
 8000950:	08000979 	.word	0x08000979
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x341;  // 115200 at 8MHz
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f240 3241 	movw	r2, #833	@ 0x341
 800095a:	801a      	strh	r2, [r3, #0]
		break;
 800095c:	e010      	b.n	8000980 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1A1;  // 115200 at 8MHz
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000964:	801a      	strh	r2, [r3, #0]
		break;
 8000966:	e00b      	b.n	8000980 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xD0;  // 115200 at 8MHz
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	22d0      	movs	r2, #208	@ 0xd0
 800096c:	801a      	strh	r2, [r3, #0]
		break;
 800096e:	e007      	b.n	8000980 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8B;  // 115200 at 8MHz
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	228b      	movs	r2, #139	@ 0x8b
 8000974:	801a      	strh	r2, [r3, #0]
		break;
 8000976:	e003      	b.n	8000980 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2246      	movs	r2, #70	@ 0x46
 800097c:	801a      	strh	r2, [r3, #0]
		break;
 800097e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f042 020d 	orr.w	r2, r2, #13
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000

080009a0 <enable_clocks>:


void enable_clocks() {
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <enable_clocks+0x1c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <enable_clocks+0x1c>)
 80009aa:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80009ae:	6153      	str	r3, [r2, #20]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <initialise_board>:
// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <initialise_board+0x20>)
 80009c8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80009d0:	801a      	strh	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	48001002 	.word	0x48001002

080009e4 <enable_interrupt>:

void enable_interrupt() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
    __disable_irq();  // Disable interrupts

    USART1->CR1 |= USART_CR1_RXNEIE;      // Enable RX interrupt
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <enable_interrupt+0x2c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <enable_interrupt+0x2c>)
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(USART1_IRQn, 1);     // Set priority for USART1 interrupt
 80009f8:	2101      	movs	r1, #1
 80009fa:	2025      	movs	r0, #37	@ 0x25
 80009fc:	f7ff ff26 	bl	800084c <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);          // Enable USART1 interrupt in NVIC
 8000a00:	2025      	movs	r0, #37	@ 0x25
 8000a02:	f7ff ff05 	bl	8000810 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a06:	b662      	cpsie	i
}
 8000a08:	bf00      	nop

    __enable_irq();   // Re-enable interrupts
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40013800 	.word	0x40013800

08000a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return 1;
 8000a18:	2301      	movs	r3, #1
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_kill>:

int _kill(int pid, int sig)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a2e:	f000 fa8b 	bl	8000f48 <__errno>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2216      	movs	r2, #22
 8000a36:	601a      	str	r2, [r3, #0]
	return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_exit>:

void _exit (int status)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ffe7 	bl	8000a24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a56:	bf00      	nop
 8000a58:	e7fd      	b.n	8000a56 <_exit+0x12>

08000a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	e00a      	b.n	8000a82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6c:	f3af 8000 	nop.w
 8000a70:	4601      	mov	r1, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	60ba      	str	r2, [r7, #8]
 8000a78:	b2ca      	uxtb	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf0      	blt.n	8000a6c <_read+0x12>
	}

return len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e009      	b.n	8000aba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	dbf1      	blt.n	8000aa6 <_write+0x12>
	}
	return len;
 8000ac2:	687b      	ldr	r3, [r7, #4]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_close>:

int _close(int file)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af4:	605a      	str	r2, [r3, #4]
	return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_isatty>:

int _isatty(int file)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f000 f9f0 	bl	8000f48 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000a000 	.word	0x2000a000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	200001dc 	.word	0x200001dc
 8000b9c:	20000330 	.word	0x20000330

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bce:	f000 f9c1 	bl	8000f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fe0b 	bl	80007ec <main>

08000bd6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000be4:	08001f54 	.word	0x08001f54
  ldr r2, =_sbss
 8000be8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000bec:	2000032c 	.word	0x2000032c

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <std>:
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8000bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c02:	6083      	str	r3, [r0, #8]
 8000c04:	8181      	strh	r1, [r0, #12]
 8000c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8000c08:	81c2      	strh	r2, [r0, #14]
 8000c0a:	6183      	str	r3, [r0, #24]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2208      	movs	r2, #8
 8000c10:	305c      	adds	r0, #92	@ 0x5c
 8000c12:	f000 f991 	bl	8000f38 <memset>
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <std+0x58>)
 8000c18:	6263      	str	r3, [r4, #36]	@ 0x24
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <std+0x5c>)
 8000c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <std+0x60>)
 8000c20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <std+0x64>)
 8000c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <std+0x68>)
 8000c28:	6224      	str	r4, [r4, #32]
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	d006      	beq.n	8000c3c <std+0x48>
 8000c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c32:	4294      	cmp	r4, r2
 8000c34:	d002      	beq.n	8000c3c <std+0x48>
 8000c36:	33d0      	adds	r3, #208	@ 0xd0
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	d105      	bne.n	8000c48 <std+0x54>
 8000c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c44:	f000 b9aa 	b.w	8000f9c <__retarget_lock_init_recursive>
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	bf00      	nop
 8000c4c:	080012b5 	.word	0x080012b5
 8000c50:	080012d7 	.word	0x080012d7
 8000c54:	0800130f 	.word	0x0800130f
 8000c58:	08001333 	.word	0x08001333
 8000c5c:	200001e0 	.word	0x200001e0

08000c60 <stdio_exit_handler>:
 8000c60:	4a02      	ldr	r2, [pc, #8]	@ (8000c6c <stdio_exit_handler+0xc>)
 8000c62:	4903      	ldr	r1, [pc, #12]	@ (8000c70 <stdio_exit_handler+0x10>)
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <stdio_exit_handler+0x14>)
 8000c66:	f000 b8ed 	b.w	8000e44 <_fwalk_sglue>
 8000c6a:	bf00      	nop
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	0800124d 	.word	0x0800124d
 8000c74:	2000003c 	.word	0x2000003c

08000c78 <cleanup_stdio>:
 8000c78:	6841      	ldr	r1, [r0, #4]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <cleanup_stdio+0x34>)
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	4604      	mov	r4, r0
 8000c82:	d001      	beq.n	8000c88 <cleanup_stdio+0x10>
 8000c84:	f000 fae2 	bl	800124c <_fflush_r>
 8000c88:	68a1      	ldr	r1, [r4, #8]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <cleanup_stdio+0x38>)
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	d002      	beq.n	8000c96 <cleanup_stdio+0x1e>
 8000c90:	4620      	mov	r0, r4
 8000c92:	f000 fadb 	bl	800124c <_fflush_r>
 8000c96:	68e1      	ldr	r1, [r4, #12]
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <cleanup_stdio+0x3c>)
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d004      	beq.n	8000ca8 <cleanup_stdio+0x30>
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca4:	f000 bad2 	b.w	800124c <_fflush_r>
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	bf00      	nop
 8000cac:	200001e0 	.word	0x200001e0
 8000cb0:	20000248 	.word	0x20000248
 8000cb4:	200002b0 	.word	0x200002b0

08000cb8 <global_stdio_init.part.0>:
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <global_stdio_init.part.0+0x30>)
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8000cec <global_stdio_init.part.0+0x34>)
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <global_stdio_init.part.0+0x38>)
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	f7ff ff94 	bl	8000bf4 <std>
 8000ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2109      	movs	r1, #9
 8000cd4:	f7ff ff8e 	bl	8000bf4 <std>
 8000cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000cdc:	2202      	movs	r2, #2
 8000cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ce2:	2112      	movs	r1, #18
 8000ce4:	f7ff bf86 	b.w	8000bf4 <std>
 8000ce8:	20000318 	.word	0x20000318
 8000cec:	200001e0 	.word	0x200001e0
 8000cf0:	08000c61 	.word	0x08000c61

08000cf4 <__sfp_lock_acquire>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	@ (8000cfc <__sfp_lock_acquire+0x8>)
 8000cf6:	f000 b952 	b.w	8000f9e <__retarget_lock_acquire_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	2000031d 	.word	0x2000031d

08000d00 <__sfp_lock_release>:
 8000d00:	4801      	ldr	r0, [pc, #4]	@ (8000d08 <__sfp_lock_release+0x8>)
 8000d02:	f000 b94d 	b.w	8000fa0 <__retarget_lock_release_recursive>
 8000d06:	bf00      	nop
 8000d08:	2000031d 	.word	0x2000031d

08000d0c <__sinit>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fff0 	bl	8000cf4 <__sfp_lock_acquire>
 8000d14:	6a23      	ldr	r3, [r4, #32]
 8000d16:	b11b      	cbz	r3, 8000d20 <__sinit+0x14>
 8000d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d1c:	f7ff bff0 	b.w	8000d00 <__sfp_lock_release>
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__sinit+0x28>)
 8000d22:	6223      	str	r3, [r4, #32]
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__sinit+0x2c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f5      	bne.n	8000d18 <__sinit+0xc>
 8000d2c:	f7ff ffc4 	bl	8000cb8 <global_stdio_init.part.0>
 8000d30:	e7f2      	b.n	8000d18 <__sinit+0xc>
 8000d32:	bf00      	nop
 8000d34:	08000c79 	.word	0x08000c79
 8000d38:	20000318 	.word	0x20000318

08000d3c <_strtol_l.constprop.0>:
 8000d3c:	2b24      	cmp	r3, #36	@ 0x24
 8000d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d42:	4686      	mov	lr, r0
 8000d44:	4690      	mov	r8, r2
 8000d46:	d801      	bhi.n	8000d4c <_strtol_l.constprop.0+0x10>
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d106      	bne.n	8000d5a <_strtol_l.constprop.0+0x1e>
 8000d4c:	f000 f8fc 	bl	8000f48 <__errno>
 8000d50:	2316      	movs	r3, #22
 8000d52:	6003      	str	r3, [r0, #0]
 8000d54:	2000      	movs	r0, #0
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	4834      	ldr	r0, [pc, #208]	@ (8000e2c <_strtol_l.constprop.0+0xf0>)
 8000d5c:	460d      	mov	r5, r1
 8000d5e:	462a      	mov	r2, r5
 8000d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000d64:	5d06      	ldrb	r6, [r0, r4]
 8000d66:	f016 0608 	ands.w	r6, r6, #8
 8000d6a:	d1f8      	bne.n	8000d5e <_strtol_l.constprop.0+0x22>
 8000d6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8000d6e:	d12d      	bne.n	8000dcc <_strtol_l.constprop.0+0x90>
 8000d70:	782c      	ldrb	r4, [r5, #0]
 8000d72:	2601      	movs	r6, #1
 8000d74:	1c95      	adds	r5, r2, #2
 8000d76:	f033 0210 	bics.w	r2, r3, #16
 8000d7a:	d109      	bne.n	8000d90 <_strtol_l.constprop.0+0x54>
 8000d7c:	2c30      	cmp	r4, #48	@ 0x30
 8000d7e:	d12a      	bne.n	8000dd6 <_strtol_l.constprop.0+0x9a>
 8000d80:	782a      	ldrb	r2, [r5, #0]
 8000d82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000d86:	2a58      	cmp	r2, #88	@ 0x58
 8000d88:	d125      	bne.n	8000dd6 <_strtol_l.constprop.0+0x9a>
 8000d8a:	786c      	ldrb	r4, [r5, #1]
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	3502      	adds	r5, #2
 8000d90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000d94:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8000d98:	2200      	movs	r2, #0
 8000d9a:	fbbc f9f3 	udiv	r9, ip, r3
 8000d9e:	4610      	mov	r0, r2
 8000da0:	fb03 ca19 	mls	sl, r3, r9, ip
 8000da4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000da8:	2f09      	cmp	r7, #9
 8000daa:	d81b      	bhi.n	8000de4 <_strtol_l.constprop.0+0xa8>
 8000dac:	463c      	mov	r4, r7
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	dd27      	ble.n	8000e02 <_strtol_l.constprop.0+0xc6>
 8000db2:	1c57      	adds	r7, r2, #1
 8000db4:	d007      	beq.n	8000dc6 <_strtol_l.constprop.0+0x8a>
 8000db6:	4581      	cmp	r9, r0
 8000db8:	d320      	bcc.n	8000dfc <_strtol_l.constprop.0+0xc0>
 8000dba:	d101      	bne.n	8000dc0 <_strtol_l.constprop.0+0x84>
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	db1d      	blt.n	8000dfc <_strtol_l.constprop.0+0xc0>
 8000dc0:	fb00 4003 	mla	r0, r0, r3, r4
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000dca:	e7eb      	b.n	8000da4 <_strtol_l.constprop.0+0x68>
 8000dcc:	2c2b      	cmp	r4, #43	@ 0x2b
 8000dce:	bf04      	itt	eq
 8000dd0:	782c      	ldrbeq	r4, [r5, #0]
 8000dd2:	1c95      	addeq	r5, r2, #2
 8000dd4:	e7cf      	b.n	8000d76 <_strtol_l.constprop.0+0x3a>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1da      	bne.n	8000d90 <_strtol_l.constprop.0+0x54>
 8000dda:	2c30      	cmp	r4, #48	@ 0x30
 8000ddc:	bf0c      	ite	eq
 8000dde:	2308      	moveq	r3, #8
 8000de0:	230a      	movne	r3, #10
 8000de2:	e7d5      	b.n	8000d90 <_strtol_l.constprop.0+0x54>
 8000de4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000de8:	2f19      	cmp	r7, #25
 8000dea:	d801      	bhi.n	8000df0 <_strtol_l.constprop.0+0xb4>
 8000dec:	3c37      	subs	r4, #55	@ 0x37
 8000dee:	e7de      	b.n	8000dae <_strtol_l.constprop.0+0x72>
 8000df0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000df4:	2f19      	cmp	r7, #25
 8000df6:	d804      	bhi.n	8000e02 <_strtol_l.constprop.0+0xc6>
 8000df8:	3c57      	subs	r4, #87	@ 0x57
 8000dfa:	e7d8      	b.n	8000dae <_strtol_l.constprop.0+0x72>
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e00:	e7e1      	b.n	8000dc6 <_strtol_l.constprop.0+0x8a>
 8000e02:	1c53      	adds	r3, r2, #1
 8000e04:	d108      	bne.n	8000e18 <_strtol_l.constprop.0+0xdc>
 8000e06:	2322      	movs	r3, #34	@ 0x22
 8000e08:	f8ce 3000 	str.w	r3, [lr]
 8000e0c:	4660      	mov	r0, ip
 8000e0e:	f1b8 0f00 	cmp.w	r8, #0
 8000e12:	d0a0      	beq.n	8000d56 <_strtol_l.constprop.0+0x1a>
 8000e14:	1e69      	subs	r1, r5, #1
 8000e16:	e006      	b.n	8000e26 <_strtol_l.constprop.0+0xea>
 8000e18:	b106      	cbz	r6, 8000e1c <_strtol_l.constprop.0+0xe0>
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	f1b8 0f00 	cmp.w	r8, #0
 8000e20:	d099      	beq.n	8000d56 <_strtol_l.constprop.0+0x1a>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d1f6      	bne.n	8000e14 <_strtol_l.constprop.0+0xd8>
 8000e26:	f8c8 1000 	str.w	r1, [r8]
 8000e2a:	e794      	b.n	8000d56 <_strtol_l.constprop.0+0x1a>
 8000e2c:	08001dd2 	.word	0x08001dd2

08000e30 <strtol>:
 8000e30:	4613      	mov	r3, r2
 8000e32:	460a      	mov	r2, r1
 8000e34:	4601      	mov	r1, r0
 8000e36:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <strtol+0x10>)
 8000e38:	6800      	ldr	r0, [r0, #0]
 8000e3a:	f7ff bf7f 	b.w	8000d3c <_strtol_l.constprop.0>
 8000e3e:	bf00      	nop
 8000e40:	20000038 	.word	0x20000038

08000e44 <_fwalk_sglue>:
 8000e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e48:	4607      	mov	r7, r0
 8000e4a:	4688      	mov	r8, r1
 8000e4c:	4614      	mov	r4, r2
 8000e4e:	2600      	movs	r6, #0
 8000e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e54:	f1b9 0901 	subs.w	r9, r9, #1
 8000e58:	d505      	bpl.n	8000e66 <_fwalk_sglue+0x22>
 8000e5a:	6824      	ldr	r4, [r4, #0]
 8000e5c:	2c00      	cmp	r4, #0
 8000e5e:	d1f7      	bne.n	8000e50 <_fwalk_sglue+0xc>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e66:	89ab      	ldrh	r3, [r5, #12]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d907      	bls.n	8000e7c <_fwalk_sglue+0x38>
 8000e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e70:	3301      	adds	r3, #1
 8000e72:	d003      	beq.n	8000e7c <_fwalk_sglue+0x38>
 8000e74:	4629      	mov	r1, r5
 8000e76:	4638      	mov	r0, r7
 8000e78:	47c0      	blx	r8
 8000e7a:	4306      	orrs	r6, r0
 8000e7c:	3568      	adds	r5, #104	@ 0x68
 8000e7e:	e7e9      	b.n	8000e54 <_fwalk_sglue+0x10>

08000e80 <strtok>:
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <strtok+0x5c>)
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e86:	681f      	ldr	r7, [r3, #0]
 8000e88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8000e8a:	4605      	mov	r5, r0
 8000e8c:	460e      	mov	r6, r1
 8000e8e:	b9ec      	cbnz	r4, 8000ecc <strtok+0x4c>
 8000e90:	2050      	movs	r0, #80	@ 0x50
 8000e92:	f000 f8ad 	bl	8000ff0 <malloc>
 8000e96:	4602      	mov	r2, r0
 8000e98:	6478      	str	r0, [r7, #68]	@ 0x44
 8000e9a:	b920      	cbnz	r0, 8000ea6 <strtok+0x26>
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <strtok+0x60>)
 8000e9e:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <strtok+0x64>)
 8000ea0:	215b      	movs	r1, #91	@ 0x5b
 8000ea2:	f000 f887 	bl	8000fb4 <__assert_func>
 8000ea6:	e9c0 4400 	strd	r4, r4, [r0]
 8000eaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000eae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000eb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8000eb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8000eba:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8000ebe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8000ec2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8000ec6:	6184      	str	r4, [r0, #24]
 8000ec8:	7704      	strb	r4, [r0, #28]
 8000eca:	6244      	str	r4, [r0, #36]	@ 0x24
 8000ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ece:	4631      	mov	r1, r6
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed8:	f000 b806 	b.w	8000ee8 <__strtok_r>
 8000edc:	20000038 	.word	0x20000038
 8000ee0:	08001d60 	.word	0x08001d60
 8000ee4:	08001d77 	.word	0x08001d77

08000ee8 <__strtok_r>:
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eea:	4604      	mov	r4, r0
 8000eec:	b908      	cbnz	r0, 8000ef2 <__strtok_r+0xa>
 8000eee:	6814      	ldr	r4, [r2, #0]
 8000ef0:	b144      	cbz	r4, 8000f04 <__strtok_r+0x1c>
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000ef8:	460f      	mov	r7, r1
 8000efa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000efe:	b91e      	cbnz	r6, 8000f08 <__strtok_r+0x20>
 8000f00:	b965      	cbnz	r5, 8000f1c <__strtok_r+0x34>
 8000f02:	6015      	str	r5, [r2, #0]
 8000f04:	2000      	movs	r0, #0
 8000f06:	e005      	b.n	8000f14 <__strtok_r+0x2c>
 8000f08:	42b5      	cmp	r5, r6
 8000f0a:	d1f6      	bne.n	8000efa <__strtok_r+0x12>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f0      	bne.n	8000ef2 <__strtok_r+0xa>
 8000f10:	6014      	str	r4, [r2, #0]
 8000f12:	7003      	strb	r3, [r0, #0]
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f16:	461c      	mov	r4, r3
 8000f18:	e00c      	b.n	8000f34 <__strtok_r+0x4c>
 8000f1a:	b915      	cbnz	r5, 8000f22 <__strtok_r+0x3a>
 8000f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000f20:	460e      	mov	r6, r1
 8000f22:	f816 5b01 	ldrb.w	r5, [r6], #1
 8000f26:	42ab      	cmp	r3, r5
 8000f28:	d1f7      	bne.n	8000f1a <__strtok_r+0x32>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f3      	beq.n	8000f16 <__strtok_r+0x2e>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f804 3c01 	strb.w	r3, [r4, #-1]
 8000f34:	6014      	str	r4, [r2, #0]
 8000f36:	e7ed      	b.n	8000f14 <__strtok_r+0x2c>

08000f38 <memset>:
 8000f38:	4402      	add	r2, r0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <memset+0xa>
 8000f40:	4770      	bx	lr
 8000f42:	f803 1b01 	strb.w	r1, [r3], #1
 8000f46:	e7f9      	b.n	8000f3c <memset+0x4>

08000f48 <__errno>:
 8000f48:	4b01      	ldr	r3, [pc, #4]	@ (8000f50 <__errno+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000038 	.word	0x20000038

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	4d0d      	ldr	r5, [pc, #52]	@ (8000f8c <__libc_init_array+0x38>)
 8000f58:	4c0d      	ldr	r4, [pc, #52]	@ (8000f90 <__libc_init_array+0x3c>)
 8000f5a:	1b64      	subs	r4, r4, r5
 8000f5c:	10a4      	asrs	r4, r4, #2
 8000f5e:	2600      	movs	r6, #0
 8000f60:	42a6      	cmp	r6, r4
 8000f62:	d109      	bne.n	8000f78 <__libc_init_array+0x24>
 8000f64:	4d0b      	ldr	r5, [pc, #44]	@ (8000f94 <__libc_init_array+0x40>)
 8000f66:	4c0c      	ldr	r4, [pc, #48]	@ (8000f98 <__libc_init_array+0x44>)
 8000f68:	f000 fece 	bl	8001d08 <_init>
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	10a4      	asrs	r4, r4, #2
 8000f70:	2600      	movs	r6, #0
 8000f72:	42a6      	cmp	r6, r4
 8000f74:	d105      	bne.n	8000f82 <__libc_init_array+0x2e>
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f7c:	4798      	blx	r3
 8000f7e:	3601      	adds	r6, #1
 8000f80:	e7ee      	b.n	8000f60 <__libc_init_array+0xc>
 8000f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f86:	4798      	blx	r3
 8000f88:	3601      	adds	r6, #1
 8000f8a:	e7f2      	b.n	8000f72 <__libc_init_array+0x1e>
 8000f8c:	08001f4c 	.word	0x08001f4c
 8000f90:	08001f4c 	.word	0x08001f4c
 8000f94:	08001f4c 	.word	0x08001f4c
 8000f98:	08001f50 	.word	0x08001f50

08000f9c <__retarget_lock_init_recursive>:
 8000f9c:	4770      	bx	lr

08000f9e <__retarget_lock_acquire_recursive>:
 8000f9e:	4770      	bx	lr

08000fa0 <__retarget_lock_release_recursive>:
 8000fa0:	4770      	bx	lr

08000fa2 <strcpy>:
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fa8:	f803 2b01 	strb.w	r2, [r3], #1
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d1f9      	bne.n	8000fa4 <strcpy+0x2>
 8000fb0:	4770      	bx	lr
	...

08000fb4 <__assert_func>:
 8000fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fb6:	4614      	mov	r4, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <__assert_func+0x2c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	68d8      	ldr	r0, [r3, #12]
 8000fc2:	b954      	cbnz	r4, 8000fda <__assert_func+0x26>
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <__assert_func+0x30>)
 8000fc6:	461c      	mov	r4, r3
 8000fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000fcc:	9100      	str	r1, [sp, #0]
 8000fce:	462b      	mov	r3, r5
 8000fd0:	4905      	ldr	r1, [pc, #20]	@ (8000fe8 <__assert_func+0x34>)
 8000fd2:	f000 f9b3 	bl	800133c <fiprintf>
 8000fd6:	f000 fa19 	bl	800140c <abort>
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__assert_func+0x38>)
 8000fdc:	e7f4      	b.n	8000fc8 <__assert_func+0x14>
 8000fde:	bf00      	nop
 8000fe0:	20000038 	.word	0x20000038
 8000fe4:	08001f0d 	.word	0x08001f0d
 8000fe8:	08001edf 	.word	0x08001edf
 8000fec:	08001ed2 	.word	0x08001ed2

08000ff0 <malloc>:
 8000ff0:	4b02      	ldr	r3, [pc, #8]	@ (8000ffc <malloc+0xc>)
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f000 b825 	b.w	8001044 <_malloc_r>
 8000ffa:	bf00      	nop
 8000ffc:	20000038 	.word	0x20000038

08001000 <sbrk_aligned>:
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	4e0f      	ldr	r6, [pc, #60]	@ (8001040 <sbrk_aligned+0x40>)
 8001004:	460c      	mov	r4, r1
 8001006:	6831      	ldr	r1, [r6, #0]
 8001008:	4605      	mov	r5, r0
 800100a:	b911      	cbnz	r1, 8001012 <sbrk_aligned+0x12>
 800100c:	f000 f9dc 	bl	80013c8 <_sbrk_r>
 8001010:	6030      	str	r0, [r6, #0]
 8001012:	4621      	mov	r1, r4
 8001014:	4628      	mov	r0, r5
 8001016:	f000 f9d7 	bl	80013c8 <_sbrk_r>
 800101a:	1c43      	adds	r3, r0, #1
 800101c:	d103      	bne.n	8001026 <sbrk_aligned+0x26>
 800101e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001022:	4620      	mov	r0, r4
 8001024:	bd70      	pop	{r4, r5, r6, pc}
 8001026:	1cc4      	adds	r4, r0, #3
 8001028:	f024 0403 	bic.w	r4, r4, #3
 800102c:	42a0      	cmp	r0, r4
 800102e:	d0f8      	beq.n	8001022 <sbrk_aligned+0x22>
 8001030:	1a21      	subs	r1, r4, r0
 8001032:	4628      	mov	r0, r5
 8001034:	f000 f9c8 	bl	80013c8 <_sbrk_r>
 8001038:	3001      	adds	r0, #1
 800103a:	d1f2      	bne.n	8001022 <sbrk_aligned+0x22>
 800103c:	e7ef      	b.n	800101e <sbrk_aligned+0x1e>
 800103e:	bf00      	nop
 8001040:	20000320 	.word	0x20000320

08001044 <_malloc_r>:
 8001044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001048:	1ccd      	adds	r5, r1, #3
 800104a:	f025 0503 	bic.w	r5, r5, #3
 800104e:	3508      	adds	r5, #8
 8001050:	2d0c      	cmp	r5, #12
 8001052:	bf38      	it	cc
 8001054:	250c      	movcc	r5, #12
 8001056:	2d00      	cmp	r5, #0
 8001058:	4606      	mov	r6, r0
 800105a:	db01      	blt.n	8001060 <_malloc_r+0x1c>
 800105c:	42a9      	cmp	r1, r5
 800105e:	d904      	bls.n	800106a <_malloc_r+0x26>
 8001060:	230c      	movs	r3, #12
 8001062:	6033      	str	r3, [r6, #0]
 8001064:	2000      	movs	r0, #0
 8001066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800106a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001140 <_malloc_r+0xfc>
 800106e:	f000 f915 	bl	800129c <__malloc_lock>
 8001072:	f8d8 3000 	ldr.w	r3, [r8]
 8001076:	461c      	mov	r4, r3
 8001078:	bb44      	cbnz	r4, 80010cc <_malloc_r+0x88>
 800107a:	4629      	mov	r1, r5
 800107c:	4630      	mov	r0, r6
 800107e:	f7ff ffbf 	bl	8001000 <sbrk_aligned>
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	4604      	mov	r4, r0
 8001086:	d158      	bne.n	800113a <_malloc_r+0xf6>
 8001088:	f8d8 4000 	ldr.w	r4, [r8]
 800108c:	4627      	mov	r7, r4
 800108e:	2f00      	cmp	r7, #0
 8001090:	d143      	bne.n	800111a <_malloc_r+0xd6>
 8001092:	2c00      	cmp	r4, #0
 8001094:	d04b      	beq.n	800112e <_malloc_r+0xea>
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	4639      	mov	r1, r7
 800109a:	4630      	mov	r0, r6
 800109c:	eb04 0903 	add.w	r9, r4, r3
 80010a0:	f000 f992 	bl	80013c8 <_sbrk_r>
 80010a4:	4581      	cmp	r9, r0
 80010a6:	d142      	bne.n	800112e <_malloc_r+0xea>
 80010a8:	6821      	ldr	r1, [r4, #0]
 80010aa:	1a6d      	subs	r5, r5, r1
 80010ac:	4629      	mov	r1, r5
 80010ae:	4630      	mov	r0, r6
 80010b0:	f7ff ffa6 	bl	8001000 <sbrk_aligned>
 80010b4:	3001      	adds	r0, #1
 80010b6:	d03a      	beq.n	800112e <_malloc_r+0xea>
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	442b      	add	r3, r5
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	f8d8 3000 	ldr.w	r3, [r8]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	bb62      	cbnz	r2, 8001120 <_malloc_r+0xdc>
 80010c6:	f8c8 7000 	str.w	r7, [r8]
 80010ca:	e00f      	b.n	80010ec <_malloc_r+0xa8>
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	1b52      	subs	r2, r2, r5
 80010d0:	d420      	bmi.n	8001114 <_malloc_r+0xd0>
 80010d2:	2a0b      	cmp	r2, #11
 80010d4:	d917      	bls.n	8001106 <_malloc_r+0xc2>
 80010d6:	1961      	adds	r1, r4, r5
 80010d8:	42a3      	cmp	r3, r4
 80010da:	6025      	str	r5, [r4, #0]
 80010dc:	bf18      	it	ne
 80010de:	6059      	strne	r1, [r3, #4]
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	bf08      	it	eq
 80010e4:	f8c8 1000 	streq.w	r1, [r8]
 80010e8:	5162      	str	r2, [r4, r5]
 80010ea:	604b      	str	r3, [r1, #4]
 80010ec:	4630      	mov	r0, r6
 80010ee:	f000 f8db 	bl	80012a8 <__malloc_unlock>
 80010f2:	f104 000b 	add.w	r0, r4, #11
 80010f6:	1d23      	adds	r3, r4, #4
 80010f8:	f020 0007 	bic.w	r0, r0, #7
 80010fc:	1ac2      	subs	r2, r0, r3
 80010fe:	bf1c      	itt	ne
 8001100:	1a1b      	subne	r3, r3, r0
 8001102:	50a3      	strne	r3, [r4, r2]
 8001104:	e7af      	b.n	8001066 <_malloc_r+0x22>
 8001106:	6862      	ldr	r2, [r4, #4]
 8001108:	42a3      	cmp	r3, r4
 800110a:	bf0c      	ite	eq
 800110c:	f8c8 2000 	streq.w	r2, [r8]
 8001110:	605a      	strne	r2, [r3, #4]
 8001112:	e7eb      	b.n	80010ec <_malloc_r+0xa8>
 8001114:	4623      	mov	r3, r4
 8001116:	6864      	ldr	r4, [r4, #4]
 8001118:	e7ae      	b.n	8001078 <_malloc_r+0x34>
 800111a:	463c      	mov	r4, r7
 800111c:	687f      	ldr	r7, [r7, #4]
 800111e:	e7b6      	b.n	800108e <_malloc_r+0x4a>
 8001120:	461a      	mov	r2, r3
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	42a3      	cmp	r3, r4
 8001126:	d1fb      	bne.n	8001120 <_malloc_r+0xdc>
 8001128:	2300      	movs	r3, #0
 800112a:	6053      	str	r3, [r2, #4]
 800112c:	e7de      	b.n	80010ec <_malloc_r+0xa8>
 800112e:	230c      	movs	r3, #12
 8001130:	6033      	str	r3, [r6, #0]
 8001132:	4630      	mov	r0, r6
 8001134:	f000 f8b8 	bl	80012a8 <__malloc_unlock>
 8001138:	e794      	b.n	8001064 <_malloc_r+0x20>
 800113a:	6005      	str	r5, [r0, #0]
 800113c:	e7d6      	b.n	80010ec <_malloc_r+0xa8>
 800113e:	bf00      	nop
 8001140:	20000324 	.word	0x20000324

08001144 <__sflush_r>:
 8001144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800114c:	0716      	lsls	r6, r2, #28
 800114e:	4605      	mov	r5, r0
 8001150:	460c      	mov	r4, r1
 8001152:	d454      	bmi.n	80011fe <__sflush_r+0xba>
 8001154:	684b      	ldr	r3, [r1, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dc02      	bgt.n	8001160 <__sflush_r+0x1c>
 800115a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	dd48      	ble.n	80011f2 <__sflush_r+0xae>
 8001160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001162:	2e00      	cmp	r6, #0
 8001164:	d045      	beq.n	80011f2 <__sflush_r+0xae>
 8001166:	2300      	movs	r3, #0
 8001168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800116c:	682f      	ldr	r7, [r5, #0]
 800116e:	6a21      	ldr	r1, [r4, #32]
 8001170:	602b      	str	r3, [r5, #0]
 8001172:	d030      	beq.n	80011d6 <__sflush_r+0x92>
 8001174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	0759      	lsls	r1, r3, #29
 800117a:	d505      	bpl.n	8001188 <__sflush_r+0x44>
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001182:	b10b      	cbz	r3, 8001188 <__sflush_r+0x44>
 8001184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	2300      	movs	r3, #0
 800118a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800118c:	6a21      	ldr	r1, [r4, #32]
 800118e:	4628      	mov	r0, r5
 8001190:	47b0      	blx	r6
 8001192:	1c43      	adds	r3, r0, #1
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	d106      	bne.n	80011a6 <__sflush_r+0x62>
 8001198:	6829      	ldr	r1, [r5, #0]
 800119a:	291d      	cmp	r1, #29
 800119c:	d82b      	bhi.n	80011f6 <__sflush_r+0xb2>
 800119e:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <__sflush_r+0x104>)
 80011a0:	410a      	asrs	r2, r1
 80011a2:	07d6      	lsls	r6, r2, #31
 80011a4:	d427      	bmi.n	80011f6 <__sflush_r+0xb2>
 80011a6:	2200      	movs	r2, #0
 80011a8:	6062      	str	r2, [r4, #4]
 80011aa:	04d9      	lsls	r1, r3, #19
 80011ac:	6922      	ldr	r2, [r4, #16]
 80011ae:	6022      	str	r2, [r4, #0]
 80011b0:	d504      	bpl.n	80011bc <__sflush_r+0x78>
 80011b2:	1c42      	adds	r2, r0, #1
 80011b4:	d101      	bne.n	80011ba <__sflush_r+0x76>
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	b903      	cbnz	r3, 80011bc <__sflush_r+0x78>
 80011ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80011bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011be:	602f      	str	r7, [r5, #0]
 80011c0:	b1b9      	cbz	r1, 80011f2 <__sflush_r+0xae>
 80011c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d002      	beq.n	80011d0 <__sflush_r+0x8c>
 80011ca:	4628      	mov	r0, r5
 80011cc:	f000 f926 	bl	800141c <_free_r>
 80011d0:	2300      	movs	r3, #0
 80011d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80011d4:	e00d      	b.n	80011f2 <__sflush_r+0xae>
 80011d6:	2301      	movs	r3, #1
 80011d8:	4628      	mov	r0, r5
 80011da:	47b0      	blx	r6
 80011dc:	4602      	mov	r2, r0
 80011de:	1c50      	adds	r0, r2, #1
 80011e0:	d1c9      	bne.n	8001176 <__sflush_r+0x32>
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0c6      	beq.n	8001176 <__sflush_r+0x32>
 80011e8:	2b1d      	cmp	r3, #29
 80011ea:	d001      	beq.n	80011f0 <__sflush_r+0xac>
 80011ec:	2b16      	cmp	r3, #22
 80011ee:	d11e      	bne.n	800122e <__sflush_r+0xea>
 80011f0:	602f      	str	r7, [r5, #0]
 80011f2:	2000      	movs	r0, #0
 80011f4:	e022      	b.n	800123c <__sflush_r+0xf8>
 80011f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	e01b      	b.n	8001236 <__sflush_r+0xf2>
 80011fe:	690f      	ldr	r7, [r1, #16]
 8001200:	2f00      	cmp	r7, #0
 8001202:	d0f6      	beq.n	80011f2 <__sflush_r+0xae>
 8001204:	0793      	lsls	r3, r2, #30
 8001206:	680e      	ldr	r6, [r1, #0]
 8001208:	bf08      	it	eq
 800120a:	694b      	ldreq	r3, [r1, #20]
 800120c:	600f      	str	r7, [r1, #0]
 800120e:	bf18      	it	ne
 8001210:	2300      	movne	r3, #0
 8001212:	eba6 0807 	sub.w	r8, r6, r7
 8001216:	608b      	str	r3, [r1, #8]
 8001218:	f1b8 0f00 	cmp.w	r8, #0
 800121c:	dde9      	ble.n	80011f2 <__sflush_r+0xae>
 800121e:	6a21      	ldr	r1, [r4, #32]
 8001220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001222:	4643      	mov	r3, r8
 8001224:	463a      	mov	r2, r7
 8001226:	4628      	mov	r0, r5
 8001228:	47b0      	blx	r6
 800122a:	2800      	cmp	r0, #0
 800122c:	dc08      	bgt.n	8001240 <__sflush_r+0xfc>
 800122e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001240:	4407      	add	r7, r0
 8001242:	eba8 0800 	sub.w	r8, r8, r0
 8001246:	e7e7      	b.n	8001218 <__sflush_r+0xd4>
 8001248:	dfbffffe 	.word	0xdfbffffe

0800124c <_fflush_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	690b      	ldr	r3, [r1, #16]
 8001250:	4605      	mov	r5, r0
 8001252:	460c      	mov	r4, r1
 8001254:	b913      	cbnz	r3, 800125c <_fflush_r+0x10>
 8001256:	2500      	movs	r5, #0
 8001258:	4628      	mov	r0, r5
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	b118      	cbz	r0, 8001266 <_fflush_r+0x1a>
 800125e:	6a03      	ldr	r3, [r0, #32]
 8001260:	b90b      	cbnz	r3, 8001266 <_fflush_r+0x1a>
 8001262:	f7ff fd53 	bl	8000d0c <__sinit>
 8001266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f3      	beq.n	8001256 <_fflush_r+0xa>
 800126e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001270:	07d0      	lsls	r0, r2, #31
 8001272:	d404      	bmi.n	800127e <_fflush_r+0x32>
 8001274:	0599      	lsls	r1, r3, #22
 8001276:	d402      	bmi.n	800127e <_fflush_r+0x32>
 8001278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800127a:	f7ff fe90 	bl	8000f9e <__retarget_lock_acquire_recursive>
 800127e:	4628      	mov	r0, r5
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff ff5f 	bl	8001144 <__sflush_r>
 8001286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001288:	07da      	lsls	r2, r3, #31
 800128a:	4605      	mov	r5, r0
 800128c:	d4e4      	bmi.n	8001258 <_fflush_r+0xc>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	059b      	lsls	r3, r3, #22
 8001292:	d4e1      	bmi.n	8001258 <_fflush_r+0xc>
 8001294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001296:	f7ff fe83 	bl	8000fa0 <__retarget_lock_release_recursive>
 800129a:	e7dd      	b.n	8001258 <_fflush_r+0xc>

0800129c <__malloc_lock>:
 800129c:	4801      	ldr	r0, [pc, #4]	@ (80012a4 <__malloc_lock+0x8>)
 800129e:	f7ff be7e 	b.w	8000f9e <__retarget_lock_acquire_recursive>
 80012a2:	bf00      	nop
 80012a4:	2000031c 	.word	0x2000031c

080012a8 <__malloc_unlock>:
 80012a8:	4801      	ldr	r0, [pc, #4]	@ (80012b0 <__malloc_unlock+0x8>)
 80012aa:	f7ff be79 	b.w	8000fa0 <__retarget_lock_release_recursive>
 80012ae:	bf00      	nop
 80012b0:	2000031c 	.word	0x2000031c

080012b4 <__sread>:
 80012b4:	b510      	push	{r4, lr}
 80012b6:	460c      	mov	r4, r1
 80012b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012bc:	f000 f872 	bl	80013a4 <_read_r>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	bfab      	itete	ge
 80012c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80012c6:	89a3      	ldrhlt	r3, [r4, #12]
 80012c8:	181b      	addge	r3, r3, r0
 80012ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80012ce:	bfac      	ite	ge
 80012d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80012d2:	81a3      	strhlt	r3, [r4, #12]
 80012d4:	bd10      	pop	{r4, pc}

080012d6 <__swrite>:
 80012d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012da:	461f      	mov	r7, r3
 80012dc:	898b      	ldrh	r3, [r1, #12]
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	4605      	mov	r5, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	4616      	mov	r6, r2
 80012e6:	d505      	bpl.n	80012f4 <__swrite+0x1e>
 80012e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ec:	2302      	movs	r3, #2
 80012ee:	2200      	movs	r2, #0
 80012f0:	f000 f846 	bl	8001380 <_lseek_r>
 80012f4:	89a3      	ldrh	r3, [r4, #12]
 80012f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012fe:	81a3      	strh	r3, [r4, #12]
 8001300:	4632      	mov	r2, r6
 8001302:	463b      	mov	r3, r7
 8001304:	4628      	mov	r0, r5
 8001306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800130a:	f000 b86d 	b.w	80013e8 <_write_r>

0800130e <__sseek>:
 800130e:	b510      	push	{r4, lr}
 8001310:	460c      	mov	r4, r1
 8001312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001316:	f000 f833 	bl	8001380 <_lseek_r>
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	bf15      	itete	ne
 8001320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800132a:	81a3      	strheq	r3, [r4, #12]
 800132c:	bf18      	it	ne
 800132e:	81a3      	strhne	r3, [r4, #12]
 8001330:	bd10      	pop	{r4, pc}

08001332 <__sclose>:
 8001332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001336:	f000 b813 	b.w	8001360 <_close_r>
	...

0800133c <fiprintf>:
 800133c:	b40e      	push	{r1, r2, r3}
 800133e:	b503      	push	{r0, r1, lr}
 8001340:	4601      	mov	r1, r0
 8001342:	ab03      	add	r3, sp, #12
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <fiprintf+0x20>)
 8001346:	f853 2b04 	ldr.w	r2, [r3], #4
 800134a:	6800      	ldr	r0, [r0, #0]
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f000 f8d9 	bl	8001504 <_vfiprintf_r>
 8001352:	b002      	add	sp, #8
 8001354:	f85d eb04 	ldr.w	lr, [sp], #4
 8001358:	b003      	add	sp, #12
 800135a:	4770      	bx	lr
 800135c:	20000038 	.word	0x20000038

08001360 <_close_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d06      	ldr	r5, [pc, #24]	@ (800137c <_close_r+0x1c>)
 8001364:	2300      	movs	r3, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	f7ff fbae 	bl	8000acc <_close>
 8001370:	1c43      	adds	r3, r0, #1
 8001372:	d102      	bne.n	800137a <_close_r+0x1a>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	b103      	cbz	r3, 800137a <_close_r+0x1a>
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	20000328 	.word	0x20000328

08001380 <_lseek_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4d07      	ldr	r5, [pc, #28]	@ (80013a0 <_lseek_r+0x20>)
 8001384:	4604      	mov	r4, r0
 8001386:	4608      	mov	r0, r1
 8001388:	4611      	mov	r1, r2
 800138a:	2200      	movs	r2, #0
 800138c:	602a      	str	r2, [r5, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f7ff fbc3 	bl	8000b1a <_lseek>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d102      	bne.n	800139e <_lseek_r+0x1e>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	b103      	cbz	r3, 800139e <_lseek_r+0x1e>
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	20000328 	.word	0x20000328

080013a4 <_read_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d07      	ldr	r5, [pc, #28]	@ (80013c4 <_read_r+0x20>)
 80013a8:	4604      	mov	r4, r0
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	602a      	str	r2, [r5, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f7ff fb51 	bl	8000a5a <_read>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	d102      	bne.n	80013c2 <_read_r+0x1e>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	b103      	cbz	r3, 80013c2 <_read_r+0x1e>
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	20000328 	.word	0x20000328

080013c8 <_sbrk_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4d06      	ldr	r5, [pc, #24]	@ (80013e4 <_sbrk_r+0x1c>)
 80013cc:	2300      	movs	r3, #0
 80013ce:	4604      	mov	r4, r0
 80013d0:	4608      	mov	r0, r1
 80013d2:	602b      	str	r3, [r5, #0]
 80013d4:	f7ff fbae 	bl	8000b34 <_sbrk>
 80013d8:	1c43      	adds	r3, r0, #1
 80013da:	d102      	bne.n	80013e2 <_sbrk_r+0x1a>
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	b103      	cbz	r3, 80013e2 <_sbrk_r+0x1a>
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	bd38      	pop	{r3, r4, r5, pc}
 80013e4:	20000328 	.word	0x20000328

080013e8 <_write_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d07      	ldr	r5, [pc, #28]	@ (8001408 <_write_r+0x20>)
 80013ec:	4604      	mov	r4, r0
 80013ee:	4608      	mov	r0, r1
 80013f0:	4611      	mov	r1, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	602a      	str	r2, [r5, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	f7ff fb4c 	bl	8000a94 <_write>
 80013fc:	1c43      	adds	r3, r0, #1
 80013fe:	d102      	bne.n	8001406 <_write_r+0x1e>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	b103      	cbz	r3, 8001406 <_write_r+0x1e>
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	20000328 	.word	0x20000328

0800140c <abort>:
 800140c:	b508      	push	{r3, lr}
 800140e:	2006      	movs	r0, #6
 8001410:	f000 fc5e 	bl	8001cd0 <raise>
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff fb15 	bl	8000a44 <_exit>
	...

0800141c <_free_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4605      	mov	r5, r0
 8001420:	2900      	cmp	r1, #0
 8001422:	d041      	beq.n	80014a8 <_free_r+0x8c>
 8001424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001428:	1f0c      	subs	r4, r1, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	bfb8      	it	lt
 800142e:	18e4      	addlt	r4, r4, r3
 8001430:	f7ff ff34 	bl	800129c <__malloc_lock>
 8001434:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <_free_r+0x90>)
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	b933      	cbnz	r3, 8001448 <_free_r+0x2c>
 800143a:	6063      	str	r3, [r4, #4]
 800143c:	6014      	str	r4, [r2, #0]
 800143e:	4628      	mov	r0, r5
 8001440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001444:	f7ff bf30 	b.w	80012a8 <__malloc_unlock>
 8001448:	42a3      	cmp	r3, r4
 800144a:	d908      	bls.n	800145e <_free_r+0x42>
 800144c:	6820      	ldr	r0, [r4, #0]
 800144e:	1821      	adds	r1, r4, r0
 8001450:	428b      	cmp	r3, r1
 8001452:	bf01      	itttt	eq
 8001454:	6819      	ldreq	r1, [r3, #0]
 8001456:	685b      	ldreq	r3, [r3, #4]
 8001458:	1809      	addeq	r1, r1, r0
 800145a:	6021      	streq	r1, [r4, #0]
 800145c:	e7ed      	b.n	800143a <_free_r+0x1e>
 800145e:	461a      	mov	r2, r3
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	b10b      	cbz	r3, 8001468 <_free_r+0x4c>
 8001464:	42a3      	cmp	r3, r4
 8001466:	d9fa      	bls.n	800145e <_free_r+0x42>
 8001468:	6811      	ldr	r1, [r2, #0]
 800146a:	1850      	adds	r0, r2, r1
 800146c:	42a0      	cmp	r0, r4
 800146e:	d10b      	bne.n	8001488 <_free_r+0x6c>
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	4401      	add	r1, r0
 8001474:	1850      	adds	r0, r2, r1
 8001476:	4283      	cmp	r3, r0
 8001478:	6011      	str	r1, [r2, #0]
 800147a:	d1e0      	bne.n	800143e <_free_r+0x22>
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	6053      	str	r3, [r2, #4]
 8001482:	4408      	add	r0, r1
 8001484:	6010      	str	r0, [r2, #0]
 8001486:	e7da      	b.n	800143e <_free_r+0x22>
 8001488:	d902      	bls.n	8001490 <_free_r+0x74>
 800148a:	230c      	movs	r3, #12
 800148c:	602b      	str	r3, [r5, #0]
 800148e:	e7d6      	b.n	800143e <_free_r+0x22>
 8001490:	6820      	ldr	r0, [r4, #0]
 8001492:	1821      	adds	r1, r4, r0
 8001494:	428b      	cmp	r3, r1
 8001496:	bf04      	itt	eq
 8001498:	6819      	ldreq	r1, [r3, #0]
 800149a:	685b      	ldreq	r3, [r3, #4]
 800149c:	6063      	str	r3, [r4, #4]
 800149e:	bf04      	itt	eq
 80014a0:	1809      	addeq	r1, r1, r0
 80014a2:	6021      	streq	r1, [r4, #0]
 80014a4:	6054      	str	r4, [r2, #4]
 80014a6:	e7ca      	b.n	800143e <_free_r+0x22>
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
 80014aa:	bf00      	nop
 80014ac:	20000324 	.word	0x20000324

080014b0 <__sfputc_r>:
 80014b0:	6893      	ldr	r3, [r2, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	b410      	push	{r4}
 80014b8:	6093      	str	r3, [r2, #8]
 80014ba:	da08      	bge.n	80014ce <__sfputc_r+0x1e>
 80014bc:	6994      	ldr	r4, [r2, #24]
 80014be:	42a3      	cmp	r3, r4
 80014c0:	db01      	blt.n	80014c6 <__sfputc_r+0x16>
 80014c2:	290a      	cmp	r1, #10
 80014c4:	d103      	bne.n	80014ce <__sfputc_r+0x1e>
 80014c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ca:	f000 bac1 	b.w	8001a50 <__swbuf_r>
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	1c58      	adds	r0, r3, #1
 80014d2:	6010      	str	r0, [r2, #0]
 80014d4:	7019      	strb	r1, [r3, #0]
 80014d6:	4608      	mov	r0, r1
 80014d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014dc:	4770      	bx	lr

080014de <__sfputs_r>:
 80014de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e0:	4606      	mov	r6, r0
 80014e2:	460f      	mov	r7, r1
 80014e4:	4614      	mov	r4, r2
 80014e6:	18d5      	adds	r5, r2, r3
 80014e8:	42ac      	cmp	r4, r5
 80014ea:	d101      	bne.n	80014f0 <__sfputs_r+0x12>
 80014ec:	2000      	movs	r0, #0
 80014ee:	e007      	b.n	8001500 <__sfputs_r+0x22>
 80014f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014f4:	463a      	mov	r2, r7
 80014f6:	4630      	mov	r0, r6
 80014f8:	f7ff ffda 	bl	80014b0 <__sfputc_r>
 80014fc:	1c43      	adds	r3, r0, #1
 80014fe:	d1f3      	bne.n	80014e8 <__sfputs_r+0xa>
 8001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001504 <_vfiprintf_r>:
 8001504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001508:	460d      	mov	r5, r1
 800150a:	b09d      	sub	sp, #116	@ 0x74
 800150c:	4614      	mov	r4, r2
 800150e:	4698      	mov	r8, r3
 8001510:	4606      	mov	r6, r0
 8001512:	b118      	cbz	r0, 800151c <_vfiprintf_r+0x18>
 8001514:	6a03      	ldr	r3, [r0, #32]
 8001516:	b90b      	cbnz	r3, 800151c <_vfiprintf_r+0x18>
 8001518:	f7ff fbf8 	bl	8000d0c <__sinit>
 800151c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800151e:	07d9      	lsls	r1, r3, #31
 8001520:	d405      	bmi.n	800152e <_vfiprintf_r+0x2a>
 8001522:	89ab      	ldrh	r3, [r5, #12]
 8001524:	059a      	lsls	r2, r3, #22
 8001526:	d402      	bmi.n	800152e <_vfiprintf_r+0x2a>
 8001528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800152a:	f7ff fd38 	bl	8000f9e <__retarget_lock_acquire_recursive>
 800152e:	89ab      	ldrh	r3, [r5, #12]
 8001530:	071b      	lsls	r3, r3, #28
 8001532:	d501      	bpl.n	8001538 <_vfiprintf_r+0x34>
 8001534:	692b      	ldr	r3, [r5, #16]
 8001536:	b99b      	cbnz	r3, 8001560 <_vfiprintf_r+0x5c>
 8001538:	4629      	mov	r1, r5
 800153a:	4630      	mov	r0, r6
 800153c:	f000 fac6 	bl	8001acc <__swsetup_r>
 8001540:	b170      	cbz	r0, 8001560 <_vfiprintf_r+0x5c>
 8001542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001544:	07dc      	lsls	r4, r3, #31
 8001546:	d504      	bpl.n	8001552 <_vfiprintf_r+0x4e>
 8001548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800154c:	b01d      	add	sp, #116	@ 0x74
 800154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001552:	89ab      	ldrh	r3, [r5, #12]
 8001554:	0598      	lsls	r0, r3, #22
 8001556:	d4f7      	bmi.n	8001548 <_vfiprintf_r+0x44>
 8001558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800155a:	f7ff fd21 	bl	8000fa0 <__retarget_lock_release_recursive>
 800155e:	e7f3      	b.n	8001548 <_vfiprintf_r+0x44>
 8001560:	2300      	movs	r3, #0
 8001562:	9309      	str	r3, [sp, #36]	@ 0x24
 8001564:	2320      	movs	r3, #32
 8001566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800156a:	f8cd 800c 	str.w	r8, [sp, #12]
 800156e:	2330      	movs	r3, #48	@ 0x30
 8001570:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001720 <_vfiprintf_r+0x21c>
 8001574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001578:	f04f 0901 	mov.w	r9, #1
 800157c:	4623      	mov	r3, r4
 800157e:	469a      	mov	sl, r3
 8001580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001584:	b10a      	cbz	r2, 800158a <_vfiprintf_r+0x86>
 8001586:	2a25      	cmp	r2, #37	@ 0x25
 8001588:	d1f9      	bne.n	800157e <_vfiprintf_r+0x7a>
 800158a:	ebba 0b04 	subs.w	fp, sl, r4
 800158e:	d00b      	beq.n	80015a8 <_vfiprintf_r+0xa4>
 8001590:	465b      	mov	r3, fp
 8001592:	4622      	mov	r2, r4
 8001594:	4629      	mov	r1, r5
 8001596:	4630      	mov	r0, r6
 8001598:	f7ff ffa1 	bl	80014de <__sfputs_r>
 800159c:	3001      	adds	r0, #1
 800159e:	f000 80a7 	beq.w	80016f0 <_vfiprintf_r+0x1ec>
 80015a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015a4:	445a      	add	r2, fp
 80015a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80015a8:	f89a 3000 	ldrb.w	r3, [sl]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 809f 	beq.w	80016f0 <_vfiprintf_r+0x1ec>
 80015b2:	2300      	movs	r3, #0
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015bc:	f10a 0a01 	add.w	sl, sl, #1
 80015c0:	9304      	str	r3, [sp, #16]
 80015c2:	9307      	str	r3, [sp, #28]
 80015c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80015c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80015ca:	4654      	mov	r4, sl
 80015cc:	2205      	movs	r2, #5
 80015ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d2:	4853      	ldr	r0, [pc, #332]	@ (8001720 <_vfiprintf_r+0x21c>)
 80015d4:	f7fe fe1c 	bl	8000210 <memchr>
 80015d8:	9a04      	ldr	r2, [sp, #16]
 80015da:	b9d8      	cbnz	r0, 8001614 <_vfiprintf_r+0x110>
 80015dc:	06d1      	lsls	r1, r2, #27
 80015de:	bf44      	itt	mi
 80015e0:	2320      	movmi	r3, #32
 80015e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80015e6:	0713      	lsls	r3, r2, #28
 80015e8:	bf44      	itt	mi
 80015ea:	232b      	movmi	r3, #43	@ 0x2b
 80015ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80015f0:	f89a 3000 	ldrb.w	r3, [sl]
 80015f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80015f6:	d015      	beq.n	8001624 <_vfiprintf_r+0x120>
 80015f8:	9a07      	ldr	r2, [sp, #28]
 80015fa:	4654      	mov	r4, sl
 80015fc:	2000      	movs	r0, #0
 80015fe:	f04f 0c0a 	mov.w	ip, #10
 8001602:	4621      	mov	r1, r4
 8001604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001608:	3b30      	subs	r3, #48	@ 0x30
 800160a:	2b09      	cmp	r3, #9
 800160c:	d94b      	bls.n	80016a6 <_vfiprintf_r+0x1a2>
 800160e:	b1b0      	cbz	r0, 800163e <_vfiprintf_r+0x13a>
 8001610:	9207      	str	r2, [sp, #28]
 8001612:	e014      	b.n	800163e <_vfiprintf_r+0x13a>
 8001614:	eba0 0308 	sub.w	r3, r0, r8
 8001618:	fa09 f303 	lsl.w	r3, r9, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	46a2      	mov	sl, r4
 8001622:	e7d2      	b.n	80015ca <_vfiprintf_r+0xc6>
 8001624:	9b03      	ldr	r3, [sp, #12]
 8001626:	1d19      	adds	r1, r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	9103      	str	r1, [sp, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	bfbb      	ittet	lt
 8001630:	425b      	neglt	r3, r3
 8001632:	f042 0202 	orrlt.w	r2, r2, #2
 8001636:	9307      	strge	r3, [sp, #28]
 8001638:	9307      	strlt	r3, [sp, #28]
 800163a:	bfb8      	it	lt
 800163c:	9204      	strlt	r2, [sp, #16]
 800163e:	7823      	ldrb	r3, [r4, #0]
 8001640:	2b2e      	cmp	r3, #46	@ 0x2e
 8001642:	d10a      	bne.n	800165a <_vfiprintf_r+0x156>
 8001644:	7863      	ldrb	r3, [r4, #1]
 8001646:	2b2a      	cmp	r3, #42	@ 0x2a
 8001648:	d132      	bne.n	80016b0 <_vfiprintf_r+0x1ac>
 800164a:	9b03      	ldr	r3, [sp, #12]
 800164c:	1d1a      	adds	r2, r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	9203      	str	r2, [sp, #12]
 8001652:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001656:	3402      	adds	r4, #2
 8001658:	9305      	str	r3, [sp, #20]
 800165a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001730 <_vfiprintf_r+0x22c>
 800165e:	7821      	ldrb	r1, [r4, #0]
 8001660:	2203      	movs	r2, #3
 8001662:	4650      	mov	r0, sl
 8001664:	f7fe fdd4 	bl	8000210 <memchr>
 8001668:	b138      	cbz	r0, 800167a <_vfiprintf_r+0x176>
 800166a:	9b04      	ldr	r3, [sp, #16]
 800166c:	eba0 000a 	sub.w	r0, r0, sl
 8001670:	2240      	movs	r2, #64	@ 0x40
 8001672:	4082      	lsls	r2, r0
 8001674:	4313      	orrs	r3, r2
 8001676:	3401      	adds	r4, #1
 8001678:	9304      	str	r3, [sp, #16]
 800167a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800167e:	4829      	ldr	r0, [pc, #164]	@ (8001724 <_vfiprintf_r+0x220>)
 8001680:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001684:	2206      	movs	r2, #6
 8001686:	f7fe fdc3 	bl	8000210 <memchr>
 800168a:	2800      	cmp	r0, #0
 800168c:	d03f      	beq.n	800170e <_vfiprintf_r+0x20a>
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <_vfiprintf_r+0x224>)
 8001690:	bb1b      	cbnz	r3, 80016da <_vfiprintf_r+0x1d6>
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	3307      	adds	r3, #7
 8001696:	f023 0307 	bic.w	r3, r3, #7
 800169a:	3308      	adds	r3, #8
 800169c:	9303      	str	r3, [sp, #12]
 800169e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016a0:	443b      	add	r3, r7
 80016a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80016a4:	e76a      	b.n	800157c <_vfiprintf_r+0x78>
 80016a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80016aa:	460c      	mov	r4, r1
 80016ac:	2001      	movs	r0, #1
 80016ae:	e7a8      	b.n	8001602 <_vfiprintf_r+0xfe>
 80016b0:	2300      	movs	r3, #0
 80016b2:	3401      	adds	r4, #1
 80016b4:	9305      	str	r3, [sp, #20]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0c0a 	mov.w	ip, #10
 80016bc:	4620      	mov	r0, r4
 80016be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016c2:	3a30      	subs	r2, #48	@ 0x30
 80016c4:	2a09      	cmp	r2, #9
 80016c6:	d903      	bls.n	80016d0 <_vfiprintf_r+0x1cc>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0c6      	beq.n	800165a <_vfiprintf_r+0x156>
 80016cc:	9105      	str	r1, [sp, #20]
 80016ce:	e7c4      	b.n	800165a <_vfiprintf_r+0x156>
 80016d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80016d4:	4604      	mov	r4, r0
 80016d6:	2301      	movs	r3, #1
 80016d8:	e7f0      	b.n	80016bc <_vfiprintf_r+0x1b8>
 80016da:	ab03      	add	r3, sp, #12
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	462a      	mov	r2, r5
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <_vfiprintf_r+0x228>)
 80016e2:	a904      	add	r1, sp, #16
 80016e4:	4630      	mov	r0, r6
 80016e6:	f3af 8000 	nop.w
 80016ea:	4607      	mov	r7, r0
 80016ec:	1c78      	adds	r0, r7, #1
 80016ee:	d1d6      	bne.n	800169e <_vfiprintf_r+0x19a>
 80016f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80016f2:	07d9      	lsls	r1, r3, #31
 80016f4:	d405      	bmi.n	8001702 <_vfiprintf_r+0x1fe>
 80016f6:	89ab      	ldrh	r3, [r5, #12]
 80016f8:	059a      	lsls	r2, r3, #22
 80016fa:	d402      	bmi.n	8001702 <_vfiprintf_r+0x1fe>
 80016fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80016fe:	f7ff fc4f 	bl	8000fa0 <__retarget_lock_release_recursive>
 8001702:	89ab      	ldrh	r3, [r5, #12]
 8001704:	065b      	lsls	r3, r3, #25
 8001706:	f53f af1f 	bmi.w	8001548 <_vfiprintf_r+0x44>
 800170a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800170c:	e71e      	b.n	800154c <_vfiprintf_r+0x48>
 800170e:	ab03      	add	r3, sp, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	462a      	mov	r2, r5
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <_vfiprintf_r+0x228>)
 8001716:	a904      	add	r1, sp, #16
 8001718:	4630      	mov	r0, r6
 800171a:	f000 f879 	bl	8001810 <_printf_i>
 800171e:	e7e4      	b.n	80016ea <_vfiprintf_r+0x1e6>
 8001720:	08001f0e 	.word	0x08001f0e
 8001724:	08001f18 	.word	0x08001f18
 8001728:	00000000 	.word	0x00000000
 800172c:	080014df 	.word	0x080014df
 8001730:	08001f14 	.word	0x08001f14

08001734 <_printf_common>:
 8001734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001738:	4616      	mov	r6, r2
 800173a:	4698      	mov	r8, r3
 800173c:	688a      	ldr	r2, [r1, #8]
 800173e:	690b      	ldr	r3, [r1, #16]
 8001740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001744:	4293      	cmp	r3, r2
 8001746:	bfb8      	it	lt
 8001748:	4613      	movlt	r3, r2
 800174a:	6033      	str	r3, [r6, #0]
 800174c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001750:	4607      	mov	r7, r0
 8001752:	460c      	mov	r4, r1
 8001754:	b10a      	cbz	r2, 800175a <_printf_common+0x26>
 8001756:	3301      	adds	r3, #1
 8001758:	6033      	str	r3, [r6, #0]
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	0699      	lsls	r1, r3, #26
 800175e:	bf42      	ittt	mi
 8001760:	6833      	ldrmi	r3, [r6, #0]
 8001762:	3302      	addmi	r3, #2
 8001764:	6033      	strmi	r3, [r6, #0]
 8001766:	6825      	ldr	r5, [r4, #0]
 8001768:	f015 0506 	ands.w	r5, r5, #6
 800176c:	d106      	bne.n	800177c <_printf_common+0x48>
 800176e:	f104 0a19 	add.w	sl, r4, #25
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	6832      	ldr	r2, [r6, #0]
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	42ab      	cmp	r3, r5
 800177a:	dc26      	bgt.n	80017ca <_printf_common+0x96>
 800177c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	3b00      	subs	r3, #0
 8001784:	bf18      	it	ne
 8001786:	2301      	movne	r3, #1
 8001788:	0692      	lsls	r2, r2, #26
 800178a:	d42b      	bmi.n	80017e4 <_printf_common+0xb0>
 800178c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001790:	4641      	mov	r1, r8
 8001792:	4638      	mov	r0, r7
 8001794:	47c8      	blx	r9
 8001796:	3001      	adds	r0, #1
 8001798:	d01e      	beq.n	80017d8 <_printf_common+0xa4>
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	6922      	ldr	r2, [r4, #16]
 800179e:	f003 0306 	and.w	r3, r3, #6
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf02      	ittt	eq
 80017a6:	68e5      	ldreq	r5, [r4, #12]
 80017a8:	6833      	ldreq	r3, [r6, #0]
 80017aa:	1aed      	subeq	r5, r5, r3
 80017ac:	68a3      	ldr	r3, [r4, #8]
 80017ae:	bf0c      	ite	eq
 80017b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017b4:	2500      	movne	r5, #0
 80017b6:	4293      	cmp	r3, r2
 80017b8:	bfc4      	itt	gt
 80017ba:	1a9b      	subgt	r3, r3, r2
 80017bc:	18ed      	addgt	r5, r5, r3
 80017be:	2600      	movs	r6, #0
 80017c0:	341a      	adds	r4, #26
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d11a      	bne.n	80017fc <_printf_common+0xc8>
 80017c6:	2000      	movs	r0, #0
 80017c8:	e008      	b.n	80017dc <_printf_common+0xa8>
 80017ca:	2301      	movs	r3, #1
 80017cc:	4652      	mov	r2, sl
 80017ce:	4641      	mov	r1, r8
 80017d0:	4638      	mov	r0, r7
 80017d2:	47c8      	blx	r9
 80017d4:	3001      	adds	r0, #1
 80017d6:	d103      	bne.n	80017e0 <_printf_common+0xac>
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7c6      	b.n	8001772 <_printf_common+0x3e>
 80017e4:	18e1      	adds	r1, r4, r3
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	2030      	movs	r0, #48	@ 0x30
 80017ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80017ee:	4422      	add	r2, r4
 80017f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80017f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80017f8:	3302      	adds	r3, #2
 80017fa:	e7c7      	b.n	800178c <_printf_common+0x58>
 80017fc:	2301      	movs	r3, #1
 80017fe:	4622      	mov	r2, r4
 8001800:	4641      	mov	r1, r8
 8001802:	4638      	mov	r0, r7
 8001804:	47c8      	blx	r9
 8001806:	3001      	adds	r0, #1
 8001808:	d0e6      	beq.n	80017d8 <_printf_common+0xa4>
 800180a:	3601      	adds	r6, #1
 800180c:	e7d9      	b.n	80017c2 <_printf_common+0x8e>
	...

08001810 <_printf_i>:
 8001810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001814:	7e0f      	ldrb	r7, [r1, #24]
 8001816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001818:	2f78      	cmp	r7, #120	@ 0x78
 800181a:	4691      	mov	r9, r2
 800181c:	4680      	mov	r8, r0
 800181e:	460c      	mov	r4, r1
 8001820:	469a      	mov	sl, r3
 8001822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001826:	d807      	bhi.n	8001838 <_printf_i+0x28>
 8001828:	2f62      	cmp	r7, #98	@ 0x62
 800182a:	d80a      	bhi.n	8001842 <_printf_i+0x32>
 800182c:	2f00      	cmp	r7, #0
 800182e:	f000 80d2 	beq.w	80019d6 <_printf_i+0x1c6>
 8001832:	2f58      	cmp	r7, #88	@ 0x58
 8001834:	f000 80b9 	beq.w	80019aa <_printf_i+0x19a>
 8001838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800183c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001840:	e03a      	b.n	80018b8 <_printf_i+0xa8>
 8001842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001846:	2b15      	cmp	r3, #21
 8001848:	d8f6      	bhi.n	8001838 <_printf_i+0x28>
 800184a:	a101      	add	r1, pc, #4	@ (adr r1, 8001850 <_printf_i+0x40>)
 800184c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001850:	080018a9 	.word	0x080018a9
 8001854:	080018bd 	.word	0x080018bd
 8001858:	08001839 	.word	0x08001839
 800185c:	08001839 	.word	0x08001839
 8001860:	08001839 	.word	0x08001839
 8001864:	08001839 	.word	0x08001839
 8001868:	080018bd 	.word	0x080018bd
 800186c:	08001839 	.word	0x08001839
 8001870:	08001839 	.word	0x08001839
 8001874:	08001839 	.word	0x08001839
 8001878:	08001839 	.word	0x08001839
 800187c:	080019bd 	.word	0x080019bd
 8001880:	080018e7 	.word	0x080018e7
 8001884:	08001977 	.word	0x08001977
 8001888:	08001839 	.word	0x08001839
 800188c:	08001839 	.word	0x08001839
 8001890:	080019df 	.word	0x080019df
 8001894:	08001839 	.word	0x08001839
 8001898:	080018e7 	.word	0x080018e7
 800189c:	08001839 	.word	0x08001839
 80018a0:	08001839 	.word	0x08001839
 80018a4:	0800197f 	.word	0x0800197f
 80018a8:	6833      	ldr	r3, [r6, #0]
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6032      	str	r2, [r6, #0]
 80018b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018b8:	2301      	movs	r3, #1
 80018ba:	e09d      	b.n	80019f8 <_printf_i+0x1e8>
 80018bc:	6833      	ldr	r3, [r6, #0]
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	1d19      	adds	r1, r3, #4
 80018c2:	6031      	str	r1, [r6, #0]
 80018c4:	0606      	lsls	r6, r0, #24
 80018c6:	d501      	bpl.n	80018cc <_printf_i+0xbc>
 80018c8:	681d      	ldr	r5, [r3, #0]
 80018ca:	e003      	b.n	80018d4 <_printf_i+0xc4>
 80018cc:	0645      	lsls	r5, r0, #25
 80018ce:	d5fb      	bpl.n	80018c8 <_printf_i+0xb8>
 80018d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80018d4:	2d00      	cmp	r5, #0
 80018d6:	da03      	bge.n	80018e0 <_printf_i+0xd0>
 80018d8:	232d      	movs	r3, #45	@ 0x2d
 80018da:	426d      	negs	r5, r5
 80018dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018e0:	4859      	ldr	r0, [pc, #356]	@ (8001a48 <_printf_i+0x238>)
 80018e2:	230a      	movs	r3, #10
 80018e4:	e011      	b.n	800190a <_printf_i+0xfa>
 80018e6:	6821      	ldr	r1, [r4, #0]
 80018e8:	6833      	ldr	r3, [r6, #0]
 80018ea:	0608      	lsls	r0, r1, #24
 80018ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80018f0:	d402      	bmi.n	80018f8 <_printf_i+0xe8>
 80018f2:	0649      	lsls	r1, r1, #25
 80018f4:	bf48      	it	mi
 80018f6:	b2ad      	uxthmi	r5, r5
 80018f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80018fa:	4853      	ldr	r0, [pc, #332]	@ (8001a48 <_printf_i+0x238>)
 80018fc:	6033      	str	r3, [r6, #0]
 80018fe:	bf14      	ite	ne
 8001900:	230a      	movne	r3, #10
 8001902:	2308      	moveq	r3, #8
 8001904:	2100      	movs	r1, #0
 8001906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800190a:	6866      	ldr	r6, [r4, #4]
 800190c:	60a6      	str	r6, [r4, #8]
 800190e:	2e00      	cmp	r6, #0
 8001910:	bfa2      	ittt	ge
 8001912:	6821      	ldrge	r1, [r4, #0]
 8001914:	f021 0104 	bicge.w	r1, r1, #4
 8001918:	6021      	strge	r1, [r4, #0]
 800191a:	b90d      	cbnz	r5, 8001920 <_printf_i+0x110>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d04b      	beq.n	80019b8 <_printf_i+0x1a8>
 8001920:	4616      	mov	r6, r2
 8001922:	fbb5 f1f3 	udiv	r1, r5, r3
 8001926:	fb03 5711 	mls	r7, r3, r1, r5
 800192a:	5dc7      	ldrb	r7, [r0, r7]
 800192c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001930:	462f      	mov	r7, r5
 8001932:	42bb      	cmp	r3, r7
 8001934:	460d      	mov	r5, r1
 8001936:	d9f4      	bls.n	8001922 <_printf_i+0x112>
 8001938:	2b08      	cmp	r3, #8
 800193a:	d10b      	bne.n	8001954 <_printf_i+0x144>
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	07df      	lsls	r7, r3, #31
 8001940:	d508      	bpl.n	8001954 <_printf_i+0x144>
 8001942:	6923      	ldr	r3, [r4, #16]
 8001944:	6861      	ldr	r1, [r4, #4]
 8001946:	4299      	cmp	r1, r3
 8001948:	bfde      	ittt	le
 800194a:	2330      	movle	r3, #48	@ 0x30
 800194c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001950:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001954:	1b92      	subs	r2, r2, r6
 8001956:	6122      	str	r2, [r4, #16]
 8001958:	f8cd a000 	str.w	sl, [sp]
 800195c:	464b      	mov	r3, r9
 800195e:	aa03      	add	r2, sp, #12
 8001960:	4621      	mov	r1, r4
 8001962:	4640      	mov	r0, r8
 8001964:	f7ff fee6 	bl	8001734 <_printf_common>
 8001968:	3001      	adds	r0, #1
 800196a:	d14a      	bne.n	8001a02 <_printf_i+0x1f2>
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001970:	b004      	add	sp, #16
 8001972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	4833      	ldr	r0, [pc, #204]	@ (8001a4c <_printf_i+0x23c>)
 8001980:	2778      	movs	r7, #120	@ 0x78
 8001982:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	6831      	ldr	r1, [r6, #0]
 800198a:	061f      	lsls	r7, r3, #24
 800198c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001990:	d402      	bmi.n	8001998 <_printf_i+0x188>
 8001992:	065f      	lsls	r7, r3, #25
 8001994:	bf48      	it	mi
 8001996:	b2ad      	uxthmi	r5, r5
 8001998:	6031      	str	r1, [r6, #0]
 800199a:	07d9      	lsls	r1, r3, #31
 800199c:	bf44      	itt	mi
 800199e:	f043 0320 	orrmi.w	r3, r3, #32
 80019a2:	6023      	strmi	r3, [r4, #0]
 80019a4:	b11d      	cbz	r5, 80019ae <_printf_i+0x19e>
 80019a6:	2310      	movs	r3, #16
 80019a8:	e7ac      	b.n	8001904 <_printf_i+0xf4>
 80019aa:	4827      	ldr	r0, [pc, #156]	@ (8001a48 <_printf_i+0x238>)
 80019ac:	e7e9      	b.n	8001982 <_printf_i+0x172>
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0320 	bic.w	r3, r3, #32
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	e7f6      	b.n	80019a6 <_printf_i+0x196>
 80019b8:	4616      	mov	r6, r2
 80019ba:	e7bd      	b.n	8001938 <_printf_i+0x128>
 80019bc:	6833      	ldr	r3, [r6, #0]
 80019be:	6825      	ldr	r5, [r4, #0]
 80019c0:	6961      	ldr	r1, [r4, #20]
 80019c2:	1d18      	adds	r0, r3, #4
 80019c4:	6030      	str	r0, [r6, #0]
 80019c6:	062e      	lsls	r6, r5, #24
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	d501      	bpl.n	80019d0 <_printf_i+0x1c0>
 80019cc:	6019      	str	r1, [r3, #0]
 80019ce:	e002      	b.n	80019d6 <_printf_i+0x1c6>
 80019d0:	0668      	lsls	r0, r5, #25
 80019d2:	d5fb      	bpl.n	80019cc <_printf_i+0x1bc>
 80019d4:	8019      	strh	r1, [r3, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	6123      	str	r3, [r4, #16]
 80019da:	4616      	mov	r6, r2
 80019dc:	e7bc      	b.n	8001958 <_printf_i+0x148>
 80019de:	6833      	ldr	r3, [r6, #0]
 80019e0:	1d1a      	adds	r2, r3, #4
 80019e2:	6032      	str	r2, [r6, #0]
 80019e4:	681e      	ldr	r6, [r3, #0]
 80019e6:	6862      	ldr	r2, [r4, #4]
 80019e8:	2100      	movs	r1, #0
 80019ea:	4630      	mov	r0, r6
 80019ec:	f7fe fc10 	bl	8000210 <memchr>
 80019f0:	b108      	cbz	r0, 80019f6 <_printf_i+0x1e6>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	6060      	str	r0, [r4, #4]
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	6123      	str	r3, [r4, #16]
 80019fa:	2300      	movs	r3, #0
 80019fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a00:	e7aa      	b.n	8001958 <_printf_i+0x148>
 8001a02:	6923      	ldr	r3, [r4, #16]
 8001a04:	4632      	mov	r2, r6
 8001a06:	4649      	mov	r1, r9
 8001a08:	4640      	mov	r0, r8
 8001a0a:	47d0      	blx	sl
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	d0ad      	beq.n	800196c <_printf_i+0x15c>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	079b      	lsls	r3, r3, #30
 8001a14:	d413      	bmi.n	8001a3e <_printf_i+0x22e>
 8001a16:	68e0      	ldr	r0, [r4, #12]
 8001a18:	9b03      	ldr	r3, [sp, #12]
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	bfb8      	it	lt
 8001a1e:	4618      	movlt	r0, r3
 8001a20:	e7a6      	b.n	8001970 <_printf_i+0x160>
 8001a22:	2301      	movs	r3, #1
 8001a24:	4632      	mov	r2, r6
 8001a26:	4649      	mov	r1, r9
 8001a28:	4640      	mov	r0, r8
 8001a2a:	47d0      	blx	sl
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d09d      	beq.n	800196c <_printf_i+0x15c>
 8001a30:	3501      	adds	r5, #1
 8001a32:	68e3      	ldr	r3, [r4, #12]
 8001a34:	9903      	ldr	r1, [sp, #12]
 8001a36:	1a5b      	subs	r3, r3, r1
 8001a38:	42ab      	cmp	r3, r5
 8001a3a:	dcf2      	bgt.n	8001a22 <_printf_i+0x212>
 8001a3c:	e7eb      	b.n	8001a16 <_printf_i+0x206>
 8001a3e:	2500      	movs	r5, #0
 8001a40:	f104 0619 	add.w	r6, r4, #25
 8001a44:	e7f5      	b.n	8001a32 <_printf_i+0x222>
 8001a46:	bf00      	nop
 8001a48:	08001f1f 	.word	0x08001f1f
 8001a4c:	08001f30 	.word	0x08001f30

08001a50 <__swbuf_r>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	460e      	mov	r6, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	4605      	mov	r5, r0
 8001a58:	b118      	cbz	r0, 8001a62 <__swbuf_r+0x12>
 8001a5a:	6a03      	ldr	r3, [r0, #32]
 8001a5c:	b90b      	cbnz	r3, 8001a62 <__swbuf_r+0x12>
 8001a5e:	f7ff f955 	bl	8000d0c <__sinit>
 8001a62:	69a3      	ldr	r3, [r4, #24]
 8001a64:	60a3      	str	r3, [r4, #8]
 8001a66:	89a3      	ldrh	r3, [r4, #12]
 8001a68:	071a      	lsls	r2, r3, #28
 8001a6a:	d501      	bpl.n	8001a70 <__swbuf_r+0x20>
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	b943      	cbnz	r3, 8001a82 <__swbuf_r+0x32>
 8001a70:	4621      	mov	r1, r4
 8001a72:	4628      	mov	r0, r5
 8001a74:	f000 f82a 	bl	8001acc <__swsetup_r>
 8001a78:	b118      	cbz	r0, 8001a82 <__swbuf_r+0x32>
 8001a7a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001a7e:	4638      	mov	r0, r7
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	6922      	ldr	r2, [r4, #16]
 8001a86:	1a98      	subs	r0, r3, r2
 8001a88:	6963      	ldr	r3, [r4, #20]
 8001a8a:	b2f6      	uxtb	r6, r6
 8001a8c:	4283      	cmp	r3, r0
 8001a8e:	4637      	mov	r7, r6
 8001a90:	dc05      	bgt.n	8001a9e <__swbuf_r+0x4e>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f7ff fbd9 	bl	800124c <_fflush_r>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1ed      	bne.n	8001a7a <__swbuf_r+0x2a>
 8001a9e:	68a3      	ldr	r3, [r4, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60a3      	str	r3, [r4, #8]
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	6022      	str	r2, [r4, #0]
 8001aaa:	701e      	strb	r6, [r3, #0]
 8001aac:	6962      	ldr	r2, [r4, #20]
 8001aae:	1c43      	adds	r3, r0, #1
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d004      	beq.n	8001abe <__swbuf_r+0x6e>
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	07db      	lsls	r3, r3, #31
 8001ab8:	d5e1      	bpl.n	8001a7e <__swbuf_r+0x2e>
 8001aba:	2e0a      	cmp	r6, #10
 8001abc:	d1df      	bne.n	8001a7e <__swbuf_r+0x2e>
 8001abe:	4621      	mov	r1, r4
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7ff fbc3 	bl	800124c <_fflush_r>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d0d9      	beq.n	8001a7e <__swbuf_r+0x2e>
 8001aca:	e7d6      	b.n	8001a7a <__swbuf_r+0x2a>

08001acc <__swsetup_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <__swsetup_r+0xa8>)
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	b118      	cbz	r0, 8001ae0 <__swsetup_r+0x14>
 8001ad8:	6a03      	ldr	r3, [r0, #32]
 8001ada:	b90b      	cbnz	r3, 8001ae0 <__swsetup_r+0x14>
 8001adc:	f7ff f916 	bl	8000d0c <__sinit>
 8001ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ae4:	0719      	lsls	r1, r3, #28
 8001ae6:	d422      	bmi.n	8001b2e <__swsetup_r+0x62>
 8001ae8:	06da      	lsls	r2, r3, #27
 8001aea:	d407      	bmi.n	8001afc <__swsetup_r+0x30>
 8001aec:	2209      	movs	r2, #9
 8001aee:	602a      	str	r2, [r5, #0]
 8001af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af4:	81a3      	strh	r3, [r4, #12]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001afa:	e033      	b.n	8001b64 <__swsetup_r+0x98>
 8001afc:	0758      	lsls	r0, r3, #29
 8001afe:	d512      	bpl.n	8001b26 <__swsetup_r+0x5a>
 8001b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b02:	b141      	cbz	r1, 8001b16 <__swsetup_r+0x4a>
 8001b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b08:	4299      	cmp	r1, r3
 8001b0a:	d002      	beq.n	8001b12 <__swsetup_r+0x46>
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f7ff fc85 	bl	800141c <_free_r>
 8001b12:	2300      	movs	r3, #0
 8001b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	6063      	str	r3, [r4, #4]
 8001b22:	6923      	ldr	r3, [r4, #16]
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	6923      	ldr	r3, [r4, #16]
 8001b30:	b94b      	cbnz	r3, 8001b46 <__swsetup_r+0x7a>
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b3c:	d003      	beq.n	8001b46 <__swsetup_r+0x7a>
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4628      	mov	r0, r5
 8001b42:	f000 f83f 	bl	8001bc4 <__smakebuf_r>
 8001b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b4a:	f013 0201 	ands.w	r2, r3, #1
 8001b4e:	d00a      	beq.n	8001b66 <__swsetup_r+0x9a>
 8001b50:	2200      	movs	r2, #0
 8001b52:	60a2      	str	r2, [r4, #8]
 8001b54:	6962      	ldr	r2, [r4, #20]
 8001b56:	4252      	negs	r2, r2
 8001b58:	61a2      	str	r2, [r4, #24]
 8001b5a:	6922      	ldr	r2, [r4, #16]
 8001b5c:	b942      	cbnz	r2, 8001b70 <__swsetup_r+0xa4>
 8001b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b62:	d1c5      	bne.n	8001af0 <__swsetup_r+0x24>
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	0799      	lsls	r1, r3, #30
 8001b68:	bf58      	it	pl
 8001b6a:	6962      	ldrpl	r2, [r4, #20]
 8001b6c:	60a2      	str	r2, [r4, #8]
 8001b6e:	e7f4      	b.n	8001b5a <__swsetup_r+0x8e>
 8001b70:	2000      	movs	r0, #0
 8001b72:	e7f7      	b.n	8001b64 <__swsetup_r+0x98>
 8001b74:	20000038 	.word	0x20000038

08001b78 <__swhatbuf_r>:
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b80:	2900      	cmp	r1, #0
 8001b82:	b096      	sub	sp, #88	@ 0x58
 8001b84:	4615      	mov	r5, r2
 8001b86:	461e      	mov	r6, r3
 8001b88:	da0d      	bge.n	8001ba6 <__swhatbuf_r+0x2e>
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2340      	movne	r3, #64	@ 0x40
 8001b98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	6031      	str	r1, [r6, #0]
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	b016      	add	sp, #88	@ 0x58
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	466a      	mov	r2, sp
 8001ba8:	f000 f848 	bl	8001c3c <_fstat_r>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	dbec      	blt.n	8001b8a <__swhatbuf_r+0x12>
 8001bb0:	9901      	ldr	r1, [sp, #4]
 8001bb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001bb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001bba:	4259      	negs	r1, r3
 8001bbc:	4159      	adcs	r1, r3
 8001bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc2:	e7eb      	b.n	8001b9c <__swhatbuf_r+0x24>

08001bc4 <__smakebuf_r>:
 8001bc4:	898b      	ldrh	r3, [r1, #12]
 8001bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bc8:	079d      	lsls	r5, r3, #30
 8001bca:	4606      	mov	r6, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	d507      	bpl.n	8001be0 <__smakebuf_r+0x1c>
 8001bd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	6123      	str	r3, [r4, #16]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	6163      	str	r3, [r4, #20]
 8001bdc:	b003      	add	sp, #12
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be0:	ab01      	add	r3, sp, #4
 8001be2:	466a      	mov	r2, sp
 8001be4:	f7ff ffc8 	bl	8001b78 <__swhatbuf_r>
 8001be8:	9f00      	ldr	r7, [sp, #0]
 8001bea:	4605      	mov	r5, r0
 8001bec:	4639      	mov	r1, r7
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fa28 	bl	8001044 <_malloc_r>
 8001bf4:	b948      	cbnz	r0, 8001c0a <__smakebuf_r+0x46>
 8001bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bfa:	059a      	lsls	r2, r3, #22
 8001bfc:	d4ee      	bmi.n	8001bdc <__smakebuf_r+0x18>
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	81a3      	strh	r3, [r4, #12]
 8001c08:	e7e2      	b.n	8001bd0 <__smakebuf_r+0xc>
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	6020      	str	r0, [r4, #0]
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c12:	81a3      	strh	r3, [r4, #12]
 8001c14:	9b01      	ldr	r3, [sp, #4]
 8001c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c1a:	b15b      	cbz	r3, 8001c34 <__smakebuf_r+0x70>
 8001c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c20:	4630      	mov	r0, r6
 8001c22:	f000 f81d 	bl	8001c60 <_isatty_r>
 8001c26:	b128      	cbz	r0, 8001c34 <__smakebuf_r+0x70>
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	81a3      	strh	r3, [r4, #12]
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	431d      	orrs	r5, r3
 8001c38:	81a5      	strh	r5, [r4, #12]
 8001c3a:	e7cf      	b.n	8001bdc <__smakebuf_r+0x18>

08001c3c <_fstat_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4d07      	ldr	r5, [pc, #28]	@ (8001c5c <_fstat_r+0x20>)
 8001c40:	2300      	movs	r3, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	602b      	str	r3, [r5, #0]
 8001c4a:	f7fe ff4b 	bl	8000ae4 <_fstat>
 8001c4e:	1c43      	adds	r3, r0, #1
 8001c50:	d102      	bne.n	8001c58 <_fstat_r+0x1c>
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	b103      	cbz	r3, 8001c58 <_fstat_r+0x1c>
 8001c56:	6023      	str	r3, [r4, #0]
 8001c58:	bd38      	pop	{r3, r4, r5, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000328 	.word	0x20000328

08001c60 <_isatty_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4d06      	ldr	r5, [pc, #24]	@ (8001c7c <_isatty_r+0x1c>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	f7fe ff4a 	bl	8000b04 <_isatty>
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	d102      	bne.n	8001c7a <_isatty_r+0x1a>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b103      	cbz	r3, 8001c7a <_isatty_r+0x1a>
 8001c78:	6023      	str	r3, [r4, #0]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
 8001c7c:	20000328 	.word	0x20000328

08001c80 <_raise_r>:
 8001c80:	291f      	cmp	r1, #31
 8001c82:	b538      	push	{r3, r4, r5, lr}
 8001c84:	4605      	mov	r5, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	d904      	bls.n	8001c94 <_raise_r+0x14>
 8001c8a:	2316      	movs	r3, #22
 8001c8c:	6003      	str	r3, [r0, #0]
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001c96:	b112      	cbz	r2, 8001c9e <_raise_r+0x1e>
 8001c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001c9c:	b94b      	cbnz	r3, 8001cb2 <_raise_r+0x32>
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f000 f830 	bl	8001d04 <_getpid_r>
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4628      	mov	r0, r5
 8001caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cae:	f000 b817 	b.w	8001ce0 <_kill_r>
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d00a      	beq.n	8001ccc <_raise_r+0x4c>
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	d103      	bne.n	8001cc2 <_raise_r+0x42>
 8001cba:	2316      	movs	r3, #22
 8001cbc:	6003      	str	r3, [r0, #0]
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	e7e7      	b.n	8001c92 <_raise_r+0x12>
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4798      	blx	r3
 8001ccc:	2000      	movs	r0, #0
 8001cce:	e7e0      	b.n	8001c92 <_raise_r+0x12>

08001cd0 <raise>:
 8001cd0:	4b02      	ldr	r3, [pc, #8]	@ (8001cdc <raise+0xc>)
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f7ff bfd3 	b.w	8001c80 <_raise_r>
 8001cda:	bf00      	nop
 8001cdc:	20000038 	.word	0x20000038

08001ce0 <_kill_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4d07      	ldr	r5, [pc, #28]	@ (8001d00 <_kill_r+0x20>)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	602b      	str	r3, [r5, #0]
 8001cee:	f7fe fe99 	bl	8000a24 <_kill>
 8001cf2:	1c43      	adds	r3, r0, #1
 8001cf4:	d102      	bne.n	8001cfc <_kill_r+0x1c>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	b103      	cbz	r3, 8001cfc <_kill_r+0x1c>
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	bd38      	pop	{r3, r4, r5, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000328 	.word	0x20000328

08001d04 <_getpid_r>:
 8001d04:	f7fe be86 	b.w	8000a14 <_getpid>

08001d08 <_init>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	bf00      	nop
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr

08001d14 <_fini>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	bf00      	nop
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr
