
C_LAB_EX3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000330  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c4  080004cc  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  000014cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004c4  080004c4  000014cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004c4  080004cc  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c8  080004c8  000014c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014cc  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ce4  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000480  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00002660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000089  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f38  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001568  00000000  00000000  000176f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007274f  00000000  00000000  00018c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b3b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001d0  00000000  00000000  0008b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0008b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004ac 	.word	0x080004ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004ac 	.word	0x080004ac

080001d4 <TIM2_IRQHandler>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*on_button_press)() = 0x00;

void TIM2_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	// the status register tells us why the interrupt was called
	// UIF is from an overflow type event
	if ((TIM2->SR & TIM_SR_UIF) != 0){
 80001d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d00a      	beq.n	80001fc <TIM2_IRQHandler+0x28>
		// set the LED state to be a specific value
		on_button_press();
 80001e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000224 <TIM2_IRQHandler+0x50>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4798      	blx	r3
		TIM2->SR &= ~TIM_SR_UIF;
 80001ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001f6:	f023 0301 	bic.w	r3, r3, #1
 80001fa:	6113      	str	r3, [r2, #16]
	}

	// CC1IF is from a successful output compare
	if ((TIM2->SR & TIM_SR_CC1IF) != 0){
 80001fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000200:	691b      	ldr	r3, [r3, #16]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	2b00      	cmp	r3, #0
 8000208:	d00a      	beq.n	8000220 <TIM2_IRQHandler+0x4c>
		// set the LED state to be a specific value
		on_button_press();
 800020a:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <TIM2_IRQHandler+0x50>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4798      	blx	r3
		TIM2->SR &= ~TIM_SR_CC1IF;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800021a:	f023 0302 	bic.w	r3, r3, #2
 800021e:	6113      	str	r3, [r2, #16]
	}
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	2000001c 	.word	0x2000001c

08000228 <led_chase_direction>:

void led_chase_direction(char direction)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b61      	cmp	r3, #97	@ 0x61
 8000236:	d005      	beq.n	8000244 <led_chase_direction+0x1c>
 8000238:	2b63      	cmp	r3, #99	@ 0x63
 800023a:	d107      	bne.n	800024c <led_chase_direction+0x24>
		case 'c':
			on_button_press = &chase_led_c;
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <led_chase_direction+0x30>)
 800023e:	4a07      	ldr	r2, [pc, #28]	@ (800025c <led_chase_direction+0x34>)
 8000240:	601a      	str	r2, [r3, #0]
			break;
 8000242:	e003      	b.n	800024c <led_chase_direction+0x24>
		case 'a':
			on_button_press = &chase_led_a;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <led_chase_direction+0x30>)
 8000246:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <led_chase_direction+0x38>)
 8000248:	601a      	str	r2, [r3, #0]
			break;
 800024a:	bf00      	nop
	}
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr
 8000258:	2000001c 	.word	0x2000001c
 800025c:	08000265 	.word	0x08000265
 8000260:	08000299 	.word	0x08000299

08000264 <chase_led_c>:

void chase_led_c()
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800026a:	4b0a      	ldr	r3, [pc, #40]	@ (8000294 <chase_led_c+0x30>)
 800026c:	607b      	str	r3, [r7, #4]

	*led_register <<= 1; // Shift LED clockwise by 1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	701a      	strb	r2, [r3, #0]
	if (*led_register == 0) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d102      	bne.n	8000288 <chase_led_c+0x24>
		*led_register = 1; // If shift causes all lights off, turn first LED on
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
	}
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	48001015 	.word	0x48001015

08000298 <chase_led_a>:

void chase_led_a()
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800029e:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <chase_led_a+0x30>)
 80002a0:	607b      	str	r3, [r7, #4]

	*led_register >>= 1; // Shift LED anticlockwise by 1
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	085b      	lsrs	r3, r3, #1
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	701a      	strb	r2, [r3, #0]
	if (*led_register == 0) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d102      	bne.n	80002bc <chase_led_a+0x24>
		*led_register = 1;// If shift causes all lights off, turn last LED on
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2201      	movs	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	48001015 	.word	0x48001015

080002cc <delay_set>:

void delay_set(int delay) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	enable_interrupt();
 80002d4:	f000 f84a 	bl	800036c <enable_interrupt>

	TIM2->ARR = delay; // 0.4 second before reset
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002e0:	b662      	cpsie	i
}
 80002e2:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <initialise_board>:
#include "initialise.h"
#include <stdint.h>
#include "stm32f303xc.h"

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002f2:	4b06      	ldr	r3, [pc, #24]	@ (800030c <initialise_board+0x20>)
 80002f4:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002fc:	801a      	strh	r2, [r3, #0]
					@ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
								@ the MODER settings for pe8-15
	BX LR @ return from function call
	*/
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	48001002 	.word	0x48001002

08000310 <enable_clocks>:

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000314:	4b05      	ldr	r3, [pc, #20]	@ (800032c <enable_clocks+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	@ (800032c <enable_clocks+0x1c>)
 800031a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800031e:	6153      	str	r3, [r2, #20]
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
	BX LR @ return from function call
	*/
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	@ (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <enable_interrupt>:
#include "interrupt.h"
#include <stdint.h>
#include "stm32f303xc.h"

void enable_interrupt() {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
}
 8000372:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// enable the timer 2 through the RCC registers
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <enable_interrupt+0x70>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	4a18      	ldr	r2, [pc, #96]	@ (80003dc <enable_interrupt+0x70>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	61d3      	str	r3, [r2, #28]

	// set the prescaler so that 1 count is 1 microsecond
	//  8MHz = 0.000000125, 1 microsecond is 0.000001,
	//	prescaler 0.000001/0.000000125 = 8
	TIM2->PSC = 8;  // 1 microsecond / count
 8000380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000384:	2208      	movs	r2, #8
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28

	// make the timer2 trigger an interrupt when there is an overflow
	TIM2->DIER |= TIM_DIER_UIE;
 8000388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	60d3      	str	r3, [r2, #12]

	// make the timer2 trigger an interrupt when there is
	//  a successful output compare (on channel 1)
	TIM2->DIER |= TIM_DIER_CC1IE;
 8000398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	60d3      	str	r3, [r2, #12]

	// finally, enable the timer2
	TIM2->CR1 |= TIM_CR1_CEN;
 80003a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that timer2 interrupts should be handled
	NVIC_EnableIRQ(TIM2_IRQn);
 80003b8:	201c      	movs	r0, #28
 80003ba:	f7ff ffb9 	bl	8000330 <__NVIC_EnableIRQ>

	// Enable the output Capture/Compare for channel 1
	TIM2->CCER |= TIM_CCER_CC1E;
 80003be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6213      	str	r3, [r2, #32]
	TIM2->CCR1 = 100000; // 50% duty cycle (500000/1000000)
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d2:	4a03      	ldr	r2, [pc, #12]	@ (80003e0 <enable_interrupt+0x74>)
 80003d4:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	000186a0 	.word	0x000186a0

080003e4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

	// enable the devices
	enable_clocks();
 80003ea:	f7ff ff91 	bl	8000310 <enable_clocks>
	initialise_board();
 80003ee:	f7ff ff7d 	bl	80002ec <initialise_board>

	// choose whether the chase led function is clockwise (c) or anticlockwise (a)

	char direction = 'c';
 80003f2:	2363      	movs	r3, #99	@ 0x63
 80003f4:	71fb      	strb	r3, [r7, #7]
	int delay = 400000;// 0.4 second before reset
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <main+0x28>)
 80003f8:	603b      	str	r3, [r7, #0]

	// set the interrupt handling function

	led_chase_direction(direction);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff13 	bl	8000228 <led_chase_direction>

	delay_set(delay);
 8000402:	6838      	ldr	r0, [r7, #0]
 8000404:	f7ff ff62 	bl	80002cc <delay_set>

    /* Loop forever */
	for(;;);
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <main+0x24>
 800040c:	00061a80 	.word	0x00061a80

08000410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000410:	480d      	ldr	r0, [pc, #52]	@ (8000448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000412:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000414:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	@ (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	@ (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	@ (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	@ (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	@ (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043e:	f000 f811 	bl	8000464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000442:	f7ff ffcf 	bl	80003e4 <main>

08000446 <LoopForever>:

LoopForever:
  b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   r0, =_estack
 8000448:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000454:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 8000458:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800045c:	20000020 	.word	0x20000020

08000460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC1_2_IRQHandler>
	...

08000464 <__libc_init_array>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4d0d      	ldr	r5, [pc, #52]	@ (800049c <__libc_init_array+0x38>)
 8000468:	4c0d      	ldr	r4, [pc, #52]	@ (80004a0 <__libc_init_array+0x3c>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	2600      	movs	r6, #0
 8000470:	42a6      	cmp	r6, r4
 8000472:	d109      	bne.n	8000488 <__libc_init_array+0x24>
 8000474:	4d0b      	ldr	r5, [pc, #44]	@ (80004a4 <__libc_init_array+0x40>)
 8000476:	4c0c      	ldr	r4, [pc, #48]	@ (80004a8 <__libc_init_array+0x44>)
 8000478:	f000 f818 	bl	80004ac <_init>
 800047c:	1b64      	subs	r4, r4, r5
 800047e:	10a4      	asrs	r4, r4, #2
 8000480:	2600      	movs	r6, #0
 8000482:	42a6      	cmp	r6, r4
 8000484:	d105      	bne.n	8000492 <__libc_init_array+0x2e>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	f855 3b04 	ldr.w	r3, [r5], #4
 800048c:	4798      	blx	r3
 800048e:	3601      	adds	r6, #1
 8000490:	e7ee      	b.n	8000470 <__libc_init_array+0xc>
 8000492:	f855 3b04 	ldr.w	r3, [r5], #4
 8000496:	4798      	blx	r3
 8000498:	3601      	adds	r6, #1
 800049a:	e7f2      	b.n	8000482 <__libc_init_array+0x1e>
 800049c:	080004c4 	.word	0x080004c4
 80004a0:	080004c4 	.word	0x080004c4
 80004a4:	080004c4 	.word	0x080004c4
 80004a8:	080004c8 	.word	0x080004c8

080004ac <_init>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr

080004b8 <_fini>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr
